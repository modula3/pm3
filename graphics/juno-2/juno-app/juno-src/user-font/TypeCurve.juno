PRIVATE PROC p:TypeChar(c, txt) IS 
  VAR w IN 
    w := UserFont.StringWidth(txt); 
    IF 
      VAR p2 ~ (0, 0.5) REL (p, c) IN 
        Geometry.Dist(p, p2) = w AND 
        (p, c) CONG (c, p2) -> 
          UserFont.TypeToward(p, p2, 
                              txt); 
          p := p2 
      END 
    FI 
  END 
END;

PROC TypeOnCircle(a, b, txt) IS 
  VAR i, len IN 
    i, len := 0, Text.Length(txt); 
    DO 
      i < len -> 
        b:TypeChar(a, 
                   Text.Sub(txt, i, 1)); 
        i := i + 1 
    OD 
  END 
END;

UI TextTool(TypeOnCircle);

PROC TypeCircleC(a, b, txt) IS 
  VAR w, theta IN 
    w := UserFont.StringWidth(txt); 
    theta := 
      w / (2 * Geometry.Dist(a, b)); 
    TypeOnCircle(a, 
                 (COS(theta), 
                  SIN(theta)) REL 
                 (a, b), txt) 
  END 
END;

UI TextTool(TypeCircleC);

PROC TypeC(a, txt) IS 
  UserFont.Type(R2.Minus(a, 
                         (UserFont.StringWidth(txt) / 
                          2, 0)), txt) 
END;

UI TextTool(TypeC);

PROC Cmd0() IS 
  VAR 
    a ~ (0, 0), 
    txt = "Hello, Dijkstra!", w 
  IN 
    UserFont.SetFontFace(Dijkstra.Font); 
    UserFont.SetFontSize(50); 
    w := UserFont.StringWidth(txt); 
    VAR 
      b = R2.Plus(a, (0, w / Math.Pi)) 
    IN 
      TypeCircleC(a, b, txt) 
    END 
  END 
END;

PROC Cmd1() IS 
  IF 
    VAR a = (3.0295274, -74.33194), b ~ (3.0295274, 154.7318) IN 
      a VER b -> 
        UserFont.SetFontSize(50); 
        UserFont.SetRendering(UserFont.BlockRendering); 
        TypeCircleC(a, b, "Centered") 
    END 
  FI 
END;
