MODULE TypeLinesR;

(* The procedures in this module 
   type a right-justified block of 
   text lines relative to a 
   specified point. Each procedure 
   takes a reference point and a 
   single text, which is converted 
   to a list of texts by the 
   "TextList.FromText" procedure. 
   One line is displayed in the 
   block per element of this list. 

   The lines in each block are 
   separated vertically by the 
   height of the current font plus 
   the current line skip value 
   (maintained by the "LineSkip" 
   module). 

   The text block is actually 
   translated in the appropriate 
   direction away from the 
   reference point by the current 
   horizontal and/or vertical 
   offset values (maintained by the 
   "Offset" module). For example, 
   the "South" procedure translates 
   the text block up by the current 
   vertical offset, and the "NE" 
   procedure translates it down by 
   the current vertical offset and 
   to the left by the current 
   horizontal offset. The "Center" 
   procedure ignores the current 
   offset values. *)

IMPORT LineSkip, Offset, PS, 
       R2, TextList, Type;

PRIVATE PROC TypeBlockR(p, l) IS 
  VAR asc, dec, d IN 
    asc, dec := PS.FontHeight(); 
    d := asc + dec + LineSkip.Get(); 
    p := (CAR(p), CDR(p) - asc); 
    DO 
      l # NIL -> 
        Type.R(p, CAR(l)); 
        p := (CAR(p), CDR(p) - d); 
        l := CDR(l) 
    OD 
  END 
END;

/* Type the right-justified block 
   of text lines "l" such that "p" 
   is the northwest corner of the 
   box's bounding-box. */

PROC North(p, txt) IS 
  VAR l, w, h, dh IN 
    l := TextList.FromText(txt); 
    w, h := TextList.Size(l); 
    dh := Offset.GetVer(); 
    TypeBlockR(R2.Plus(p, 
                       (w / 2, -dh)), 
               l) 
  END 
END;

PROC South(p, txt) IS 
  VAR l, w, h, dh IN 
    l := TextList.FromText(txt); 
    w, h := TextList.Size(l); 
    dh := Offset.GetVer(); 
    TypeBlockR(R2.Plus(p, 
                       (w / 2, 
                        h + dh)), l) 
  END 
END;

PROC East(p, txt) IS 
  VAR l, w, h, dw IN 
    l := TextList.FromText(txt); 
    w, h := TextList.Size(l); 
    dw := Offset.GetHor(); 
    TypeBlockR(R2.Plus(p, 
                       (-dw, h / 2)), 
               l) 
  END 
END;

PROC West(p, txt) IS 
  VAR l, w, h, dw IN 
    l := TextList.FromText(txt); 
    w, h := TextList.Size(l); 
    dw := Offset.GetHor(); 
    TypeBlockR(R2.Plus(p, 
                       (w + dw, 
                        h / 2)), l) 
  END 
END;

PROC Center(p, txt) IS 
  VAR l, w, h IN 
    l := TextList.FromText(txt); 
    w, h := TextList.Size(l); 
    TypeBlockR(R2.Plus(p, 
                       (w / 2, 
                        h / 2)), l) 
  END 
END;

PROC NW(p, txt) IS 
  VAR l, w, h, dw, dh IN 
    l := TextList.FromText(txt); 
    w, h := TextList.Size(l); 
    dw, dh := Offset.GetHorVer(); 
    TypeBlockR(R2.Plus(p, 
                       (w + dw, -dh)), 
               l) 
  END 
END;

PROC NE(p, txt) IS 
  VAR l, dw, dh IN 
    l := TextList.FromText(txt); 
    dw, dh := Offset.GetHorVer(); 
    TypeBlockR(R2.Plus(p, (-dw, -dh)), 
               l) 
  END 
END;

PROC SE(p, txt) IS 
  VAR l, w, h, dw, dh IN 
    l := TextList.FromText(txt); 
    w, h := TextList.Size(l); 
    dw, dh := Offset.GetHorVer(); 
    TypeBlockR(R2.Plus(p, 
                       (-dw, h + dh)), 
               l) 
  END 
END;

PROC SW(p, txt) IS 
  VAR l, w, h, dw, dh IN 
    l := TextList.FromText(txt); 
    w, h := TextList.Size(l); 
    dw, dh := Offset.GetHorVer(); 
    TypeBlockR(R2.Plus(p, 
                       (w + dw, 
                        h + dh)), l) 
  END 
END;

UI TextTool(North);

UI TextTool(South);

UI TextTool(East);

UI TextTool(West);

UI TextTool(Center);

UI TextTool(NW);

UI TextTool(NE);

UI TextTool(SE);

UI TextTool(SW);

(* Display the "\"-separated texts 
   in "t" as a right-justified 
   block such that "p" is at the 
   location of the block's bounding 
   box named by the procedure. *)

