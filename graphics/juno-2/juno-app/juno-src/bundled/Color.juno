MODULE Color;

(* Procedures for manipulating and setting colors. *)

IMPORT Math;

(* The procedures in this module manipulate color 
   values, which are lists of 3 real numbers 
   corresponding to the location of the color in the 
   unit RGB cube. *)

CONST 
  Black = [0, 0, 0], 
  White = [1, 1, 1], 
  Red = [1, 0, 0], 
  Green = [0, 1, 0], 
  Blue = [0, 0, 1], 
  Cyan = [0, 1, 1], 
  Magenta = [1, 0, 1], 
  Yellow = [1, 1, 0],
  Grey25 = FromGrey(1/4),
  Grey50 = FromGrey(1/2),
  Grey75 = FromGrey(3/4);

(* These colors are the vertices of the unit RGB cube. *)

PROC c := FromGrey(v) IS c := [v, v, v] END;

(* Make "c" the grey color with value "v". The value "v = 0" produces black,
   and the value "v = 1" produces white. *)

PROC c := FromRGB(r, g, b) IS c := [r, g, b] END;

(* Make "c" the color with RGB values "r", "g", and "b". 
*)

CONST
  RedHue = 0,
  YellowHue = 1/6,
  GreenHue = 1/3,
  CyanHue = 1/2,
  BlueHue = 2/3,
  MagentaHue = 5/6;

(* A color may also be specified as a hue, saturation, 
   and value (HSV) triple. The hue "h" determines the 
   pure hue or pigment or the color. The hue varies
   around the color wheel as indicated by the 6 "Hue"
   constants defined above.

   The saturation "s" is the intensity of the color. The 
   pure colors have "s = 1", while the greys have "s = 
   0" (in which case the hue is irrelevant and the value 
   determines the shade of grey). 

   The value "v" is the brightness of the color. The 
   pure colors have "v = 1", while black has "v = 0" (in 
   which case the hue and saturation are both 
   irrelevant). *)

PROC c := FromHSV(h, s, v) IS 
  IF 
    v = 0 -> c := Black | s = 0 -> c := FromGrey(v) 
  | IF h = 1 -> h := 0 | SKIP FI; 
    VAR i, f, p, q, t IN 
      i := FLOOR(h * 6); 
      f := (h * 6) - i; 
      p := v * (1 - s); 
      q := v * (1 - (s * f)); 
      t := v * (1 - (s * (1 - f))); 
      IF 
        i < 0.5 -> c := [v, t, p] 
      | i < 1.5 -> c := [q, v, p] 
      | i < 2.5 -> c := [p, v, t] 
      | i < 3.5 -> c := [p, q, v] 
      | i < 4.5 -> c := [t, p, v] 
      | i < 5.5 -> c := [v, p, q] 
      FI 
    END 
  FI 
END;

(* Make "c" the color with HSV values "h", "s", and "v". 
*)

PROC c := HueN(n) IS
  c := (Math.Phi * n) MOD 1.0
END;

(* This function computes a mapping from integers to hue values such
   that the hues corresponding to the integers 1, 2, ..., n are evenly
   distributed around the color wheel, and such that the hues
   corresponding to subsequent integers are sufficiently distinct to
   be easily distinguished. *)
