/home/ftp/pub/m3/pkg/SRC-m3/PEX/src/PEX.m3: * #define PEX_BITNUM_TO_BITMASK(bitIndex, maskNum, maskValue) \
/home/ftp/pub/m3/pkg/SRC-m3/PEX/src/PEX.m3: *     maskNum	= (bitIndex) / 32; \
/home/ftp/pub/m3/pkg/SRC-m3/PEX/src/PEX.m3: * #define CHECK_BITMASK_ARRAY(mask,bitIndex) \
/home/ftp/pub/m3/pkg/SRC-m3/PEX/src/PEX.m3: * #define PEX_SetPCAttrMaskBit(mask, attrNum) \
/home/ftp/pub/m3/pkg/SRC-m3/PEX/src/PEX.m3: * #define PEXAllocateOCBuffer(_dpy_,_typ_,_targ_,_bufTyp_,_errFn_,_initSiz_)\
/home/ftp/pub/m3/pkg/SRC-m3/PEX/src/PEX.m3: * ( (_bufTyp_ == PEXDefaultTransientOCBuffer) ?\
/home/ftp/pub/m3/pkg/SRC-m3/PEX/src/PEX.m3: *       (PEXAllocateTransientOCBuffer(_dpy_,_typ_,_targ_,_errFn_,_initSiz_)) :\
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/AnimServer.m3:    Wr.PutText (animerr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/Point3.m3:      Process.Crash ("Fatal Error: called OrthoVector(Origin) \n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/PolygonGO.m3:      | Prop.BadMethod (msg) => AnimServer.ReportError (msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/Prop.m3:      AnimServer.ReportError (msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:    IO.Put ("### SetDistinguishFacetsFlag not implemented \n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:      IO.Put ("ChoosePixelformat suggests format " & Fmt.Int (pf) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:        IO.Put ("PF " & Fmt.Int (i) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:        IO.Put (")\n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:        IO.Put ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:        IO.Put ("  color bits   : " & Fmt.Int (pfd.cColorBits) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:        IO.Put ("  alpha bits   : " & Fmt.Int (pfd.cAlphaBits) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:        IO.Put ("  depth bits   : " & Fmt.Int (pfd.cDepthBits) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:        IO.Put ("  stencil bits : " & Fmt.Int (pfd.cStencilBits) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/win-opengl/Win_OpenGL_Base.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/anim3D/src/x-opengl/X_OpenGL_Base.m3:    IO.Put ("### SetDistinguishFacetsFlag not implemented \n");
/home/ftp/pub/m3/pkg/SRC-m3/badbricks/src/BadBricks.m3:      Wr.PutText(Stdio.stderr, "Can't connect to Trestle Server\n")
/home/ftp/pub/m3/pkg/SRC-m3/bicycle/src/PixmapFromXData.m3:    WHILE ch = ' ' OR ch = '\n' OR ch = '\t' OR ch = ',' DO
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        RAISE Error("expected an integer instead of \"" & t & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        RAISE Error("expected a number instead of \"" & t & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                     " seconds.\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:		RAISE Error("Can't run \"ppmtopgm\" or \"pgmtopbm\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:		       "\nOCR failed: " & Atom.ToText(code.head) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:		       " seconds.\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:    EXCEPT OSError.E => RAISE Error("Can't read \"" & name & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:      RAISE Error("Can't open \"" & src & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          RAISE Error("Can't create \"" & tempFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          RAISE Error("Can't create \"" & tempFile2Name & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:            RAISE Error("\"tifftopnm\" reported failure");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                       " seconds.\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          RAISE Error("Can't run \"tifftopnm\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          RAISE Error("Can't delete \"" & tempFile2Name & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        RAISE Error("Can't delete \"" & tempFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        RAISE Error("Can't create \"" & tempFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                     " seconds.\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:      | Wr.Failure => RAISE Error("Can't write \"" & tempFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        RAISE Error("Can't delete \"" & tempFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                     " bytes\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        IF n < 4 THEN RAISE Error("Unexpected short file \"" & src & "\"") END;
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:      RAISE Error("Can't read \"" & src & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        RAISE Error("Too many images in \"-verso\" mode");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        | OSError.E => RAISE Error("Can't open \"" & src & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:           RAISE Error("\"" & src & "\" isn't a Lectern document");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                "Invalid \"from\" image number when copying from \"" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                src & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                   "Merging attributes, etc., from \"" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                   src & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                     "Including nothing from \"" & src & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                     ": including \"" & src &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                     "\" starting at its image " &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                     Fmt.Int(from+1) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                       ": rescaling from \"" & src &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                       "\", image " & Fmt.Int(i+1) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                       " seconds.\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          RAISE Error("Can't create \"" & tempFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:            RAISE Error("Can't delete \"" & tempFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:		     ": from PostScript\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:	Wr.PutText(Stdio.stderr, "Original PostScript: copying from input\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:	  RAISE Error("Can't reposition \"" & src & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "usage is \"" & Params.Get(0) &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                            " options... dest\", where \"options\" are:\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -contents <n>                ... first contents page is image <n>\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -gamma <r>                   ... apply gamma adjustment while scaling\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -image <n>                   ... next image is image number <n>\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -images <file> <from> <for>  ... copy images only from Lectern file\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -include <file> <from> <for> ... copy images & attributes from Lectern file\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -includeUnscaled             ... include unscaled images in output\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -index <n>                   ... first index page is page number <n>\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -noAttribute <key>           ... undefine attribute <key>\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -noOCR                       ... don't perform OCR\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -noUnscaled                  ... don't include unscaled images in output\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -only <n>                    ... produce only images scaled down by n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -original <file>             ... copy original PostScript to output\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -page1 <n>                   ... page number 1 is image <n>\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -realOCR                     ... perform real OCR\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -recto                       ... following are odd pages, increasing\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -resolution <r>              ... assume <r> rather than 300 DPI for input\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -rescale <file> <from> <for> ... as \"include\", but rescale images\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -simplex                     ... following are consecutive pages\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -stdin                       ... take PNM images from standard input\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -verbose                     ... give more progress reports\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -verso                       ... following are even pages, decreasing\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -<key>: <value>              ... define attribute <key> = <value>\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  <file>                       ... take an image from PNM or TIFF file,\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "                                   or a set of images from PostScript file\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "These options affect only input from (subsequent) PostScript file:\n" & 
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSblackAndWhite             ... generate black&white images\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PScolor                     ... generate color images\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSfakeOCR                   ... extract OCR info from PostScript\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSgray                      ... generate grayscale images\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSgs                        ... specify Ghostscript pathname\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSincludeOriginal           ... include PostScript from output\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSlandscape                 ... rotate images 270 degrees\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSlandscapeOther            ... rotate images  90 degrees\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSportrait                  ... don't rotate images\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSnoOriginal                ... omit PostScript from output\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:  "  -PSscale <r>                 ... unscaled resolution is <r>*300 DPI\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:      Wr.PutText(Stdio.stderr, Version & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:      Wr.PutText(Stdio.stderr, "Constructing \"" & dest & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        RAISE Error("Can't open \"" & destTemp & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:            RAISE Error("Negative image number \"" & Fmt.Int(thisPage+1) &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                        "\" in \"-image\" option");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                | OSError.E => RAISE Error("Can't open \"" & src & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:            Wr.PutText(Stdio.stderr, "Original PostScript: copying \"" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                                     src & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                RAISE Error("Can't open \"" & src & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:            RAISE Error("Negative value in \"-PSscale\" option");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                   "  By default, \"-noOCR\" will be used for image input.");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                  IF c # ' ' AND c # '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                       ": from stdin\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:            RAISE Error("Unknown option \"" & src & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                 OR sig[0] = '\004' AND sig[1] = '%' AND sig[2] = '!' THEN
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                           ": reading \"" & src & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          RAISE Error("Can't rename \"" & destTemp & "\" to \"" & dest & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:        Wr.PutText(Stdio.stderr, "Wrote \"" & dest & "\":\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          Wr.PutText(Stdio.stderr, "  Contains no images\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                   " seconds per image)\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          Wr.PutText(Stdio.stderr, "  Contains no original PostScript\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                                   " bytes of original PostScript\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                                 Fmt.Int(dir.origin+2) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          Wr.PutText(Stdio.stderr, "  No contents page specified\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                                   Fmt.Int(dir.contents+1) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          Wr.PutText(Stdio.stderr, "  No index page specified\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                                   Fmt.Int(dir.index-dir.origin) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:          Wr.PutText(Stdio.stderr, "  No key/value attributes specified\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:            Wr.PutText(Stdio.stderr, "  \"" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                       dir.attributes[i].key & "\" = \"" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:                       dir.attributes[i].value & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:      | MissingParam => RAISE Error("Missing parameter after \"" & src & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:      | Wr.Failure => RAISE Error("Error while writing \"" & dest & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/BuildLectern.m3:      Wr.PutText(Stdio.stderr, "\n" & Params.Get(0) & ": " & e & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/FromPS.m3:          IF c # ' ' AND c # '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/FromPS.m3:          Wr.PutText(wr, w); Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:    Spaces  = SET OF CHAR{' ', '\t', '\n', '\r'};
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:      WHILE Rd.GetChar(rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:    Wr.PutText(wr, "\n" & Fmt.Int(wGroups * pixelsPerGroup) & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:                          Fmt.Int(height) & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:                          Fmt.Int(scale) & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:                          Fmt.Int(maxVal) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:                 Fmt.Int(runZBytes) & " total bytes\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:                 Fmt.Int(runPBytes) & " total bytes\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/LGM.m3:                 Fmt.Int(literalEscCount) & " escaped\n");
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "S\237", (* Scaron *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "Z\237", (* Zcaron *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "s\237", (* scaron *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "Y\250", (* Ydieresis *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "z\237", (* zcaron *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:   Type 3 fonts from dvips: "\000", ..., "\377":  *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\223",  (* circumflex *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "S\237", (* Scaron *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "s\237", (* scaron *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "Y\250"  (* Ydieresis" *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\\Gamma", "\\Delta", "\\Theta", "\\Lambda",
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\\Xi", "\\Pi", "\\Sigma", "\\Upsilon",
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\\Phi", "\\Psi", "\\Omega", "ff", "fi", "fl", "ffi", "ffl",
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "i",     (* \imath *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "j",     (* \jmath *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\237",  (* caron *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\226",  (* breve *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\257",  (* macron *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\232",  (* ring *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\270",  (* cedilla *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\337",  (* germandbls *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\370",  (* oslash *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\330",  (* Oslash *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "(", ")", "*", "+", ",", "\255" (* hyphen *), ".", "/",
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "``", "]", "\223" (* circumflex *), "\227" (* dotaccent *),
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\235",  (* hungarumlaut *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    "\250"   (* dieresis *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:                ELSIF in = '\r' THEN (* Adobe Illustrator does this... *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:                ELSIF in = '\t' THEN (* MacDraw Pro does this... *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:                ELSIF in = '\032' THEN (* MS Word on Mac does this... *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:            IF buf[l-1] = '\255' THEN buf[l-1] := '-' END;
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/OCR_PS.m3:    IF l # 0 THEN (* l = 0 e.g., when Adobe Illustrator outputs "\r" *)
/home/ftp/pub/m3/pkg/SRC-m3/buildlectern/src/WIN32/OSUtilsWin32.m3:  CONST PipePrefix = "\\\\.\\pipe\\";
/home/ftp/pub/m3/pkg/SRC-m3/cg-burs/src/Main.m3:    OSError.E => IO.Put ("m3cg: IO error\n", Stdio.stderr)
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:      Wr.PutText (wr, name & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:        Wr.PutText (wr, Fmt.F ("%5s  %s\n", Fmt.Int (line^),
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:      Wr.PutChar (wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:                  "procedure trailer for '%s' does not match header\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:                  "duplicate statement tag '@%s' at offsets %s and %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:          errorWr, "unterminated procedure header (@name) at end-of-file\n");
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:                      "unmatched procedure header (@%s) at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:            "unterminated procedure trailer for '%s' at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:          Fmt.F ("unterminated statement tag for '%s' at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:          Fmt.F ("unterminated statement marker ('@%s') at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:                      "unmatched procedure header (@%s) at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/CodeView.m3:                      "unmatched procedure header (@%s) at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/DataView.m3:      IF i > 0 THEN Wr.PutChar (wr, '\n'); END;
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/DataView.m3:      IF i > 0 THEN Wr.PutChar (wr, '\n'); END;
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/DataView.m3:      IF i > 0 THEN Wr.PutChar (wr, '\n'); END;
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/DataView.m3:      IF i > 0 THEN Wr.PutChar (wr, '\n'); END;
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/DataView.m3:      IF i > 0 THEN Wr.PutChar (wr, '\n'); END;
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/DataView.m3:      IF i > 0 THEN Wr.PutChar (wr, '\n'); END;
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:      Wr.PutText (wr, name & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:        Wr.PutText (wr, Fmt.F ("%5s  %s\n", Fmt.Int (line^),
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:      Wr.PutChar (wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:                  "procedure trailer for '%s' does not match header\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:                  "duplicate statement tag '@%s' at offsets %s and %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:          errorWr, "unterminated procedure header (@name) at end-of-file\n");
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:                      "unmatched procedure header (@%s) at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:            "unterminated procedure trailer for '%s' at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:          Fmt.F ("unterminated statement tag for '%s' at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:          Fmt.F ("unterminated statement marker ('@%s') at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:                      "unmatched procedure header (@%s) at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/codeview/src/oldCodeView.m3:                      "unmatched procedure header (@%s) at end-of-file\n",
/home/ftp/pub/m3/pkg/SRC-m3/columns/src/Main.m3:    Wr.PutChar (Stdio.stdout, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/columns/src/Main.m3:      buf[i+8] := ' ';  buf[i+9] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/columns/src/Main.m3:      buf[i+8] := ' ';  buf[i+9] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:      Stdio.stderr, "Restoring workspace from " & filename & ".\n");
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:                                               & urlList.head & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:    Wr.PutText(wr, "(Deck\n");
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:    Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:    Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:    Wr.PutText(wr, "  (Pages\n    ");
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:    Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:    Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/deckscape/src/Storage.m3:        Wr.PutText(wr, "\n    ");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraph.mg:    Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraph.mg:    Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraph.mg:      Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphStack.mg:    Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphStack.mg:    Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphStack.mg:      Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:                 Fmt.Int(m) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:                 Fmt.Int(m) & ": " & msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:  Wr.PutText(stdout, "Before TC:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:  Wr.PutText(stdout, "\nAfter TC:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:  Wr.PutText(stdout, "\nAfter Incremental TC:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAdded 8 nodes, 4 edges:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAdded 9 nodes, 9 edges:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAfter pop(8, 4):\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\n9 nodes, 9 edges:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAfter transitive closure:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAfter pop(9, 9):\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAfter pop(8, 4):\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAfter Transitive-closure:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAfter adding edges and closing:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/DiGraphTest.m3:    Wr.PutText(stdout, "\nAfter pop(8, 4):\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/IntIntDiGraph.m3:    Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/IntIntDiGraph.m3:    Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/IntIntDiGraph.m3:      Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/TopSortTest.m3:    Wr.PutText(Stdio.stdout, "\n")
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/TopSortTest.m3:  Wr.PutText(Stdio.stdout, "Should have no cycles:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/digraph/src/TopSortTest.m3:  Wr.PutText(Stdio.stdout, "\n\nShould have cycles:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DLWindow.m3:  IF got = '\000' THEN RETURN; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  IF k < 0 THEN k := Text.FindChar (text, '\\') END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:    IF (a^[m]='(') OR (a^[m]=')') OR (a^[m]='\\') THEN count := count + 1; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:    IF (a^[m]='(') OR (a^[m]=')') OR (a^[m]='\\') THEN b^[k] := '\\'; k := k + 1; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  IF Modifier.Option IN modifiers THEN RETURN '\000'; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  FOR j := 0 TO 255 DO shifted[j] := '\000'; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  FOR j := 0 TO 255 DO unshifted[j] := '\000'; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  Other(250,'{','['); Other(246,'}',']'); Other(242,':',';'); Other(251,'\"','\''); 
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  Other(247,'|','\\'); Other(232,',',','); Other(237,'.','.'); Other(243,'?','/'); 
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  Other(189,'\n','\n'); Other(188,'\010','\010'); Other(190,'\t','\t'); 
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:    Text.SetChars (chars, Text.Cat(text,"\000")); 
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  Text.SetChars (allocSimple^, Text.Cat(text,"\000")); 
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:        Wr.PutText (wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  Wr.PutText (wr, " } def \n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  (* Wr.PutText (wr, " window \n"); *)
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:   " 0.0 0.0 moveto " & Fmt.Real(r1) & " " & Fmt.Real(r2) & " stroke \n" );
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DPS.m3:  Wr.PutText (wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/DisplayList.m3:  IF got = '\000' THEN RETURN; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/Err.m3:    Wr.PutChar (Stdio.stderr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  IF c = '\n' THEN RETURN line; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:    IF c = '\n' THEN RETURN line; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  j := Text.FindChar (t,'\\');
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:      IF  c = '\\' THEN
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  Wr.PutText (wr, "%!IPS-Adobe-1.0\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  Wr.PutText (wr, "%%Creator: Postscript Button in SlideX\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  Wr.PutText (wr, "%%Title: Client Slides\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  Wr.PutText (wr, "%%EndComments\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  Wr.PutText (wr, "%%EndProlog\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  Wr.PutText (wr, "\nshowpage\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  Wr.PutText (wr, "%%Trailer\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/OneSlideDLE.m3:  IF got = '\000' THEN RETURN; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/ScaledDLWindow.m3:  Wr.PutText (Stdio.stdout, "%!IPS-Adobe-1.0\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/ScaledDLWindow.m3:  Wr.PutText (Stdio.stdout, "%%Creator: Postscript Button in ScaledDLWindow\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/ScaledDLWindow.m3:  Wr.PutText (Stdio.stdout, "%%Title: Client Postscript Window\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/ScaledDLWindow.m3:  Wr.PutText (Stdio.stdout, "%%DocumentFonts: Times-Roman Times-Italic Times-Bold\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/ScaledDLWindow.m3:  Wr.PutText (Stdio.stdout, "%%EndComments\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/ScaledDLWindow.m3:  Wr.PutText (Stdio.stdout, "%%EndProlog\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/ScaledDLWindow.m3:  Wr.PutText (Stdio.stdout, "\nshowpage\n\n%%Trailer\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SimpleTextDLE.m3:    IF Text.GetChar(e.text,k)='\n' THEN lineCount := lineCount + 1; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SimpleTextDLE.m3:    IF c='\n' THEN line := line + 1;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideLineDLE.m3:    IF char = '\n' THEN 
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideLineDLE.m3:    IF char = '\010' THEN
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:  IF c = '\n' THEN RETURN line; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:    IF c = '\n' THEN RETURN line; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:  Wr.PutText (wr, "%!IPS-Adobe-1.0\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:  Wr.PutText (wr, "%%Creator: Postscript Button in SlideX\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:  Wr.PutText (wr, "%%Title: Client Slides\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:  Wr.PutText (wr, "%%EndComments\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:  Wr.PutText (wr, "%%EndProlog\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:    Wr.PutText (wr, "\nshowpage\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:  Wr.PutText (wr, "%%Trailer\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/SlideXDLE.m3:  IF got = '\000' THEN RETURN; END;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/TextLineDLE.m3:    IF char = '\n' THEN 
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/TextLineDLE.m3:     ELSIF char = '\010' THEN
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/wraps.m3:    | '\\' => wax := wax + 1;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/wraps.m3:    | '(' => s^[k] := '\\'; s^[k+1] := c; k := k + 2;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/wraps.m3:    | ')' => s^[k] := '\\'; s^[k+1] := c; k := k + 2;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/wraps.m3:    | '\\' => s^[k] := '\\'; s^[k+1] := c; k := k + 2;
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/wraps.m3:  s^[k] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/dps/src/wraps.m3:  s^[len] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/dps/test/MainTestX.m3:  Wr.PutText (Stdio.stdout, "Called SecondProc.\n");
/home/ftp/pub/m3/pkg/SRC-m3/dps/test/MainTestX.m3:   text := "This is two lines of text in\n" & "a -SimpleTextDLE- element.\n" );
/home/ftp/pub/m3/pkg/SRC-m3/dpsslides/src/DPSSlides.m3:  IF c = '\n' THEN RETURN line; END;
/home/ftp/pub/m3/pkg/SRC-m3/dpsslides/src/DPSSlides.m3:    IF c = '\n' THEN RETURN line; END;
/home/ftp/pub/m3/pkg/SRC-m3/dpsslides/src/DPSSlides.m3:       ELSE text := text & "\n" & line;
/home/ftp/pub/m3/pkg/SRC-m3/dpsslides/src/DPSSlides.m3:    Wr.PutText (Stdio.stderr, "usage: dpsslides [-xlate] [-warp] [-tall]\n");
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:      WHILE i.next(k, v) DO t := t & k & "\n" END
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:        Wr.PutChar(wr, '\"');
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:        Wr.PutChar(wr, '\"')
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:      PutTs("\n");
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:          PutTs(Rd.GetLine(rd) & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:        "EditLectern: $HOME not defined; assuming " & deferPath & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:        "EditLectern: OS error: " & Atom.ToText(code.head) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:      Wr.PutText(Stdio.stderr, "EditLectern: FormsVBT error: " & msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/editlectern/src/EditLectern.m3:      Wr.PutText(Stdio.stderr, "EditLectern: Rsrc.NotFound\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/Fisheye.m3:    Wr.PutText(Stdio.stderr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/GraphData.m3:      Wr.PutText(Stdio.stdout, "Read BendPoints --\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/GraphData.m3:         Wr.PutText(Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/GraphData.m3:         Wr.PutText(Stdio.stdout, "Read bend point\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/GraphData.m3:      Wr.PutText(Stdio.stdout,"\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/GraphData.m3:      Wr.PutText(Stdio.stdout,"\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/GraphVBT.m3:      Wr.PutText(Stdio.stderr, "Unrecogniged color\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/GraphVBT.m3:    Wr.PutText(Stdio.stdout, "No node left to extract: error\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/GraphVBT.m3:          Wr.PutText(Stdio.stdout,"\n");
/home/ftp/pub/m3/pkg/SRC-m3/fisheye/src/PrintUtil.m3:    Wr.PutText(Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEdit.m3:        RAISE FormsVBT.Error ("Usage: formsedit [-options] [file]\n")
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEdit.m3:        stderr, "Could not install vbt on display " & editorDisplay & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEdit.m3:      Wr.PutText (stderr, Fmt.F (" parameter\n%s\n", info.spec));
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEdit.m3:      Wr.PutText (stderr, "^\n")
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:                & "\"This space available for a small fee\"))";
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:        Debug (Fmt.F ("EdRoot was alerted. There are %s frames.\n",
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:    Debug (Fmt.F ("Frame %s is being alerted.\n", Fmt.Int (frame.number)));
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:               Fmt.F ("(MButton %%s (Text RightAlign \"%s:%s.%s\"))", name,
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:      EVAL FormsVBT.Insert (ed, "rescreenMenu", "\"Move Editor to\"", 0);
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:               Fmt.F ("(MButton %%s (Text RightAlign \"%s:%s.%s\"))", name,
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:      EVAL FormsVBT.Insert (ed, "rescreenMenu", "\"Move Result to\"", 0);
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:              Formatter.PutChar (fmt, '\'');
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:              & " : type  H: [lo, pref, hi] = size. V: [lo, pref, hi] = size.\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/formsedit/src/FormsEditVBT.m3:            Wr.PutChar (wr, '\n')
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:      Wr.PutChar (wr, '\n')
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:      RAISE Error ("The component named \"" & name
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:                     & "\" does not generate events.")
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:        Error ("There's no TextPort in the component named \"" &
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:          editorName & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:                sel := sel & "\n" & v.getValue (cells[c])
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:                stringRep := stringRep & "\n" & v.getValue(this)
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:      RAISE Error (Fmt.F ("The form named \"%s\" has no properties", name))
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:           demarcated by '\n'. Insert appropriately *)
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:            indx := Text.FindChar(t, '\n', 0); from := 0; ct := 0;
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:                indx := Text.FindChar(t, '\n', from);    
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:      RAISE Error (Fmt.F ("The form named \"%s\" has no properties", name))
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/FVRuntime.m3:      IO.Put ("\n")
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/Macro.m3:      FVSyntax, '\'', NEW (ReadMacro, read := ReadQuote, bqLevel := b));
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/Manpage.m3:              "\"" & manpagetext & "\" is not the name of a TextEdit form")
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/Manpage.m3:          Fmt.F ("Sorry, couldn't read the manpage in %s\nError: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/StubImages.m3:    Wr.PutText(wr, "\n" & Fmt.Int(contents.width) &
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/StubImages.m3:                   "\n" & Fmt.Int(contents.height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/formsvbt/src/StubImages.m3:    IF NOT contents.isBW THEN Wr.PutText(wr, "255\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:      Wr.PutText (wr, "\n------ ");
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:      Wr.PutText (wr, " ------\n");
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:    Wr.PutText (wr, Title1);  Wr.PutChar (wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:    Wr.PutText (wr, Title2);  Wr.PutChar (wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:    Wr.PutText (wr, Title3);  Wr.PutChar (wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:    Wr.PutText (wr, Title4);  Wr.PutChar (wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:      Wr.PutChar (wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:    Wr.PutText (wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:      IO.Put ("** unable to " & op & " score file \"" & scoreFile & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:      SetLabel (scoreRows [2], "** unable to " & op & " score file \""
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:                 & scoreFile & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/Main.m3:        IO.Put ("Unrecognized option: \"" & arg & "\", ignored\n");
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/ScoreFile.m3:    WHILE (cursor < len) AND (buf[cursor] # '\n') DO INC (cursor); END;
/home/ftp/pub/m3/pkg/SRC-m3/fours/src/ScoreFile.m3:      IF (buf[i] = '\n') THEN buf[i] := ' '; END;
/home/ftp/pub/m3/pkg/SRC-m3/http/src/App.m3:    Wr.PutText(wr, Fmt.F("%s: %s\n", LogStatusText[status], msg));
/home/ftp/pub/m3/pkg/SRC-m3/http/src/App.m3:  NonColon = SET OF CHAR{'\000'..'\377'} - SET OF CHAR{':'};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/App.m3:          log.log("No parameter for \"-config\" switch", LogStatus.Status);
/home/ftp/pub/m3/pkg/SRC-m3/http/src/AppBackup.m3:          Fmt.F("Problem reading backup file: %s (error: %s)\n", t.name,
/home/ftp/pub/m3/pkg/SRC-m3/http/src/AppBackup.m3:        t.log.log(Fmt.F("Problem reading backup file: %s\n", t.name),
/home/ftp/pub/m3/pkg/SRC-m3/http/src/AppBackup.m3:          Fmt.F("Problem writing backup file: %s (error: %s)\n", t.name,
/home/ftp/pub/m3/pkg/SRC-m3/http/src/AppBackup.m3:        t.log.log(Fmt.F("Problem writing backup file: %s\n", t.name),
/home/ftp/pub/m3/pkg/SRC-m3/http/src/AppBackup.m3:              Fmt.F("Problem reading backup file: %s (error: %s)\n",
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  Spaces = Lex.Blanks - SET OF CHAR {'\r', '\n'};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:          IF ch = '\n' OR (ch = '\r' AND UnsafeRd.FastGetChar(rd) = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:      IF NOT (ch = '\n' OR (ch = '\r' AND UnsafeRd.FastGetChar(rd) = '\n')) THEN
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:        Wr.PutText(wr, "\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:      Wr.PutText(wr, "\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:        Wr.PutText(wr, "\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:          log.log("No \"viaFieldValue\" for Proxy", App.LogStatus.Error);
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:        Wr.PutText(wr, "\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:      Wr.PutText(wr, "\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:      Wr.PutText(wr, "\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  NotColonOrSlash = SET OF CHAR{'\000'.. '\377'} - SET OF CHAR{':', '/'};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  NotSemiQuestionPoundOrBlanks = SET OF CHAR{'\000'.. '\377'}
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  NotQuestionPoundOrBlanks = SET OF CHAR{'\000'.. '\377'}
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  NotPoundOrBlanks = SET OF CHAR{'\000'.. '\377'} - SET OF CHAR{'#'}
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  NotBlanks = SET OF CHAR{'\000'.. '\377'} - Lex.Blanks;
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  UnescapedCharacters = SET OF CHAR{'\040'..'\176'} - 
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:                        SET OF CHAR{'{', '}', '|', '\\', '^', '~', '[', ']', '`'};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:      log.log(Fmt.F("unknown authorization scheme: %s\n", scheme),
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:             FieldName[ft], Fmt.F("Basic realm=\"%s\"", realm)));
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  ChNull = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:            Wr.PutText(wr, "\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:            Wr.PutText(wr, "\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:          Wr.PutText(wr, "0\r\n\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:      IF Rd.GetChar(rd) # '\r' OR Rd.GetChar(rd) # '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  NotSpaceOrComma = SET OF CHAR{'\000' .. '\377'} - SET OF CHAR{' ', ','};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTP.m3:  NotSpaceOrDash = SET OF CHAR{'\000' .. '\377'} - SET OF CHAR{' ', '-'};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:        self.msg := Fmt.F("%s%s\n", self.msg, msg);
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:          Wr.PutText(self.wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:  NonColon = SET OF CHAR{'\000'..'\377'} - SET OF CHAR{':'};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:  NonSlash = SET OF CHAR{'\000'..'\377'} - SET OF CHAR{'/'};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:  NonComma = SET OF CHAR{'\000'..'\377'} - SET OF CHAR{','};
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:            Wr.PutText(wr, "Content-type: text/plain\r\n\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:            Wr.PutText(wr, Fmt.F("The requested item: %s was not found\n",
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:      Wr.PutText(wr, Fmt.F("Content-type: %s\r\nContent-length: %s\r\n\r\n",
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:           log.log(Fmt.F("Failure writing \"%s\" server push frame", msg),
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPApp.m3:      log.log(Fmt.F("No \"Content-Length\" field in request: %s",
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControl.m3:      Wr.PutText(wr, Fmt.F("<FORM METHOD=POST Action=%s>\n", form.urlSet));
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:      log.log(Fmt.F("setting default \"FALSE\" value: %s", self.label),
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:              Fmt.F("%s <input type=checkbox name=%s value=true %s> %s %s<BR>\n", 
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:        Wr.PutText(wr, Fmt.F("%s %s: %s %s<BR>\n", self.leader, 
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:                Fmt.F("<input type=radio name=%s value=%s %s> %s \n", 
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:        Wr.PutText(wr, Fmt.F("%s %s: %s %s<BR>\n", self.leader, 
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:      Wr.PutText(wr, Fmt.F("<A HREF=\"%s\">%s</A><BR>\n", self.url, 
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:            "%s %s: <input type=text name=%s maxlength=1000 size=10 value=%s> %s<BR>\n",
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:            "%s %s <input type=text name=%s maxlength=1000 size=10 value=%s> %s<BR>\n",
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:            "%s %s <input type=text name=%s maxlength=1000 size=30 value=\"%s\"> %s<BR>\n",
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:        wr, Fmt.F("%s <A HREF=\"%s\">%s</A> %s<BR>\n", self.leader,
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:        wr, Fmt.F("%s <IMG ALT=\"%s\" SRC=\"%s\"> %s<BR>\n", self.leader,
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:                 Fmt.F("<TABLE BORDER><CAPTION>%s</CAPTION>\n", self.caption));
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPControlValue.m3:        Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/http/src/HTTPProxy.m3:        RAISE App.Error("Proxy error copying reply\n");
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:    Spaces  = SET OF CHAR{' ', '\t', '\n', '\r'};
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:          WHILE Rd.GetChar(rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:          WHILE Rd.GetChar(rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:          WHILE Rd.GetChar(rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:        WHILE Rd.GetChar(t.rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:            buffer[charsInBuf+LineLen] := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:            buffer[i] := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:        Wr.PutText(wr, "%!PS-Adobe-3.0 EPSF-3.0\n");
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:                       Fmt.Int(ROUND(FLOAT(height) * 72.0 / dpi)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:        Wr.PutText(wr, "%%EndComments\n");
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:                Wr.PutText(wr, Fmt.Int(maxVal) & " lgm\n");
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:              Wr.PutText(wr, "raw\n");
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:                IF pnmBinary THEN WHILE Rd.GetChar(t.rd) # '\n' DO END END;
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:        Wr.PutChar(wr, '\n'); (* blank line for flushing to *)
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:        Wr.PutText(wr, "showpage\n");
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:            IF c # ' ' AND c # '\n' THEN Rd.UnGetChar(rd); EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:      Wr.PutText(wr, Fmt.Int(width)); Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:      Wr.PutText(wr, Fmt.Int(height)); Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:        Wr.PutText(wr, Fmt.Int(maxVal)); Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/images/src/ImageRd.m3:        TRY WHILE Rd.GetChar(rd) # '\n' DO END; EXCEPT Rd.EndOfFile => END;
/home/ftp/pub/m3/pkg/SRC-m3/images/src/Images.m3:    Wr.PutText(wr, "\n" & Fmt.Int(contents.width) &
/home/ftp/pub/m3/pkg/SRC-m3/images/src/Images.m3:                   "\n" & Fmt.Int(contents.height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/images/src/Images.m3:    IF NOT contents.isBW THEN Wr.PutText(wr, "255\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/jvideo/src/POSIX/decunix/JVSink.m3:    Wr.PutText(Stdio.stderr, "Bpt: " & s & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/jvideo/src/POSIX/decunix/Jv.m3:        string, ADR(unaddr.sun_path[0]), strlen + 1 (* +1 for '\0' *));
/home/ftp/pub/m3/pkg/SRC-m3/jvideo/src/POSIX/JVConverter.m3:    IO.Put(msg & "\n", Stdio.stderr);
/home/ftp/pub/m3/pkg/SRC-m3/jvideo/src/POSIX/JVConverter.m3:      IF msg = NIL THEN Process.Crash("no message\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/jvideo/src/POSIX/JVConverter.m3:      IF reporter = NIL THEN Process.Crash(msg & "\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/jvideo/src/POSIX/generic/JVSink.m3:    Wr.PutText(Stdio.stderr, "Bpt: " & s & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:        Wr.PutText(Stdio.stderr, "Lectern: can't contact display server\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          lect.error("Error in \"-geometry\" or \"-display\" parameter");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:        msg := "\"" & lect.path & "\" has no image " &
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:      RETURN lect.confirm("Replace existing \"" & name & "\"?",
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          action := "Printing via \"" & command & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          action := action & "as \"" & fileName;
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          action := action & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:              Wr.PutText(wr, "%!PS-Adobe-3.0\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:              Wr.PutText(wr, "%%Creator: (Lectern " & Version & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:              Wr.PutText(wr, "%%Pages: " & Fmt.Int(toPage-fromPage+1) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:              Wr.PutText(wr, "%%PageOrder: Ascend\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:              Wr.PutText(wr, "%%EndComments\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                    Wr.PutText(wr, "%%EOF\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                  Wr.PutText(wr, "\n%%Page: " & Fmt.Int(page) & " " &
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                    Fmt.Int(page-fromPage+1) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                  Wr.PutText(wr, "/lecternSave save def\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                  Wr.PutText(wr, "/showpage { } def\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                  Fmt.Int(page) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                  Wr.PutText(wr, "%%EndDocument\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                  Wr.PutText(wr, "lecternSave restore\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                  Wr.PutText(wr, "showpage\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:              Wr.PutText(wr, "\n%%Trailer\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:              Wr.PutText(wr, "%%EOF\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          lect.error("Failure while writing to \"" & dest & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          lect.error("Couldn't open \"" & dest & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:      RAISE BadPath("Syntax error in \"" & absPath & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:      IF NOT lect.confirm("Discard changes to \"" & lect.path & "\"?",
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:        LOCK VBT.mu DO lect.error("\"" & path & "\" has no pages") END;
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:            lect.error("\"" & path & "\" has no image for its first page");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          lect.error("Can't open \"" & path & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          lect.error("Error reading \"" & path & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:          lect.error("\"" & path & "\" isn't a lectern file");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:      IF lect.confirm("Save changes to \"" & lect.path & "\"?",
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                             "Writing \"" & finalName & "\" ...");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:            Fmt.LongReal(Time.Now()-start, Fmt.Style.Fix, 3) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:            lect.error("The \"help\" window hasn't been implemented yet." &
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:                       " Type \"m\" to show the menus.");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Lectern.m3:             "Usage:\n    Lectern [-geometry WxH+X+Y] [-display name] file\n");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/LecternOCR.m3:              Wr.PutChar(wr, '\n'); Wr.PutText(wr, newW);
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Links.m3:        RAISE Error("You are already manipulating links in the viewer \"" &
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Links.m3:                    t.viewer & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Links.m3:                RAISE Error("Document's pathname must not start with \"" &
/home/ftp/pub/m3/pkg/SRC-m3/lectern/src/Links.m3:                            TempPath & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/lecternclient/src/POSIX/LecternClientPosix.m3:	  name & "\000");
/home/ftp/pub/m3/pkg/SRC-m3/lecternclient/src/POSIX/LecternServerPosix.m3:      addr.sun_path[n] := ORD('\000');
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/HTML.m3:  CONST Close = ARRAY BOOLEAN OF TEXT{">", ">\n"};
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/HTML.m3:      t := t & "\n<LI>" & ToText(elts[i]) & "\n"
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/HTML.m3:    IF compact THEN beg := "<DL COMPACT>\n" ELSE beg := "<DL>\n" END;
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/HTML.m3:      t := "<DT>" & ToText(terms[i]) & "<DD>" & ToText(defs[i]) & "\n"
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/HTML.m3:    RETURN New(beg & t & "</DL>\n")
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:        Wr.PutText(Stdio.stderr, pn & ": skipping bad entry\n")
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:          IF n > 0 AND Text.GetChar(t, n - 1) = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:	Stdio.stderr, pn & ": " & Atom.ToText(code.head) & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:		    "\"" &
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:		    "\""
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:		      url := "\"" & ".recent.html\""
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:    IF NOT quiet THEN Wr.PutText(Stdio.stderr, pn & "\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:        backURL := "\"../" & index & "\"",
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:            IF NOT quiet THEN Wr.PutText(Stdio.stderr, pnDoc & "\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:            Wr.PutText(Stdio.stderr, pnDoc & ": not a Lectern document\n")
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:      url := "\"" & Pathname.Join(Pathname.Last(pn), index, NIL) & "\""
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:    DirToHTML(pn, "\"../\"", d, h, pages);
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:                               Fmt.Int(pages) & " total pages\n")
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:        "usage: LecternToHTML [-quiet] path\n");
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:	cmd & ": file error " & Atom.ToText(code.head) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/lecterntohtml/src/LecternToHTML.m3:	cmd & ": reader error " & Atom.ToText(code.head) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/etimer/ETimer.m3:    Wr.PutText (wr, "\n seconds  #times  operation\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/etimer/ETimer.m3:        Wr.PutText (wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/etimer/ETimer.m3:    Wr.PutText (wr, "---------------------------------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/etimer/ETimer.m3:    Wr.PutText (wr, "          TOTAL\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/fmtlex/FmtBuf.m3:        Process.Crash("FmtBuf: Unimplemented rounding mode: \""
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/fmtlex/FmtBuf.m3:          & RoundingName[roundingMode] & "\".")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/formatter/Formatter.m3:    IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/formatter/Formatter.m3:    IF ch^ = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/formatter/Formatter.m3:    IF mode = Mode.Writing THEN Wr.PutChar(t.wr, '\n') END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/formatter/Formatter.m3:      IF mode = Mode.Writing THEN Wr.PutChar(t.wr, '\n') END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/POSIX/FSPosix.m3:    buf[cc] := '\000'; (* terminate the string *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/POSIX/FSPosix.m3:  CONST Dot = ORD('.'); Nul = ORD('\000');
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/POSIX/PathnamePosix.m3:CONST Legal = SET OF CHAR {'\001' .. '\177'} - SET OF CHAR {DirSepChar};
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/FSWin32.m3:    allFiles := p & "\\*";
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/FSWin32.m3:    IF n^ = '\000' THEN RETURN TRUE;   (* "." *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/FSWin32.m3:    RETURN n^ = '\000'                 (* ".." or "..x" *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/PathnameWin32.m3:  DirSepChar = '\\'; DirSepText = "\\"; 
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/PathnameWin32.m3:CONST Legal = SET OF CHAR {'\001' .. '\177'} - SET OF CHAR {DirSepChar, ':'};
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/PathnameWin32.m3:    EXCEPT Invalid => RETURN TRUE (* started with \ *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/PathnameWin32.m3:       \
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/PathnameWin32.m3:       \\server\share
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/PathnameWin32.m3:       drive:\
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/ProcessWin32.m3:    k := l; l := 0; result[l] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/ProcessWin32.m3:        chars[k + len] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/os/WIN32/ProcessWin32.m3:    chars[k] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/pickle/Pickle.m3:  Trailer2 = '\n';                     (* keeps editors happy *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/Common/RdImpl.m3:          WHILE (j # n) AND (rd.buff[j] # '\n') DO INC (j) END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/Common/RdImpl.m3:            str[i] := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/Common/RdImpl.m3:        WHILE (j # n) AND rd.buff[j] # '\n' DO INC(j) END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/Common/RdImpl.m3:          IF len >= 1 AND j # n  AND rd.buff[j-1] = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/Common/RdImpl.m3:            (* segment ends in \r\n *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/Common/RdImpl.m3:            (* segment ends in \n *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/Common/RdImpl.m3:                 Text.GetChar(txt, Text.Length(txt)-1) = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/POSIX/WrPosix.m3:  EOL := "\n"
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/rw/WIN32/WrWin32.m3:  EOL := "\r\n"
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:  SLASH         = '\\';
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:  SQUOTE        = '\'';
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:  BLANKS = SET OF CHAR {'\f', '\r', ' ', '\n', '\t', '\013'};
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:          REPEAT c := Rd.GetChar (rd) UNTIL c = '\n'
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:          REPEAT c := Rd.GetChar (rd) UNTIL c = '\n'
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:    RETURN ' ' <= ch AND ch <= '~' OR '\241' <= ch AND ch <= '\377'
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:  (* Note that for reading, \' is allowed but unnecessary in text literals,
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:     and \" is allowed but unnecessary in character literals. *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      RETURN '\n'
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      RETURN '\r'
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      RETURN '\t'
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      RETURN '\f'
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:    IF ch = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      Wr.PutText (wr, "\\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:    ELSIF ch = '\t' THEN
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      Wr.PutText (wr, "\\t")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:    ELSIF ch = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      Wr.PutText (wr, "\\r")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:    ELSIF ch = '\f' THEN
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      Wr.PutText (wr, "\\f")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      Wr.PutText (wr, "\\\\")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/sx/Sx.m3:      Wr.PutText (wr, Fmt.F ("\\%03s", Fmt.Int (ORD (ch), 8)))
/home/ftp/pub/m3/pkg/SRC-m3/libm3/src/uid/WIN32/MachineIDWin32.m3:        ncb.ncb_callname[1] := ORD('\000');
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    ELSE RAISE Error("Invalid style specifier \'" & Text.FromChar(c) & "\'")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    ELSE RAISE Error("Invalid alignment specifier \'"& Text.FromChar(c) &"\'")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    Wr.PutChar(stdout, '\"');
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    Wr.PutText(stdout, "\"\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    Wr.PutText(stdout, Prefix & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    Wr.PutText(stdout, Rd.GetText(rd, LAST(CARDINAL)) & "\"\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    Wr.PutText(stdout, " (floating-binary bits)\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    Wr.PutText(stdout, Prefix & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:    Wr.PutText(stdout, "\" (decimal approximation)\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:      Wr.PutText(stdout, line & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:                  RAISE Error("unrecognized rounding mode \""& modeName &"\"")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:                  Wr.PutText(stderr, "** FloatMode.SetRounding failed: \"");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:                  Wr.PutText(stderr, RoundingName[mode] & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:        Wr.PutChar(stdout, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:          Wr.PutText(stdout, "** Raised \"Lex.Error\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:          Wr.PutText(stdout, "** " & FlagName[flag] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:          Wr.PutText(stdout, "** " & "Premature end-of-line\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/fmt/src/FmtTest.m3:          Wr.PutText(stdout, "** " & "Error: " & msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/lex/src/LexTest.m3:    Wr.PutText(stdout, Prefix & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/lex/src/LexTest.m3:    Wr.PutText(stdout, Rd.GetText(rd, LAST(CARDINAL)) & "\"\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/lex/src/LexTest.m3:      Wr.PutText(stdout, line & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/lex/src/LexTest.m3:        Wr.PutChar(stdout, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/lex/src/LexTest.m3:          Wr.PutText(stdout, "** Raised \"Lex.Error\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/lex/src/LexTest.m3:          Wr.PutText(stdout, "** " & FlagName[ORD(flag)] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/lex/src/LexTest.m3:          Wr.PutText(stdout, "** " & "Error: " & msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/scan/src/ScanTest.m3:      Wr.PutText(stdout, line & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/scan/src/ScanTest.m3:          Wr.PutText(stdout, "** Raised \"Lex.Error\"");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/fmtlex/scan/src/ScanTest.m3:      Wr.PutText(stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:            ELSE Wr.PutText(w, "\"" & arcs.get(i) & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:    Wr.PutText(w, "Commands:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:    WHILE it.next(name, subr) DO Wr.PutText(w, "  " & name & "\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:  Wr.PutText(w, "OS test shell\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:          Print(w, Eval(e)); Wr.PutText(w, "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:        | Subr.Usage(msg) => Wr.PutText(w, "Usage: " & msg & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:            Wr.PutText(w, "OSError.E(" & Atom.ToText(code.head) & ")\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:        | Pathname.Invalid => Wr.PutText(w, "Pathname.Invalid\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:    | Sx.ReadError(t) => Wr.PutText(w, "Read error (" & t & ")\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/OSTest.m3:    | Rd.EndOfFile => Wr.PutText(w, "Unexpected EOF\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:    Wr.PutText(w, "actual=\"" & actual & "\" expected=\"" & expected & "\"\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:    IF a = NIL THEN Wr.PutText(w, "NIL!\n"); RETURN END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:        ELSE Wr.PutText(w, "\"" & a.head & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:    Wr.PutText(w, "]\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:      <* ASSERT NOT Valid("\000") *>
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:  (*  Wrv.PutText(w, "\n"); P(Compose(l), "/"); PArcs(Decompose(Compose(l))); *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:  (*  Wr.PutText(w, "\n"); P(Compose(l), ""); PArcs(Decompose(Compose(l))); *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:  (*  Wr.PutText(w, "\n"); P(Compose(l), "/a"); PArcs(Decompose(Compose(l))); *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:  (*  Wr.PutText(w, "\n"); P(Compose(l), "a"); PArcs(Decompose(Compose(l))); *)
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:  (*  Wr.PutText(w, "\n"); P(Compose(l), "/a//b"); PArcs(Decompose(Compose(l)));
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:  (*  Wr.PutText(w, "\n"); P(Compose(l), "a//b"); PArcs(Decompose(Compose(l)));
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/os/src/PathnameTests.m3:    <* ASSERT NOT Absolute("\\") *>
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("Available commands are:\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[0] & " [ <size> ]\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[1] & " [ <text> <text> ... ]\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[2] & " <text>\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[3] & " <elt>\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[4] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[5] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[6] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[7] & " <elt> <text>\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[8] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("  " & Cmds[9] & "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("By default, the initial priority queue is empty with\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("size zero; you can use \"init\" and \"fromElts\" to\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("initialize it differently.\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IO.Put("Syntax: " & Params.Get(0) & " [filename]\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:          IO.Put("Error: unable to open \"" & nm & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    IF fromFile THEN IO.Put(ln); IO.Put("\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:            IO.Put("; pq.sz = " & Fmt.Int(pq.sz) & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:              txt := "\"" & Lex.Scan(lnRd) & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:              IO.Put(txt & " => " & Fmt.Int(next) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:            txt := "\"" & IO.GetLine(lnRd) & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:            IO.Put(txt & " => " & Fmt.Int(next) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:            IO.Put(elt.priority & " => deleted\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:          IO.Put(Fmt.Int(pq.size()) & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:          IO.Put(pq.min().priority & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:            IO.Put(elt.priority & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:            txt := "\"" & IO.GetLine(lnRd) & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:            IO.Put(elt.priority & " => " & Fmt.Int(num) & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:                IO.Put("\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:          IO.Put("; pq.sz = " & Fmt.Int(pq.sz) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:          IO.Put("}\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:      TextPQ.Empty => IO.Put("Queue is empty\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    | TextPQ.NotInQueue => IO.Put("Not a queue element\n")   
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:    | Convert.Failed => IO.Put("Bad element spec\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/fromtty/src/FromTTY.m3:  IO.Put("\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/heapsort1/src/HeapSort.m3:  Wr.PutChar(Stdio.stdout, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/pqueue/heapsort2/src/HeapSort.m3:  Wr.PutChar(Stdio.stdout, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:            & "[-all -fixed -random -seed -integer -cardinal -subrange -real -longReal -perm]\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nDone.\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n----------------------------------------");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      stdout, "\nTesting: r := NEW(Random.Default).init().integer()\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, Fmt.Int(int) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nValue statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nBit statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, "\nBit " & Fmt.Int(j) & ": ");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n----------------------------------------");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\nTesting: r.integer()\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, Fmt.Int(int) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nValue statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nBit statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, "\nBit " & Fmt.Int(j) & ": ");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n----------------------------------------");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\nTesting: r.integer(0)\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, Fmt.Int(card) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nValue statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nBit statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, "\nBit " & Fmt.Int(j) & ": ");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n----------------------------------------");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\nTesting: r.integer(" & Fmt.Int(Lo) & ", "
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:                           & Fmt.Int(Hi) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, Fmt.Int(card) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nValue statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nBit statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, "\nBit " & Fmt.Int(j) & ": ");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n----------------------------------------");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\nTesting: r.real()\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, Fmt.Real(real) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nValue statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nBit statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, "\nBit " & Fmt.Int(j) & ":");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n----------------------------------------");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\nTesting: r.longReal()\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, Fmt.LongReal(long) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nValue statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\nBit statistics:\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, "\nBit " & Fmt.Int(j) & ": ");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n----------------------------------------");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      stdout, "\nTesting: RandomPerm.New(NIL), RandomPerm.Fill(NIL)\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, " )\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:        stdout, "\n\nElement statistics (" & Fmt.Int(NStat) & " trials");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:      Wr.PutText(stdout, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:        Wr.PutText(stdout, "\nElement " & Fmt.Int(j) & ": ");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:    Wr.PutText(stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/random/src/RandomTest.m3:               Fmt.Real(FLOAT(sum)/FLOAT(reps*seqSize)) & ".\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/rw/autotest/src/AutoTest.m3:  Wr.PutText(Stdio.stderr, "Bytes written: " & Fmt.Int(total) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/rw/copy/src/Pump.m3:                                       6, Fmt.Style.Sci) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/rw/pump/src/Pump.m3:                                       6, Fmt.Style.Sci) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/rw/pumprd/src/Pump.m3:        Wr.PutText(Stdio.stderr, "Ran out of input\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/rw/pumprd/src/Pump.m3:                                       6, Fmt.Style.Sci) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sortedtable/src/Test1.m3:    IO.Put("\nInteger  N = " & Fmt.Int(N) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sortedtable/src/Test1.m3:    IO.Put ("  done\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sortedtable/src/Test1.m3:    IO.Put("\nText     N = " & Fmt.Int(N) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sortedtable/src/Test1.m3:    IO.Put ("  done\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sortedtable/src/Time1.m3:    IO.Put (type & " ( N := " & Fmt.Int (N) & " )...\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sortedtable/src/Time1.m3:    IO.Put ("  "& Fmt.LongReal (stop - start, Fmt.Style.Fix, 2) &" seconds\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sortedtable/src/Time2.m3:    Wr.PutText (Stdio.stdout, ".\n")
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:        Fmt.F("** ERROR ** sqrt(%s)=%s, error=%s ulps\n\n", FmtReal(x),
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:                 Fmt.F("   sqrt(%s)=%s\n", ToBinary(FLOAT(x, LONGREAL)),
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:        Stdio.stderr, Fmt.F("x=%s, Math.sqrt(x)=%s, RealSqrt.Sqrt(x)=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:            "** flag ERROR ** x=%s, RealSqrt.Sqrt(x)=%s, Flag.Inexact=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:                   Fmt.F("   sqrt(%s)=%s\n", ToBinary(FLOAT(x, LONGREAL)),
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    IF print THEN Wr.PutText(Stdio.stderr, "\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:                 Fmt.F("** ERROR ** sqrt(%s)=%s, error=%s\n", FmtLong(x),
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:        Stdio.stderr, Fmt.F("   sqrt(%s)=%s\n", ToBinary(x), ToBinary(y)));
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:        Stdio.stderr, Fmt.F("x=%s, Math.sqrt(x)=%s, LongSqrt.Sqrt(x)=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:            "** flag ERROR ** x=%s, LongSqrt.Sqrt(x)=%s, Flag.Inexact=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:                   Fmt.F("   sqrt(%s)=%s\n", ToBinary(x), ToBinary(y)));
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    IF print THEN Wr.PutText(Stdio.stderr, "\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:      Wr.PutText(Stdio.stderr, "\n  Help! ABC test failed!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:      Wr.PutText(Stdio.stderr, "\n  Help! LongABC test failed!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "testing hard to round cases\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "  single\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "  double\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "testing random cases\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "  single\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "  double\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:      Stdio.stderr, "testing preturbations of regularly spaced args\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "  single\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "  double\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:    Wr.PutText(Stdio.stderr, "Done testing.\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:      Wr.PutText(Stdio.stderr, "ROUND-TO-NEAREST MODE\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:      Wr.PutText(Stdio.stderr, "\nROUND-TO-PLUS-INF MODE\n");
/home/ftp/pub/m3/pkg/SRC-m3/libm3/tests/sqrt/src/SqrtTst.m3:      Wr.PutText(Stdio.stderr, "\nROUND-TO-MINUS-INF MODE\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/M3Path.m3:  Null      = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/M3Path.m3:  BackSlash = '\\';
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/M3Path.m3:  DirSepText = ARRAY OSKind OF TEXT { "/",  "/",  "\\",  "\\"};
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:    IF (NOT ok) THEN Msg.UsageError ("unrecognized option \'", arg, "\'") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Msg.UsageError ("missing argument to \'", arg, "\' option");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Msg.FatalError (NIL, "improperly formatted argument: \"", value, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Msg.FatalError (NIL, "improperly formatted argument: \"", value, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:          Msg.FatalError (args, "unsupported file type \"", dir, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      THEN Msg.Out ("\"", file, "\", line ", Fmt.Int (line), ": ", msg,Wr.EOL);
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:          IF source[i] = '\\' THEN res[i] := '/' ELSE res[i] := source[i] END;
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Msg.Explain ("compilation failed => not building program \"",pgm_name,"\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:            Msg.Explain ("new \"",f.object,"\" -> linking ",pgm_file);
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:          Msg.Explain ("new \"",f.library,"\" -> linking ",pgm_file);
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Msg.Explain ("compilation failed => not building program \"",pgm_name,"\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Wr.PutText (wr, "boot_c (\"_m3main\")");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:        Wr.PutText (wr, "boot_import (\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:        Wr.PutText (wr, "\")");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Wr.PutText (wr, "boot_prog (\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Wr.PutText (wr, "\")");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:    Wr.PutText (wr, " (\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:    Wr.PutText (wr, "\")");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Msg.Explain ("compilation failed => not building library \"",
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:                   lib_name, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:          Msg.Explain ("new \"", f.object, "\" -> archiving ", lib);
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Msg.Explain ("compilation failed => not building library \"",
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:                   lib_name,"\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Wr.PutText (wr, "boot_lib (\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Wr.PutText (wr, "\")");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Main.m3:      Msg.Verbose ("reading \"", info, "\": ", Fmt.Int(stop-start), " seconds");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Unit.m3:      (* Msg.Debug ("  Rd.GetLine -> \"", unit, "\"", Wr.EOL); *)
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Utils.m3:      Msg.FatalError (args, "Process.Create(\""& program &"\") failed");
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/Utils.m3:      Msg.FatalError (NIL, "program \"", program, "\" failed, exit status = ",
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/WebFile.m3:      WHILE (cursor < len) AND (txt[cursor] # '\n') DO INC (cursor) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3/src/WebFile.m3:    Msg.Error (NIL, "web info file \"" & InfoFile & "\" is damaged: ", msg);
/home/ftp/pub/m3/pkg/SRC-m3/m3back/src/M3x86.m3:      u.wr.OutT ("\t\t\t\t\t-----FILE ");
/home/ftp/pub/m3/pkg/SRC-m3/m3back/src/M3x86.m3:      u.wr.OutT ("\t\t\t\t\t-----LINE");
/home/ftp/pub/m3/pkg/SRC-m3/m3back/src/M3x86.m3:    Cmt (u, "\n", i);
/home/ftp/pub/m3/pkg/SRC-m3/m3back/src/M3x86.m3:      IF (width = -1) THEN u.wr.OutT ("\t# "); width := 0; END;
/home/ftp/pub/m3/pkg/SRC-m3/m3back/src/M3x86.m3:      IF (ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3back/src/Wrx86.m3:    OutC (t, '\t');
/home/ftp/pub/m3/pkg/SRC-m3/m3back/src/Wrx86.m3:        OutC (t, '\\');
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:  StartPage  = "<HTML>\n<HEAD>\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:  Body       = "<BODY BGCOLOR=\"#ffffff\" VLINK=\"#006633\">\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:  EndTitle   = "</TITLE>\n</HEAD>\n" & Body;
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:  IsIndex    = "<ISINDEX>\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:  EndPage    = "</BODY>\n</HTML>\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    class     : CHAR     := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H2>Modula-3 browser of ", package_root, "</H2><P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "\n<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<LI><A HREF=\"", prefix, "/G\">programs</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<LI><A HREF=\"", prefix, "/0\">libraries</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<LI><A HREF=\"", prefix, "/1\">interfaces</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<LI><A HREF=\"", prefix, "/2\">implementations</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<LI><A HREF=\"", prefix, "/K\">types</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "</UL>\n<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<HR>\nserver stats:\n<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "    server machine:   ", server_machine, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "    server started:   ", FmtTime.Long (start_time), "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "    last update:      ", FmtTime.Long (Time.Now ()), "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "    update interval:  ", update, " minutes\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "    queries answered: ", Fmt.Int (n_queries), "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "    packages scanned: ", Fmt.Int (db.packages.size()), "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        ErrLog.Msg ("problem writing \"", Title_page, "\"", ErrMsg (ec));
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        ErrLog.Msg ("interrupted while writing \"", Title_page, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        ErrLog.Msg ("problem writing \"", Title_page, "\"", ErrMsg (ec));
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      ErrLog.Msg ("unable to read \"", m3exports, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    WHILE (cur <= eof) AND (ch # '\n') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        WHILE (cur < eof) AND (ch # '\n') DO ch := buf[cur];  INC (cur);  END;
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        OR (ch = ' ') OR (ch = '\t') OR (ch = '"') OR (ch = '\r') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    WHILE (cur < len) AND (buf[cur] # '\n') DO INC (cur); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      WHILE (eol < len) AND (buf[eol] # '\n') AND (buf[eol] # '\r') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      WHILE (cur < len) AND ((buf[cur] = '\n') OR (buf[cur] = '\r')) DO
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      t := NEW (Type, uid := uid, class := '\000');
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      "$ 0\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "@**PREDEFINED**\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "BM3_BUILTIN\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?195c2a74 INTEGER\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?97e237e2 CARDINAL\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?1e59237d BOOLEAN\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?08402063 ADDRESS\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?56e16863 CHAR\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?48e16572 REAL\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?94fe32f6 LONGREAL\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?9ee024e3 EXTENDED\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?48ec756e NULL\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?1c1c45e6 REFANY\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "?00000000 VOID\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "V9d8fb489 00000000 0 0 0 4\n" (* ROOT = OBJECT END *)
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "E9d8fb489 ROOT\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "U898ea789 00000000 0 0 0 4\n" (* UNTRACED ROOT = UNTRACED OBJECT END *)
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "E898ea789 UNTRACED-ROOT\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "Y50f86574 1c1c45e6\n" (* TEXT <: REFANY *)
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "E50f86574 TEXT\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "Y1541f475 9d8fb489\n" (* MUTEX <: ROOT *)
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    & "E1541f475 MUTEX\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      RETURN "HTTP/1.0 400 request too short: " & req & "\r\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      RETURN "HTTP/1.0 400 unknown request: " & req & "\r\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Wx.PutText (wx, "HTTP/1.0 200 ok\r\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    IF (cmd # 'Z') THEN Wx.PutText (wx, "Content-type: text/html\n\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    | 'Z' =>  Wx.PutText (wx, "Content-type: application/edit\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:              Wx.PutText (wx, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    | '\n', '\r', '\t', ' ' => CreateTitlePage (wx, relative := TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      RETURN "HTTP/1.0 400 unknown request: GET /" & req & "\r\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      IF (ch # ' ') AND (ch # '\n') AND (ch # '\r') AND (ch # '\t') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      IF (ch = ' ') OR (ch = '?') OR (ch = '\n')
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        OR (ch = '\r') OR (ch = '\t') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      ELSIF (ch = ' ') OR (ch = '\n') OR (ch = '\r') OR (ch = '\t') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H2>", tag, " in ", package_root, "</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H2>", tag, " (", prefix, "...) </H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H2>", ClassTags[c], "</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, " (", req, "...)</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", ID.ToText (u.name), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", u.dir, SLASH, ID.ToText (u.name), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", dir, SLASH, name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *deleted* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", u.dir, SLASH, ID.ToText (u.name), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H4>", uname, " is contained in:</H4>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<LI><A HREF=\"/", LibCmd[u.set.is_pgm]);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, ID.ToText (u.set.name), "@", u.set.path, "\">");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</A>: <A HREF=\"/", cmd, uname, "@", u.dir);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "\">", u.dir, SLASH, uname);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "</UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H4>exported by:</H4>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "<LI><A HREF=\"/3", txt, "\">", txt, "</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>Exporters of ", name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:            IF CharMap.Substr(unitText, "<A NAME=\"" & procedure & "\">") THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:              Out(wx, "<H2>", matchingUnit.dir, SLASH, name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out(wx, "<H2>Implementation of ", procedure, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out(wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, name, " is imported by <A HREF=\"R", name, "\">");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, Fmt.Int (IntList.Length (ref)), " units</A><P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>Importers of ", name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>Importers of ", name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H3>Select an instance:</H3>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "<LI><A HREF=\"/", cmd, ID.ToText (u.name), "@", u.dir);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "\">", u.dir, "</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H3>Select an instance:</H3>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "<LI><A HREF=\"/", cmd, ID.ToText (u.name), "@", u.dir);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "#", h, "\">", u.dir, "</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<A HREF=\"/Z", file, "\">[edit file]</A>\n<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<HR>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", LibName (name, pgm), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", ID.ToText (us.name), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, LibName (name, pgm), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", LibName (name, pgm), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, LibName (name, pgm), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *deleted* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, LibName (ID.ToText (us.name), pgm), ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H3>Select an instance:</H3>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:          Out (wx, "<LI><A HREF=\"/", cmd, ID.ToText (us.name), "@", us.path);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:          Out (wx, "\">", us.path, "</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "<H3>", ClassTags[c], ":</H3>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "<H3>", ClassTags[c], ":</H3>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>Modula-3 Types </H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H2>Modula-3 Types (", prefix, "...)</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", name, ":</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H3>Select an instance:</H3>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "<LI><A HREF=\"/N", FmtUID(t.uid), "\">");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:          IF (tn # t.names) THEN Out (wx, ",\n "); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>Type &lt;", req, "&gt;:</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<H2>Subtype graph for ", name, ":</H2><P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "....\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<A HREF=\"/N", FmtUID (t.uid), "\">", name, "</A>");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, " in <A HREF=\"/3", home,"\">", home, "</A>");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "....\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "structure:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>Type &lt;", req, "&gt;:</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<STRONG> *unknown* </STRONG>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "structure:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, " in <A HREF=\"/3", home, "\">", home, "</A>:</H2><P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "<H2>", name, ":</H2><P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, ")<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "  <A HREF=\"/N", uid, "\">[condensed view]</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "  <A HREF=\"/O", uid, "\">[expanded view]</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "  <A HREF=\"/Q", uid, "\">[flat view]</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "  <A HREF=\"/P", uid, "\">[subtype graph]</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "aliases:\n<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "<A HREF=\"/3", ID.ToText(tn.home),"\">");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, ID.ToText(tn.home),"</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</UL>\n<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:                 fmt.putText ("BRANDED \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:                 fmt.putText ("\" ");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:                 fmt.putText ("BRANDED \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:                 fmt.putText ("\" ");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:          fmt.putMarkup ("(! bad char =\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:          fmt.putMarkup ("\" !)");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    WHILE (start < eof) AND (defn[start] # '\n') DO INC (start); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    fmt.putMarkup ("<A HREF=\"/N");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    fmt.putMarkup ("\">");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    fmt.putMarkup ("<A HREF=\"/N");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    fmt.putMarkup ("\">");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    	fmt.putMarkup("<A HREF=\"/S" & unit & ".i3." & proc & "#"
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    	       & proc & "\">" & t & "</A>");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      IF (ch = ' ') OR (ch = '\n') OR (ch = '\r') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    WHILE (cursor < eof) AND (buf[cursor] # '\r') AND (buf[cursor] # '\n') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:    Out (wx, "<PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:              Out (wx, "<A HREF=\"/", alt_cmd);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:              Out (wx, nm, "\">", nm, "...");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:              Out (wx, "<A HREF=\"/", cmd, nm, "\">", nm);
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:        Out (wx, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/Main.m3:      Out (wx, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/TCPServer.m3:                j := 0;  WHILE (j < len) AND (buf[j] # '\n') DO INC (j) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3browser/src/TCPServer.m3:                "HTTP/1.0 403 Service not available from outside, sorry\r\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("\nm3build: ", a, b, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("usage: m3build [options] [targets]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -b <dir>   build with template <dir> in directory <dir>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("               (default='", build_dir, "')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -d <dir>   start in directory <dir> (default='", start_dir,"')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -F <file>  prepend the quake code in <file>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -T <dir>   use templates in directory <dir>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("               (default='", default_template_dir, "')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -S         build in 'src' directory\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -q         quiet\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -v         verbose\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -help      print this messsage\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -version   print version\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  -<arg>     pass -<arg> to quake\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("  <target>   call quake with each <target>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    Out ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:        Out ("m3build: ", M3_VERSION, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:        path := path & "\n" & trials.get(i);
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:      IF NOT quiet THEN Out ("--- building in ", dir, " ---\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:      IF NOT quiet THEN Out ("mkdir ", dir, "\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:      IF NOT quiet THEN Out ("--- building in ", dir, " ---\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:        IF NOT quiet THEN Out ("m3build: ignoring ", local_overrides,"\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:        IF NOT quiet THEN Out ("m3build: missing ", local_overrides,"\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    IF (verbose) THEN Out (sym, " = ", val, "\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3build2/src/Main.m3:    IF (verbose) THEN Out ("EVAL (", file, ")\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:          Out (Params.Get(0), ": cannot read file: ", z.path, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "(* Generated by m3bundle; see its manpage. *)\n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "IMPORT Bundle;\n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "PROCEDURE Get(): Bundle.T;\n\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out ("INTERFACE ", module, ";\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out (Intf, "END ", module, ".\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "(* Generated by m3bundle; see its manpage. *)\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "IMPORT Bundle, BundleRep, Text;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "IMPORT Thread, Wr, TextWr;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "TYPE T = Bundle.T OBJECT OVERRIDES get := LookUp END;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "VAR bundle: T := NIL;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "PROCEDURE Get(): Bundle.T =\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "  BEGIN\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    IF (bundle = NIL) THEN bundle := NEW (T) END;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    RETURN bundle;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "  END Get;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "PROCEDURE LookUp (<*UNUSED*> self: T;  element: TEXT): TEXT = \n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "  BEGIN\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    FOR i := 0 TO LAST (Names)-1 DO\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "      IF Text.Equal (Names[i], element) THEN\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "        IF Elements[i] = NIL THEN Elements[i] := GetElt (i) END;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "        RETURN Elements[i];\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "      END;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    END;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    RETURN NIL;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "  END LookUp;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "PROCEDURE GetElt (n: INTEGER): TEXT =\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "  <*FATAL Thread.Alerted, Wr.Failure *>\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "  VAR wr := TextWr.New ();\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "  BEGIN\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    CASE n OF\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    ELSE (*skip*)\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    END;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "    RETURN TextWr.ToText (wr);\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "  END GetElt;\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:  "BEGIN\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out ("MODULE ", module, ";\n", Mod_0);
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out (Mod_7, module, ".\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:          Out ("    | ", Fmt.Int (i), " =>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:            Out ("        Wr.PutText (wr, ", BlockName (z.base, j), ");\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out ("CONST Names = ARRAY [0..", Fmt.Int (n_elts), "] OF TEXT {\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      IF (i > 0) THEN Out (",\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      Out ("  \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      Out ("\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    IF (n_elts > 0) THEN Out (",\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out ("  NIL\n};\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out (" ARRAY [0..", Fmt.Int (n_elts), "] OF TEXT {\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      IF (i > 0) THEN Out (",\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:          Out ("  \"\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    IF (n_elts > 0) THEN Out (",\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out ("  NIL\n};\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:        Out ("CONST ", BlockName (base, blocks), " = \n   \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:        Out (" & \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:        Out ("\";\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:        Out ("\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    IF (width > 0) THEN (* finish the last string *) Out ("\"") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    IF (bytes > 0) THEN (* finish the last block *)  Out (";\n\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    Out ("usage: ", Params.Get (0), " -name n [-element e path] ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    IF (ch = '\\') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      Wr.PutText (wr, "\\\\");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    ELSIF (ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      Wr.PutText (wr, "\\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    ELSIF (ch = '\'') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      Wr.PutText (wr, "\\\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:    ELSIF (ch = '\"') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      Wr.PutText (wr, "\\\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3bundle/src/m3bundle.m3:      Wr.PutChar (wr, '\\');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/convert/Convert.m3:   \0, so we have to copy the characters in a local array.  We also need
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/convert/Convert.m3:    tmp [nchars] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/WIN32/RTArgs.m3:  BSLASH = VAL (ORD ('\134'), Ctypes.char);
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/WIN32/RTArgs.m3:    is_blank [ORD ('\r')] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/WIN32/RTArgs.m3:    is_blank [ORD ('\n')] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/WIN32/RTArgs.m3:    is_blank [ORD ('\t')] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTAllocStats.m3:  CONST NUL = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTAllocStats.m3:      IF (cp^ = '/') OR (cp^ = '\134') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTCollector.m3:    PutText("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTCollector.m3:    PutText("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapDebug.m3:    Out ("Path to 'free' object:\n", "   Ref in root", v.root);
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapDebug.m3:    RTIO.PutText ("...\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapInfo.m3:    buf[16+n] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapMap.m3:        RTIO.PutText("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapMap.m3:        RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapMap.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapMap.m3:        RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("\nHEAP: ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" Mbytes\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:      PutText (" REFs, were truncated.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("\nModule globals:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" # objects   # bytes  unit\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" ---------  --------  -----------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:          PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("\nGlobal variable roots:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" # objects   # bytes         ref type                location\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" ---------  --------  ---------- -----------------   ------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:          PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("\nThread stacks (conservative page scan):\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" # objects   # bytes  thread  [stack bounds]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" ---------  --------  -------------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:          PutText ("]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("\nThread stack roots (optimistic):\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("\nThread stack roots (conservative page scan):\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" # objects   # bytes         ref type                location\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" ---------  --------  ---------- -----------------   ------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:          PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("\n-------------------------------------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("Thread stack dumps with references that reach\nat least:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" bytes under the optimistic scan or\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" bytes under the conservative scan.\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("-------------------------------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("]\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText (" stack    optimistic    conservative\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("offset  #objs # bytes  #objs # bytes  ref\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    PutText ("------  ----- -------  ----- -------  ------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:            PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:            PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:          PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTHeapStats.m3:    WHILE (p^ # '\000') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTIO.m3:    WHILE (p^ # '\000') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTMisc.m3:      RTIO.PutText ("\n***    file \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTMisc.m3:      RTIO.PutText ("\", line ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTMisc.m3:      RTIO.PutText   ("\n***    file \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTMisc.m3:      RTIO.PutText   ("\", line ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTMisc.m3:        RTIO.PutText ("\n***    pc = ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTMisc.m3:    RTIO.PutText ("\n\n***\n*** runtime error:\n***    ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTMisc.m3:    RTIO.PutText ("\n***\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTParams.m3:    RETURN (arg^ = '\000') OR (arg^ = '=');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTProcess.m3:      RTIO.PutText ("\n*** ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTProcess.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:            PutText    ("Two types have the same brand: \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:            PutText    ("\"\n***    ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:            PutText    ("\n***    ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    WHILE (cp^ # '\000') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText ("\n\n***\n*** ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText ("\n***");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    in ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    REVEAL _t");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    in ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    but, already = ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    REVEAL _t");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    in ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("super type undefined:\n***    child = ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    parent = _t");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("illegal cycle in super types:\n***    child  = ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:      PutText    ("\n***    parent = ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    REVEAL _t");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***           ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText    ("\n***    in ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:    PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:        PutType (t); PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:          PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:            PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTType.m3:            PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:        "Code   Count   TotalSize  AvgSize  Name\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:      & "---- --------- --------- --------- --------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:          RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:    RTIO.PutText ("     --------- ---------\n    ");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:    RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:    RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:      RTIO.PutText ("---- object types (full subtrees) ----\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:	  "Code   Count   TotalSize  AvgSize  Name\n"
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:	& "---- --------- --------- --------- --------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:	      RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:      RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:            RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:    IF (n_sites > 1) AND (window > 1) THEN RTIO.PutChar ('\n'); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/common/RTutils.m3:        RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTMisc.FatalError (NIL, 0, "Exception \"", nm, "\" not in RAISES list");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTMisc.FatalError (NIL, 0, "Unhandled exception \"", nm, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      'L','i','n','k','e','r','\000'};
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("------------------------- STACK DUMP ---------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("----PC----  ----SP----  \n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:        RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("----------------------------------------------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:    RTIO.PutText ("------------------ EXCEPTION HANDLER STACK ---------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:         RTIO.PutText (" ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_frame/RTException.m3:    RTIO.PutText ("----------------------------------------------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:            IF (s.outermost # '\000') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:          IF (s.end_of_list # '\000') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:            IF (s.outermost # '\000') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:          IF (s.end_of_list # '\000') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      RTMisc.FatalError (NIL, 0, "Exception \"", nm, "\" not in RAISES list");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      RTMisc.FatalError (NIL, 0, "Unhandled exception \"", nm, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      IF (s.end_of_list # '\000') THEN RETURN (above AND below) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      IF (s.end_of_list # '\000') THEN EXIT; END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:    RTIO.PutText ("------------------------- STACK DUMP ---------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:    RTIO.PutText ("----PC----  ----SP----  \n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:                RTIO.PutText (" ???\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:            RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:            IF (s.outermost # '\000') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:          IF (s.end_of_list # '\000') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:      RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/runtime/ex_stack/RTException.m3:    RTIO.PutText ("----------------------------------------------------------------\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/text/Text.m3:      t[n] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/text/Text.m3:        res [len] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/text/Text.m3:        new [1] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/text/Text.m3:        res [n] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/text/TextConv.m3:      charsOut^[0] := '\"';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/text/TextConv.m3:      charsOut^[len+1] := '\"';
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/text/TextConv.m3:      IF (len < 2) OR (charsIn^[0] # '\"') OR (charsIn^[len-1] # '\"')
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:    OutT (" which it already holds.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:      OutT (" is not locked.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:      OutT (".\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:    OutT ("'s stack overflowed its limits.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:    OutT ("*** Use Thread.IncDefaultStackSize to get bigger stacks.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:      OutT ("\n\n*****************************");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:      OutT ("**********************************\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:      OutT ("                A* waiting for\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:          OutT ("!!! NIL thread in ring !!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:      OutT ("**********************************\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/POSIX/ThreadPosix.m3:    OutT ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/WIN32/ThreadWin32.m3:RTIO.PutText ("]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/WIN32/ThreadWin32.m3:RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/thread/WIN32/ThreadWin32.m3:RTIO.PutText ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/time/WIN32/DateWin32.m3:        d.zone := "\"Unknown zone\"";
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/time/WIN32/DateWin32.m3:        IF char = '\000' THEN EXIT
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/unix/aix-3-2/Udir.m3:      IF name[i] = '\000' THEN EXIT ELSE INC(len) END
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/unix/aix-ps2-1-2/Udir.m3:      IF name[i] = '\000' THEN EXIT ELSE INC(len) END
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/NB30.m3:  ALL_TRANSPORTS := M3toC.TtoS("M\000\000\000");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:| #define IsRecognizedPartition( PartitionType ) (          \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|      ((PartitionType & PARTITION_NTFT) &&                 \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|       ((PartitionType & ~16_C0) == PARTITION_FAT_12)) ||  \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|      ((PartitionType & PARTITION_NTFT) &&                 \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|       ((PartitionType & ~16_C0) == PARTITION_FAT_16)) ||  \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|      ((PartitionType & PARTITION_NTFT) &&                 \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|       ((PartitionType & ~16_C0) == PARTITION_IFS))    ||  \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|      ((PartitionType & PARTITION_NTFT) &&                 \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|       ((PartitionType & ~16_C0) == PARTITION_HUGE))   ||  \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|      ((PartitionType & ~PARTITION_NTFT) == PARTITION_FAT_12) ||  \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|      ((PartitionType & ~PARTITION_NTFT) == PARTITION_FAT_16) ||  \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinIoctl.m3:|      ((PartitionType & ~PARTITION_NTFT) == PARTITION_IFS)    ||  \
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinNT.m3:  IMAGE_ARCHIVE_START            := TtoS("!<arch>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinNT.m3:  IMAGE_ARCHIVE_END              := TtoS("`\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/src/win32/WinNT.m3:  IMAGE_ARCHIVE_PAD              := TtoS("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/LongTest.m3:	  Wr.PutText (stderr, Fmt.F ("** no trap\n"));
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/LongTest.m3:	  Wr.PutText (stderr, Fmt.F ("** no trap\n"));
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/Main.m3:  Wr.PutText (Stdio.stderr, "---------------------------- REAL ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/Main.m3:  (*Wr.PutText (Stdio.stderr, "---------------------------- threads ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/Main.m3:  Wr.PutText (Stdio.stderr, "---------------------------- LONGREAL ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/RealTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/RealTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/RealTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/RealTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/RealTest.m3:      Wr.PutText (stderr, "   " & name & " test OK\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/RealTest.m3:                            & Fmt.Real (m) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/RealTest.m3:	  Wr.PutText (stderr, "** no trap\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/float/src/RealTest.m3:	  Wr.PutText (stderr, "** no trap\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/text/src/Test.m3:      IO.Put("*** Cat is broken\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/text/src/Test.m3:      IO.Put("*** Sub is broken\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/text/src/Test.m3:        IO.Put("*** SetChars is broken\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/text/src/Test.m3:        IO.Put("*** FromChars is broken\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3core/tests/text/src/Test.m3:  IO.Put(Fmt.Real(TimeIt()) & " microseconds per 10 char text.\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/AddExpr.m3:        ta := Expr.BadOperands ("\'+\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/AddExpr.m3:      IF Module.IsSafe () THEN Error.Msg ("unsafe \'+\'"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/AddExpr.m3:      ta := Expr.BadOperands ("\'+\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/ArrayExpr.m3:        Error.Warn (1, "\"..\" ignored in open array constructor");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/CompareExpr.m3:    (*LT*) OpDesc { -1, -1, "\'<\'" },
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/CompareExpr.m3:    (*LE*) OpDesc { -1,  0, "\'<=\'" },
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/CompareExpr.m3:    (*GT*) OpDesc {  1,  1, "\'>\'" },
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/CompareExpr.m3:    (*GE*) OpDesc {  1,  0, "\'>=\'" }
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/ConcatExpr.m3:      p.type := Expr.BadOperands ("\'&\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/ConsExpr.m3:      Error.Msg ("trailing \'..\' in constructor, ignored");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/DivideExpr.m3:      ta := Expr.BadOperands ("\'/\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/EqualExpr.m3:  OpName = ARRAY BOOLEAN OF TEXT { "\'#\'", "\'=\'" };
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/ExprParse.m3:        ELSE Error.Msg ("syntax error: expected \'keyword := value\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/ExprParse.m3:        ELSE Error.Msg ("syntax error: expected \'keyword := value\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/MultiplyExpr.m3:      ta := Expr.BadOperands ("\'*\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/NegateExpr.m3:      t := Expr.BadOperands ("unary \'-\'", t);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/PlusExpr.m3:      p.type := Expr.BadOperands ("unary \'+\'", t);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/QualifyExpr.m3:        Error.ID (p.name, "unknown qualification \'.\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/QualifyExpr.m3:      Error.ID (p.name, "doesn\'t name a method");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/RangeExpr.m3:    ELSE  Error.Msg ("incompatible types for \'..\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/SubtractExpr.m3:        ta := Expr.BadOperands ("\'-\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/SubtractExpr.m3:        ELSE ta := Expr.BadOperands ("\'-\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/SubtractExpr.m3:      ELSE  ta := Expr.BadOperands ("\'-\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/SubtractExpr.m3:      IF Module.IsSafe () THEN Error.Msg ("unsafe \'-\'") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/exprs/SubtractExpr.m3:      ta := Expr.BadOperands ("\'-\'", ta, tb);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Host.m3:      env.report_error (NIL, 0, "m3c: unknown option, \"" & t & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Host.m3:      IF (c = '/') OR (c = ' ') OR (c = '\\') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/M3String.m3:    IF (c < ' ') OR (c = '\"') OR (c = '\'') OR ('~' < c) OR (c = '\\') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/M3String.m3:      M3Buf.PutChar (wr, '\\');
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:  EOFChar   = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    WhiteSpace ['\n'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    WhiteSpace ['\t'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    WhiteSpace ['\r'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    WhiteSpace ['\f'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    CommentAlert ['\n'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      DoFail ("missing \'" & M3ID.ToText (Token.name [t]) & "\'", t);
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        IF (ch = '\n') THEN INC (offset);  INC (nLines)  END;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      | '\''     => ScanChar ();                               RETURN;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      | '\"'     => ScanText ();                               RETURN;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    IF (ch = '\'') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    ELSIF (ch = '\n') OR (ch = '\r') OR (ch = '\f') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    ELSIF (ch = '\\') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      IF    (ch = 'n')  THEN  val := ORD ('\n');   GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = 't')  THEN  val := ORD ('\t');   GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = 'r')  THEN  val := ORD ('\r');   GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = 'f')  THEN  val := ORD ('\f');   GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = '\\') THEN  val := ORD ('\\');   GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = '\'') THEN  val := ORD ('\'');   GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = '\"') THEN  val := ORD ('\"');   GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:    IF (ch # '\'')
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      IF (ch = '\"') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = '\n') OR (ch = '\r') OR (ch = '\f') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = '\\') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        IF    (ch = 'n') THEN  Stuff ('\n');  GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        ELSIF (ch = 't') THEN  Stuff ('\t');  GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        ELSIF (ch = 'r') THEN  Stuff ('\r');  GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        ELSIF (ch = 'f') THEN  Stuff ('\f');  GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        ELSIF (ch = '\\') THEN Stuff ('\\');  GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        ELSIF (ch = '\'') THEN Stuff ('\'');  GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        ELSIF (ch = '\"') THEN Stuff ('\"');  GetCh ();
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      IF (ch = '\n') THEN INC (offset);  INC (nLines);  END;
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        Error.Msg ("missing line number on LINE pragma; skipping to \'*>\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        THEN Error.Msg ("missing \'*>\' on LINE pragma");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        THEN Error.Msg ("missing \'*>\' on NOWARN pragma");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:        THEN Error.Msg ("missing \'*>\' on PRAGMA pragma");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/misc/Scanner.m3:      ELSIF (ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/stmts/AssertStmt.m3:      Scanner.Fail ("missing \'*>\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/stmts/EvalStmt.m3:      Error.Msg ("expression doesn\'t have a value");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/stmts/ForStmt.m3:        Error.Msg ("\'from\' and \'to\' expressions are incompatible");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/stmts/ForStmt.m3:      Error.Msg("\'from\' and \'to\' expressions must be compatible ordinals");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/stmts/ForStmt.m3:      Error.Msg ("\'by\' expression must be an integer");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/stmts/ForStmt.m3:      Error.Warn (1, "zero \'by\' value in FOR loop");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/stmts/Stmt.m3:        Error.Msg ("expected \";\", found " &
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/stmts/TryStmt.m3:        Error.Msg ("exception(s) don\'t have a return argument");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/types/NamedType.m3:        Error.QID (p.qid, "name isn\'t bound to a type");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/types/ProcType.m3:      Error.Msg ("default value must begin with \':=\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/values/Module.m3:    ELSE Fail ("missing \';\' or \'=\', assuming \';\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/values/Module.m3:      Error.Msg ("number of actuals doesn\'t match number of generic formals");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/values/Module.m3:      Error.ID (id, "Initial module name doesn\'t match final name");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/values/Procedure.m3:        Error.ID (id, "Initial name doesn\'t match final name");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/values/Procedure.m3:      Error.ID (id, "expecting \'=\' before procedure body");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/values/Procedure.m3:        Error.ID (id, "Initial name doesn\'t match final name");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/values/Revelation.m3:      ELSE Fail ("missing \'=\' or \'<:\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3front/src/values/Tipe.m3:          Fail ("missing \'=\' or \'<:\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxCheck.m3:    Err (s, "missing compiled interface \"", name, ".io\" imported by:  ");
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxCheck.m3:      Err (s, "missing \"Main\" module", Wr.EOL);
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  End_of_buffer = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    Match (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  VAR nm := GetID      (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    GetStamp (s, vs.stamp, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  VAR n_wishes            := GetInteger (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  VAR nm     := GetName (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  VAR nm   := GetName (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  VAR nm   := GetName (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  VAR vs   := GetVS (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    r.rhs    := GetTypeName (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  VAR type := GetTypeName (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:  VAR type := GetTypeName (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    obj.method_size   := GetInteger (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    opaque.super_type := GetTypeName (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    WHILE (ch # '\n') DO ch := GetC (s) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    IF (ch = '\r') THEN ch := GetC (s); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    IF (ch = '\r') THEN ch := GetC (s); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:      IF (ch = '\r') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:        IF (ch = '\r') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    UNTIL (c # '\r');   (* ignore all return characters *)
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    s.buf [s.buf_len + 2] := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    s.buf [s.buf_len + 4] := '\"';
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:      THEN RETURN "\'" & Text.FromChar (c) & "\'" ;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:      ELSE RETURN "\'\\" & Fmt.Pad (Fmt.Int (ORD (c), 8), 3, '0') & "\'" ;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    CmdMap ['\r'] := SkipBlank;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    CmdMap ['\t'] := SkipBlank;
/home/ftp/pub/m3/pkg/SRC-m3/m3linker/src/MxIn.m3:    CmdMap ['\n'] := SkipBlank;
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderAccess.m3:      Wr.PutText(Stdio.stderr, "Unknown relocation slipped past obj reader\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:    Wr.PutText(Stdio.stderr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:    IO.Put("(Type 'debug' to start windbg on the loader process)\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:        IO.Put("Failed to get crash context\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:      IO.Put("Unknown thread ID\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:      IO.Put("Unknown process ID\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:    IO.Put("Call stack backtrace:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:      M3Buf.PutChar(t.buffer, '\000');
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:          M3Buf.PutChar(t.buffer, '\000');
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderProcess.m3:          M3Buf.PutChar(t.buffer, '\000');
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderRd.m3:    Wr.PutText(Stdio.stderr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderRd.m3:        filename := Text.Cat("C:\\mstools\\lib\\", filename);
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderRd.m3:                    " (tried current directory and c:\\mstools\\lib)");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/WIN32/M3LoaderRd.m3:                          "!<arch>\n/               ") THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:    Wr.PutText(Stdio.stderr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:      IO.Put(" seconds\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:    IO.Put(" unresolved symbols:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:        IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:          IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:    Debug.Txt("\n****\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:      IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3Loader.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3LoaderDebug.m3:    IF debug THEN IO.Put("\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3LoaderObj.m3:    Wr.PutText(Stdio.stderr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/M3LoaderObj.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:    Wr.PutText(Stdio.stderr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:      Debug.Txt("Subsystem:console\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:      Debug.Txt("Subsystem:windows\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:      IO.Put("Unknown command: '" & head & "'\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:      IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:      IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:        error(args & " is not a directory, using \"" & cwd & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:        error("Can't find " & args & ", using \"" & cwd & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:    IO.Put("The process will start up with working directory:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:      IO.Put("Error reading .M3LINK, not starting process\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:    IO.Put("Starting process\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:    IO.Put("Attaching windbg to the loader process.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:    IO.Put("Choose 'Run/Go' from the windbg menu to restart the loader.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:    IO.Put("Quitting windbg will kill the loader.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3loader/src/Main.m3:  IO.Put("M3:TNG Loader Version 1.00\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/CMarkUp.m3:    Wx.PutText (wx, "<PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/CMarkUp.m3:    Wx.PutText (wx, "/n</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/ErrLog.m3:      Wr.PutChar (wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/ID.m3:  NullChar    = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/ID.m3:  CONST NUL = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  End_I3          = ".i3\">";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  End_IG          = ".ig\">";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  End_MG          = ".mg\">";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  End_Ref         = "\">";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  Start_Exporters := "<A HREF=\"/4";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  Start_Interface := "<A HREF=\"/3";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  Start_Exporter  := "<A HREF=\"/S";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  Start_Type      := "<A HREF=\"/L";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:  Start_Header    := "<A NAME=\"";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:    Start_Exporters := "<A HREF=\"" & prefix & "/4";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:    Start_Interface := "<A HREF=\"" & prefix & "/3";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:    Start_Exporter  := "<A HREF=\"" & prefix & "/S";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:    Start_Type      := "<A HREF=\"" & prefix & "/L";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/M3MarkUp.m3:    Start_Header    := "<A NAME=\"" & prefix & "";
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:  EOF = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:    OutT (s, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:        IF c = '\n' THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      IF empty THEN (*! OutT (s, "\\par\\medskip ");  !*) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:        OutT (s, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:        OutT (s, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:        | '\n' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:        | '<', '>', '&', '\"' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      IF (vspace > 0) THEN OutT (s, "\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      | '\"' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:            IF NOT afterDisplay THEN OutT (s, "<PRE>\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:            c := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      | '\n' => 
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:            OutT (s, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:            OutT (s, "<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:            OutT (s, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:              OutT (s, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      | '\134' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:            OutT (s, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:            OutT (s, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      startOfLine := (c = '\n') OR (startOfLine AND c = ' ')
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      |'\n' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:          CommitC (s);  OutC (s, '\n');  RETURN
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:            OutC (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      | '\134' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      | '\"'          => OutT (s, CodeEdge [in_code]); in_code := NOT in_code;
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      | '\134' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      | '\n' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:      OutT (s, "\\char'");
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/MarkUp.m3:    WHILE (c = ' ') OR (c = '\n') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/Wx.m3:    txt [LAST (txt^)] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/XFormat.m3:    IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/XFormat.m3:    IF ch^ = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/XFormat.m3:    IF mode = Mode.Writing THEN Wx.PutChar(t.wx, '\n') END;
/home/ftp/pub/m3/pkg/SRC-m3/m3markup/src/XFormat.m3:      IF mode = Mode.Writing THEN Wx.PutChar(t.wx, '\n') END;
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3Buf.m3:    txt [LAST (txt^)] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Rd.m3:  EOF = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Rd.m3:  CONST Quote = '"';   Escape = '\134';
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Rd.m3:      IF (s.ch = '\n') OR (s.ch = EOF) THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Rd.m3:      IF (s.ch = ' ') OR (s.ch = '\t') OR (s.ch = '\n') THEN EXIT; END;
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Rd.m3:    WHILE (s.ch = ' ') OR (s.ch = '\t') DO GetCh (s) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Rd.m3:    WHILE (s.ch = ' ') OR (s.ch = '\n') OR (s.ch = '\t') DO GetCh (s); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Rd.m3:    WHILE (s.ch # '\n') AND (s.ch # EOF) DO GetCh (s) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Rd.m3:    UNTIL (s.ch # '\r');
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:    OutC (u, '\t');
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:    OutC (u, '\t');
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:    IF (len < 8) THEN OutC (u, '\t'); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:        OutC (u, '\\');
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:    OutT (u, "\t\t\t\t\t-----FILE ");
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:    OutT (u, "\t\t\t\t\t-----LINE");
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:      IF (width = -1) THEN OutT (u, "\t# "); width := 0; END;
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:      IF (ch = '\r') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3CG_Wr.m3:      ELSIF (ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3File.m3:          IF (ch = ORD ('\r')) THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3File.m3:          ELSIF (ch = ORD ('\n')) THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/M3ID.m3:  NullChar    = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\r\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3middle/src/Target.m3:                 EOL                       := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "\t.386P"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_TEXT\tSEGMENT PARA USE32 PUBLIC 'CODE'"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_TEXT\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_DATA\tSEGMENT DWORD USE32 PUBLIC 'DATA'"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_DATA\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "CONST\tSEGMENT DWORD USE32 PUBLIC 'CONST'"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "CONST\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_BSS\tSEGMENT DWORD USE32 PUBLIC 'BSS'"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_BSS\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_TLS\tSEGMENT DWORD USE32 PUBLIC 'TLS'"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_TLS\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "$$SYMBOLS\tSEGMENT BYTE USE32 PUBLIC 'DEBSYM'"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "$$SYMBOLS\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "$$TYPES\tSEGMENT BYTE USE32 PUBLIC 'DEBTYP'"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "$$TYPES\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "FLAT\tGROUP _DATA, CONST, _BSS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "\tASSUME CS: FLAT, DS: FLAT, SS: FLAT"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:          M3Buf.PutText (s.buf, "EXTRN\t");
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:          M3Buf.PutText (s.buf, "PUBLIC\t");
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_DATA\tSEGMENT"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:          M3Buf.PutText (s.buf, "COMM\t");
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_DATA\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_BSS\tSEGMENT"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:          M3Buf.PutChar (s.buf, '\t');
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:          M3Buf.PutChar (s.buf, '\t');
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "_BSS\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:      M3Buf.PutText (s.buf, "\tSEGMENT"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:      M3Buf.PutText (s.buf, "\tENDS"); NL(s);
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "\tDD\t0");
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/MasmObjFile.m3:    M3Buf.PutText (s.buf, "\tDB\t0");
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:      IF (ch = '/') OR (ch = '\134') THEN last_slash := i; END;
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:          OutC (t, '\001');        (* #aux = 1 *)
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:          OutC (t, '\000');        (* #aux = 0 *)
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:        OutC (t, '\147');      (* storage class = file *)
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:          FOR i := stop TO start + SymTabSize - 1 DO OutC (t, '\000'); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:        OutC (t, '\003');      (* storage class = static *)
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:        OutC (t, '\001');      (* #aux = 1*)
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:        OutC (t, '\000');
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:      FOR i := len TO 7   DO OutC (t, '\000'); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3objfile/src/NTObjFile.m3:    IF (c = '/') THEN c := '\134'; END;
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QCompiler.m3:      RAISE Error ("unable to open \"" & path & "\" for reading");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QCompiler.m3:      Err (s, "\"proc\", \"func\", or a name expected after \"readonly\" or \"local\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QCompiler.m3:      Err (s, "\"end\" or \"else\" expected after \"if\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QCompiler.m3:        Err (s, "\"local\" and \"readonly\" not valid before a procedure call");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:            Err (t, "table does not contain entry for: \""
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:                      & M3ID.ToText (int) & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:      Wr.PutText (Stdio.stdout, " ******\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:           Wr.PutText (Stdio.stdout, ") \"");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:           Wr.PutText (Stdio.stdout, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:    Wr.PutText (Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:        Err (t, "unable to open \"" & nm & "\" for writing" & OSErr(ec));
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:          Err (t, "unable to close \"" & o.name & "\"" & OSErr(ec));
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:          Err (t, "unable to close \"" & o.name & "\": interrupted");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:        Err (t, "\"foreach\" not applied to an array or table");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:        Err (t, "unable to write on \"" & file & "\"" & OSErr (ec));
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:        Err (t, "unable to write on \"" & file & "\"" & OSErr (ec));
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:    	Err (t, "unable to copy \""& src &"\" to \""& dest &"\""& OSErr (ec));
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:      Err (t, "\"empty\" not applied to a string, table, or array");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:        IF (ch = '\134') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:        IF (ch = '\134') THEN M3Buf.PutChar (buf, ch); new_ch := TRUE; END;
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:      Err (t, Fmt.F ("invalid path (\"%s\") in normalize", unfixed));
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:      Err (t, Fmt.F ("invalid path (\"%s\") in normalize", prefix));
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:    M3Buf.PutText (buf, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:    M3Buf.PutText (buf, "\n--procedure--  -line-  -file---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QMachine.m3:    M3Buf.PutChar (buf, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:  EOFChar = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:    WhiteSpace ['\n'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:    WhiteSpace ['\t'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:    WhiteSpace ['\r'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:    WhiteSpace ['\f'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:    Wr.PutText (Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:          WHILE (t.char # '\n') AND (t.char # EOFChar) DO NextChar (t); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:      IF (t.char = '\n') THEN INC (t.curLine) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:      | '\\'    =>
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:        | '\n' => (* ignore quoted new-line in strings *)
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:        | '\\' => t.buffer[next] := '\\';  INC (next);     
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:        | 'n'  => t.buffer[next] := '\n';  INC (next);
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:        | 'r'  => t.buffer[next] := '\r';  INC (next);
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:        | 't'  => t.buffer[next] := '\t';  INC (next);
/home/ftp/pub/m3/pkg/SRC-m3/m3quake/src/QScanner.m3:        | 'f'  => t.buffer[next] := '\f';  INC (next);
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("\nm3ship: ", a, b, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("usage: m3ship [options]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -b <dir>   build with template <dir> in directory <dir>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("               (default='", build_dir, "')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -d <dir>   start in directory <dir> (default='", start_dir,"')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -F <file>  prepend the quake code in <file>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -T <dir>   use templates in directory <dir>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("               (default='", default_template_dir, "')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -S         build in 'src' directory\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -q         quiet\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -v         verbose\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -help      print this messsage\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -version   print version\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -<arg>     pass -<arg> to quake\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("  -k         ship partial\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    Out ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:        Out ("m3ship: ", M3_VERSION, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:        path := path & "\n" & trials.get(i);
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:      IF NOT quiet THEN Out ("--- shipping from ", dir, " ---\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:      IF NOT quiet THEN Out ("mkdir ", dir, "\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:      IF NOT quiet THEN Out ("--- shipping from ", dir, " ---\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    IF (verbose) THEN Out (sym, " = ", val, "\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3ship2/src/Main.m3:    IF (verbose) THEN Out ("EVAL (", file, ")\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3staloneback/src/Main.m3:    OSError.E => IO.Put ("m3cg: IO error\n", Stdio.stderr)
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/old/Test.m3:    Out ("\n\n", Fmt.Int (errors), " error(s) and ",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/old/Test.m3:    Wr.PutChar (Stdio.stderr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\t';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\r';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\f';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\"';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\'';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c044/Main.m3:c := '\012';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c0/c078/Main.m3:  foo: TEXT := "abc\100\101\102\120\200\300\377";
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c1/c130/BuffOWr.m3:    IF ch = '\n' AND self.cur # 0 THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/c1/c130/BuffOWr.m3:      IF a[i] = '\n' AND self.cur # 0 THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/Test.m3:    Out ("\n\n", Fmt.Int (errors), " error(s) and ",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/Test.m3:    Wr.PutChar (Stdio.stderr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p001/Main.m3:  Wr.PutText (Stdio.stdout, "Hello world!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:Wr.PutText (stdout, "\' and `");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:  Wr.PutText (stdout, "\' are equal.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:  Wr.PutText (stdout, "\' are not equal.\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:  Wr.PutText (stdout, "Cat of constant expressions does not work !\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:  Wr.PutText (stdout, "11\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:  Wr.PutText (stdout, "not 11\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:Wr.PutText (stdout, "--\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:    Wr.PutText (stdout, " = Hello\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:    Wr.PutText (stdout, " <> Hello\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p002/Main.m3:Wr.PutText (stdout, "\ndone.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p004/Main.m3:    RTIO.PutChar ('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p004/Main.m3:msg ("\n--- exit within a finally ----- 2");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p004/Main.m3:msg ("\n--------------");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p004/Main.m3:  msg ("after the try\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p004/Main.m3:msg ("\ndone\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p005/Main.m3:   Wr.PutText (Stdio.stdout, "Changing i to " & Fmt.Int (i) & "\n");  END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p005/Main.m3:Wr.PutText (Stdio.stdout, "i = " & Fmt.Int (i) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p005/Main.m3:Wr.PutText (Stdio.stdout, "i = " & Fmt.Int (i) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p006/Main.m3:			        Fmt.Int (com.val) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p006/Main.m3:    	  Wr.PutText (Stdio.stdout, Fmt.Int (self.me) & "> Done.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p006/Main.m3:Wr.PutText (Stdio.stdout, "R> val = " & Fmt.Int (com.val) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p006/Main.m3:Wr.PutText (Stdio.stdout, "R> val = " & Fmt.Int (com.val) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p007/Main.m3:        Int (self.id, 0, "#\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p007/Main.m3:          (*Txt ("\n");*) Int (com.count, 5, "####\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p007/Main.m3:        Txt ("\n"); Int (com.count, 5, ": ");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p007/Main.m3:Txt("\nDone.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p009/Main.m3:  msg ("---- Ord ----\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p009/Main.m3:  msg ("\n---- Val ----\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p009/Main.m3:  msg ("\n---- Number ----\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p009/Main.m3:msg ("\n---- First ----\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p009/Main.m3:  msg ("\n---- Last ----\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p011/Main.m3:PROCEDURE msg (t: Text.T) = BEGIN PutText (stdout, t & "\n"); END msg;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p011/Main.m3:msg ("--- Bitsize ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p011/Main.m3:msg ("\n--- Bytesize ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p011/Main.m3:msg ("\n--- Adrsize ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p011/Main.m3:msg ("\ndone.");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p017/Main.m3:    Wr.PutText (Stdio.stdout, "[" & t & "]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p019/Main.m3:    Wr.PutText (Stdio.stdout, "[" & t & "]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p023/Main.m3:                              " [" & Fmt.Int(shouldBe) & "]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p023/Main.m3:    Wr.PutText (Stdio.stdout, "[" & t & "]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p034/Main.m3:    msg (Fmt.Bool (r1#r2) & " [TRUE]\n"); 	check (r1 # r2); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p034/Main.m3:    msg (Fmt.Bool (w1 # w2) & " [TRUE]\n"); 	check (w1 # w2); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p034/Main.m3:    msg (Fmt.Bool (w1 # x1^) & " [TRUE]\n");    check (w1 # x1^); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p034/Main.m3:    msg (Fmt.Bool (w1 # x1^) & " [TRUE]\n");	check (w1 # x1^); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p034/Main.m3:    msg (Fmt.Bool (w1 # x1^) & " [TRUE]\n"); 	check (w1 # x1^);END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p034/Main.m3:    msg (Fmt.Bool (w1 # x1^) & " [TRUE]\n"); 	check (w1 # x1^);END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p034/Main.m3:    msg (Fmt.Bool (w1 # x1^) & " [FALSE]\n"); 	check (NOT (w1 # x1^)); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p034/Main.m3:    msg (Fmt.Bool (x # y) & " [TRUE]\n");	check (x # y); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "FAILED\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "  ToInt (\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\", base = ");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "**** previous conversion failed ****\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:        Wr.PutText (stdout, "**** previous conversion failed ****\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:        Wr.PutText (stdout, "**** previous conversion failed ****\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "FAILED\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "  ToUnsigned (\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\", base = ");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "**** previous conversion failed ****\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:        Wr.PutText (stdout, "**** previous conversion failed ****\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:        Wr.PutText (stdout, "**** previous conversion failed ****\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:    Wr.PutText (stdout, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.FromLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "   / " & Fmt.Int (used) &"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p040/Main.m3:      Wr.PutText (stdout, "Convert.ToLongFloat failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p048/Main.m3:  Wr.PutChar (Stdio.stdout, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p048/Main.m3:  IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p054/Main.m3:        Wr.PutText(Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p054/Main.m3:        Print.F2 ("CurrentTask = %U   State = %U\n", Identity, State);
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p054/Main.m3:        Wr.PutText (Stdio.stdout, "Bad task identity\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p054/Main.m3:    Wr.PutText (Stdio.stdout, "Bench mark starting\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p054/Main.m3:    Wr.PutText (Stdio.stdout, "Starting\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p054/Main.m3:    Wr.PutText (Stdio.stdout, "Finished\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p054/Main.m3:     "     HoldCount = " & Fmt.Int(HoldCount) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p054/Main.m3:    Wr.PutText (Stdio.stdout, "\nEnd of run\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p062/Main.m3:  Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p062/Main.m3:    PrintList(stdout, "List.Assoc(..., \"blah\")", Assoc(state, "blah"));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p062/Main.m3:    PrintList(stdout, "List.Assoc(..., \"Blag\")", Assoc(state, "Blag"));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p064/Main.m3:    Wr.PutText(Stdio.stdout,Fmt.Int(j)&"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p064/Main.m3:    BEGIN Wr.PutText(Stdio.stdout,Fmt.Int(i)&"\n") END pr;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p070/Main.m3:  Wr.PutText (Stdio.stderr, Fmt.Int (n) & " procedures\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p070/Main.m3:                 & Fmt.Int (xfp[1]) & "}\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p072/Main.m3:  FOR c := '\000' TO '\377' DO 
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p084/Main.m3:    Wr.PutText (Stdio.stdout, "f\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p084/Main.m3:    Wr.PutText (Stdio.stdout, "g\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p085/Main.m3:    Wr.PutText (Stdio.stdout, "Hello world!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p085/Main.m3:    Wr.PutText (Stdio.stdout, "Hello world!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p085/Main.m3:    Wr.PutText (Stdio.stdout, "Hello world!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p085/Main.m3:    Wr.PutText (Stdio.stdout, "Hello world!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p085/Main.m3:    Wr.PutText (Stdio.stdout, "Hello world!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p085/Main.m3:    Wr.PutText (Stdio.stdout, "Hello world!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p085/Main.m3:  Wr.PutText (Stdio.stdout, "Hello world!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p092/Main.m3:  Wr.PutText(Stdio.stdout, "Main:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p092/Main.m3:    Wr.PutText(Stdio.stdout, " " & Fmt.LongReal(y) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p092/foo.m3:  Wr.PutText(Stdio.stdout,"\nproc1\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p092/foo.m3:    Wr.PutText(Stdio.stdout," " & Fmt.LongReal(p[i][1]) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p092/foo.m3:  Wr.PutText(Stdio.stdout,"\nproc2\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p092/foo.m3:    Wr.PutText(Stdio.stdout," " & Fmt.LongReal(p[i][1]) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p093/Main.m3:  t := t & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p098/Main.m3:  Wr.PutText(stdout, "Proc1\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p098/Main.m3:  Wr.PutText(stdout, "Proc2\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p0/p098/Main.m3:  Wr.PutText(stdout, "Proc3\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p103/Main.m3:  Wr.PutText(stdout, Fmt.F("Text.Length(s1300) == %s [should be 1318]\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p103/Main.m3:  s1300 := s1300 & "That\'s all, folks!";
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p103/Main.m3:  Wr.PutText(stdout, Fmt.F("Text.Length(s1300) == %s [should be 1318]\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p103/Main.m3:  Wr.PutText(stdout, Fmt.F("Length after reading is %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p107/Main.m3:    Wr.PutText (Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p108/Main.m3:  Wr.PutText(stdout, "Proc1 (" & Fmt.Int (i) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p108/Main.m3:  Wr.PutText(stdout, "Proc2 (" & Fmt.Int (i) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p108/Main.m3:  Wr.PutText(stdout, "Proc3 (" & Fmt.Int (i) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p113/Main.m3:  Wr.PutText(Stdio.stdout, "\tFIRST(Real.T) = " & Fmt.Real(FIRST(Real.T)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p113/Main.m3:  Wr.PutText(Stdio.stdout, "\tLAST(Real.T) = " & Fmt.Real(LAST(Real.T)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p115/Main.m3:    Wr.PutText(Stdio.stdout, Fmt.F("%s %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/FloatTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/FloatTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/FloatTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/FloatTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/FloatTest.m3:      Wr.PutText (stderr, "   " & name & " test OK\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/FloatTest.m3:                            & Fmt.Real (m) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/FloatTest.m3:	  Wr.PutText (stderr, "** no trap\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/FloatTest.m3:	  Wr.PutText (stderr, "** no trap\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("   %s test OK\n", name));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/LongTest.m3:      Wr.PutText (stderr, Fmt.F ("** %s test not OK: %s should be %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/LongTest.m3:	  Wr.PutText (stderr, Fmt.F ("** no trap\n"));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/LongTest.m3:	  Wr.PutText (stderr, Fmt.F ("** no trap\n"));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/Main.m3:  Wr.PutText (Stdio.stderr, "---------------------------- REAL ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/Main.m3:  Wr.PutText (Stdio.stderr, "---------------------------- threads ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p116/Main.m3:  Wr.PutText (Stdio.stderr, "---------------------------- LONGREAL ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p118/Main.m3:    Wr.PutText(Stdio.stdout, txt & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p119/Main.m3:	Put(Fmt.Int(ORD(n)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p120/Main.m3:    Wr.PutText(Stdio.stdout, Fmt.Int(ORD(Enum.b)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p120/Main.m3:  | Excn(i) => Wr.PutText(Stdio.stdout, Fmt.Int(ORD(i)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p121/Main.m3:    Wr.PutText(Stdio.stdout, Fmt.F("%s\n", Fmt.Real(b)));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p121/Main.m3:    Wr.PutText(Stdio.stdout, Fmt.F("%s\n", Fmt.Real(c)));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "Hello world.\n" );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "Hello %% world.\n" );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "d = |%d|\n", 105 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "4d = |%4d|\n", 105 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "05d = |%05d|\n", 105 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-05d = |%-05d|\n", 105 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-5d = |%-5d|\n", 105 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "2d = |%2d|\n", 105 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "u = |%u|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "2u = |%2u|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "12u = |%12u|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-12u = |%-12u|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "012u = |%012u|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-012u = |%-012u|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "o = |%o|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "2o = |%2o|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "12o = |%12o|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-12o = |%-12o|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "012o = |%012o|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-012o = |%-012o|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-12#o = |%-12#o|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "x = |%x|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "2x = |%2x|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "12x = |%12x|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-12x = |%-12x|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "012x = |%012x|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-012x = |%-012x|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-12#x = |%-12#x|\n", 4294967295 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "c = |%c|\n", '@' );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "4c = |%4c|\n", '@' );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-4c = |%-4c|\n", '@' );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    s[ 4 ] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "s = |%s|\n", s );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "2s = |%2s|\n", s );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "6s = |%6s|\n", s );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-6s = |%-6s|\n", s );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "6.10s = |%6.10s|\n", s );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "6.3s = |%6.3s|\n", s );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-6.3s = |%-6.3s|\n", s );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "t = |%t|\n", t );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "2t = |%2t|\n", t );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "6t = |%6t|\n", t );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-6t = |%-6t|\n", t );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "6.10t = |%6.10t|\n", t );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "6.3t = |%6.3t|\n", t );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-6.3t = |%-6.3t|\n", t );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "6.3t = |%6.3t|\n", t );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-*.*t = |%-*.*t|\n", 6, 3, t ); 
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "lf = |%lf|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "3lf = |%3lf|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25lf = |%25lf|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-25lf = |%-25lf|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "025lf = |%025lf|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.5lf = |%25.5lf|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.10lf = |%25.10lf|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "f = |%f|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "3f = |%3f|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25f = |%25f|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-25f = |%-25f|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "025f = |%025f|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.5f = |%25.5f|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.10f = |%25.10f|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "le = |%le|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "3le = |%3le|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25le = |%25le|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-25le = |%-25le|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "025le = |%025le|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.5le = |%25.5le|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.10le = |%25.10le|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "e = |%e|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "3e = |%3e|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25e = |%25e|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-25e = |%-25e|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "025e = |%025e|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.5e = |%25.5e|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.10e = |%25.10e|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "lg = |%lg|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "3lg = |%3lg|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25lg = |%25lg|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-25lg = |%-25lg|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "025lg = |%025lg|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.5lg = |%25.5lg|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.10lg = |%25.10lg|\n", 3.123456789876543D0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "g = |%g|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "3g = |%3g|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25g = |%25g|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-25g = |%-25g|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "025g = |%025g|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.5g = |%25.5g|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.10g = |%25.10g|\n", 3.123456789876543 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "lg = |%lg|\n", 3.123456789876D-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "3lg = |%3lg|\n", 3.123456789876D-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25lg = |%25lg|\n", 3.123456789876D-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-25lg = |%-25lg|\n", 3.123456789876D-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "025lg = |%025lg|\n", 3.123456789876D-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.5lg = |%25.5lg|\n", 3.123456789876D-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.10lg = |%25.10lg|\n", 3.123456789876D-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "g = |%g|\n", 3.123456789876E-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "3g = |%3g|\n", 3.123456789876E-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25g = |%25g|\n", 3.123456789876E-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "-25g = |%-25g|\n", 3.123456789876E-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "025g = |%025g|\n", 3.123456789876E-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.5g = |%25.5g|\n", 3.123456789876E-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "25.10g = |%25.10g|\n", 3.123456789876E-15 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "#g = |%#g|\n", 2.0 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    PRINTF( wr, "#g = |%#g|\n", 2.1 );
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:    ASSERT( Text.Equal( text, "\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:Hello world.\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:Hello % world.\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:d = |105|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:4d = | 105|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:05d = |00105|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-05d = |10500|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-5d = |105  |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:2d = |105|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:u = |4294967295|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:2u = |4294967295|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:12u = |  4294967295|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-12u = |4294967295  |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:012u = |004294967295|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-012u = |429496729500|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:o = |37777777777|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:2o = |37777777777|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:12o = | 37777777777|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-12o = |37777777777 |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:012o = |037777777777|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-012o = |377777777770|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-12#o = |037777777777|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:x = |ffffffff|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:2x = |ffffffff|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:12x = |    ffffffff|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-12x = |ffffffff    |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:012x = |0000ffffffff|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-012x = |ffffffff0000|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-12#x = |0xffffffff  |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:c = |@|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:4c = |   @|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-4c = |@   |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:s = |abcd|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:2s = |abcd|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:6s = |  abcd|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-6s = |abcd  |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:6.10s = |  abcd|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:6.3s = |   abc|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-6.3s = |abc   |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:t = |abcd|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:2t = |abcd|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:6t = |  abcd|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-6t = |abcd  |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:6.10t = |  abcd|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:6.3t = |   abc|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-6.3t = |abc   |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:6.3t = |   abc|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-*.*t = |abc   |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:lf = |3.123457|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:3lf = |3.123457|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25lf = |                 3.123457|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-25lf = |3.123457                 |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:025lf = |000000000000000003.123457|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.5lf = |                  3.12346|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.10lf = |             3.1234567899|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:f = |3.123457|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:3f = |3.123457|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25f = |                 3.123457|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-25f = |3.123457                 |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:025f = |000000000000000003.123457|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.5f = |                  3.12346|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.10f = |             3.1234567165|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:le = |3.123457e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:3le = |3.123457e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25le = |             3.123457e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-25le = |3.123457e+00             |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:025le = |00000000000003.123457e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.5le = |              3.12346e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.10le = |         3.1234567899e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:e = |3.123457e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:3e = |3.123457e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25e = |             3.123457e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-25e = |3.123457e+00             |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:025e = |00000000000003.123457e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.5e = |              3.12346e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.10e = |         3.1234567165e+00|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:lg = |3.12345|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:3lg = |3.12345|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25lg = |                  3.12345|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-25lg = |3.12345                  |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:025lg = |0000000000000000003.12345|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.5lg = |                   3.1234|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.10lg = |              3.123456789|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:g = |3.12345|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:3g = |3.12345|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25g = |                  3.12345|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-25g = |3.12345                  |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:025g = |0000000000000000003.12345|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.5g = |                   3.1234|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.10g = |              3.123456716|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:lg = |3.123457e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:3lg = |3.123457e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25lg = |             3.123457e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-25lg = |3.123457e-15             |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:025lg = |00000000000003.123457e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.5lg = |              3.12346e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.10lg = |         3.1234567899e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:g = |3.123457e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:3g = |3.123457e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25g = |             3.123457e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:-25g = |3.123457e-15             |\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:025g = |00000000000003.123457e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.5g = |              3.12346e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:25.10g = |         3.1234568629e-15|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:#g = |2.00000|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p147/Main.m3:#g = |2.10000|\n\
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p151/Main.m3:      x1[ i ] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p152/Main.m3:    rd := TextRd.New (" 31 \n 42 53 64 Hello 75");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p153/Main.m3:      SCANF (TextRd.New ("   \n 33"), "%d%d", i1, i2);
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p154/Main.m3:    rd := TextRd.New(*RdV.FromText*) (" 31 \n 42 53 64 Hello 75");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p166/Main.m3:    FOR i := j     TO j + n - 1 DO Test.checkC (a[ i ], '\000' ) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p169/Main.m3:  seq = 0, class = 0 '\000'}
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p172/Main.m3:X-Face: "8f"c;6Z}TbIq0Io35sH8vqkT(rdm-ofN~D%vb&ABJ;{Ar/{aIx?\}{Z!fa!-Ray\I~WzB3 6I,*eA_3Z|Qzk&RBEs:}Y`&f[L)V$aeg9%@8sLZo;'4?y"tkKd4x$BydZ16RA%PZMk`bavMk(/z#gD <X(:[i<b9O~g[Hku0jW3vQz8vQwq47G,+7Q,>U@{"
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p172/Main.m3:  Wr.PutText(Stdio.stdout, Fmt.F("%s %s\n", Fmt.Real(z), Fmt.Real(z1)));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p173/Main.m3:  Wr.PutText(Stdio.stdout, Fmt.F("%s %s\n", Fmt.LongReal(z), Fmt.LongReal(z1)));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p177/Main.m3:    Put(Fmt.F("%s %s\n", Fmt.Int(valIn), Fmt.Int(valOut)));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p177/Main.m3:    Put(Fmt.F("%s %s\n", Fmt.Int(valIn), Fmt.Int(valOut)));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p178/Main.m3:    Wr.PutText (Stdio.stderr, ".\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p179/Main.m3:    Wr.PutText (Stdio.stderr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p1/p182/Main.m3:  Wr.PutText (Stdio.stdout, "Hello World\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/p2/p203/Main.m3:    Wr.PutChar (Stdio.stderr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/r0/r002/Main.m3:	    Fmt.Int (Fib (LAST (INTEGER))) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x003/Main.m3:      | Rd.EndOfFile => msg ("you don\'t want to speak, eh ?");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x003/Main.m3:      Wr.PutText (Stdio.stdout, "\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x004/Main.m3:  | Rd.EndOfFile => msg ("you don\'t want to speak, eh ?"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x006/Main.m3:      Wr.PutText(Stdio.stderr, Fmt.F("  *%s*\n", txt));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x006/Main.m3:      Rd.Failure => Wr.PutText(Stdio.stderr, "Can\'t open sound file\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x006/Main.m3:      Wr.Failure => Wr.PutText(Stdio.stderr, "Can\'t open /dev/audio\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x006/Main.m3:      Wr.PutText(Stdio.stderr, "About to PutString\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x006/Main.m3:      Wr.PutText(Stdio.stderr, "Did PutString\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:  10 _Bug26__CommandLoop(_cl = 0x1002602c = "P\240^A^P|") ["Bug26.m3":88, 0x401d
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:    | Rd.EndOfFile => Wr.PutText(stderr,"EOF ignored; alert me to quit.\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:                   "listener thread caught Thread.Alerted; about to return NIL\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:    ELSE Wr.PutText(stderr, "this can\'t happen --- bad exception in listener\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:  Wr.PutText(stderr, "called Thread.Alert(lthread);\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:      Wr.PutText(stdout,Fmt.F("You said `%s\'; say `quit\' to quit.\n", e));
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:  Wr.PutText(stderr, "about to Call RTMisc.Exit(0)\n"); Wr.Flush(stderr);
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:  Wr.PutText(stderr, "this can\'t happen -- command loop returned\n"); Wr.Flush
/home/ftp/pub/m3/pkg/SRC-m3/m3tests/src/x0/x007/Main.m3:  Wr.PutText(stderr, "Main program joined; will exit\n"); Wr.Flush(stderr);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/astdisplay/StdFormat.m3:  WSV = ARRAY WS OF TEXT {" ", ", ", "\n", ";\n", "; "};
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/astdisplay/StdFormat.m3:    D(h, n, " " & M3CId.ToText(n.as_id.lx_symrep) & "." & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CFETool.m3:      Err.Print(Fmt.F("%s \'%s\': ", M3CUnit.TypeName(unitType), name),
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CFETool.m3:      Err.Print(Fmt.F("compiling %s \'%s\'", M3CUnit.TypeName(unitType),
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CFETool.m3:      Err.Print(Fmt.F("reading AST for %s \'%s\'", M3CUnit.TypeName(unitType), 
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CGo.m3:            "illegal import of GENERIC interface \'%s\'", used_id.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CGo.m3:            "import cycle between interfaces \'%s\' and \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CGo.m3:              ens := "illegal export of unsafe interface \'%s\'"
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CGo.m3:              ens := "illegal import of unsafe interface \'%s\'"
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CGo.m3:            "\'%s\' is not an GENERIC interface", gen_id.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CGo.m3:            "\'%s\' is not an GENERIC module", gen_id.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CGoList.m3:          Err.Print(Fmt.F("%s %s for %s \'%s\'", prefix,
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/M3CGoList.m3:              "unit name \'%s\' does not match filename", symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:  standard :=  "INTERFACE " & M3Conventions.Standard & ";\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "TYPE\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "  CARDINAL = [0 .. LAST(INTEGER)];\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "  BOOLEAN = {FALSE, TRUE};\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "  CHAR = {NUL, SOH, STX, ETX, EOT, ENQ, ACK, BEL,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         BS, HT, NL, VT, NP, CR, SO, SI, \n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         DLE, DC1, DC2, DC3, DC4, NAK, SYN, ETB,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         CAN, EM, SUB, ESC, FS, GS, RS, US,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         SP, EXCLAMATION, DQUOTE, HASH, DOLLAR, PERCENT, AMPS, QUOTE,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         LPAREN, RPAREN, STAR, PLUS, COMMA, MINUS, DOT, SLASH,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         EIGHT, NINE, COLON, SEMICOLON, LT, EQ, GT, QUERY,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         AT, A, B, C, D, E, F, G,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         H, I, J, K, L, M, N, O,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         P, Q, R, S, T, U, V, W,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         X, Y, Z, LBRACKET, BACKSLASH, RBRACKET, HAT, UNDERLINE,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         BACKQUOTE, a, b, c, d, e, f, g,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         h, i, j, k, l, m, n, o,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         p, q, r, s, t, u, v, w,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "         x, y, z, LBRACE, VBAR, RBRACE, TILDE, DEL,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C200, C201, C202, C203, C204, C205, C206, C207,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C210, C211, C212, C213, C214, C215, C216, C217,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C220, C221, C222, C223, C224, C225, C226, C227,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C230, C231, C232, C233, C234, C235, C236, C237,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C240, C241, C242, C243, C244, C245, C246, C247,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C250, C251, C252, C253, C254, C255, C256, C257,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C260, C261, C262, C263, C264, C265, C266, C267,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C270, C271, C272, C273, C274, C275, C276, C277,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C300, C301, C302, C303, C304, C305, C306, C307,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C310, C311, C312, C313, C314, C315, C316, C317,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C320, C321, C322, C323, C324, C325, C326, C327,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C330, C331, C332, C333, C334, C335, C336, C337,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C340, C341, C342, C343, C344, C345, C346, C347,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C350, C351, C352, C353, C354, C355, C356, C357,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C360, C361, C362, C363, C364, C365, C366, C367,\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "          C370, C371, C372, C373, C374, C375, C376, C377};\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "  TEXT <: REFANY;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "  MUTEX <: ROOT;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "CONST\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "  FALSE = BOOLEAN.FALSE;  (* short forms *)\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "  TRUE = BOOLEAN.TRUE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE ABS(x: ANY_TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE FLOAT(x: ANY_TYPE; t: M3TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE ROUND(x: ANY_TYPE): INTEGER;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE TRUNC(x: ANY_TYPE): INTEGER;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE FLOOR(x: ANY_TYPE): INTEGER;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE CEILING(x: ANY_TYPE): INTEGER;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE MAX(x, y: ANY_TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE MIN(x, y: ANY_TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE ORD(x: ANY_TYPE): INTEGER;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE VAL(e: INTEGER; t: M3TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE FIRST(x: ANY_TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE LAST(x: ANY_TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE NUMBER(x: ANY_TYPE): CARDINAL;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE TYPECODE(x: ANY_TYPE): INTEGER;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE ISTYPE(x: ANY_TYPE; t: M3TYPE): BOOLEAN;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE NARROW(x: ANY_TYPE; t: M3TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE BITSIZE(x: ANY_TYPE): CARDINAL;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE BYTESIZE(x: ANY_TYPE): CARDINAL;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE ADRSIZE(x: ANY_TYPE): CARDINAL;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE INC(VAR v: ANY_TYPE; n: INTEGER := 1);\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE DEC(VAR v: ANY_TYPE; n: INTEGER := 1);\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE NEW(t: M3TYPE; bindings: ANY_TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE SUBARRAY(a: ANY_TYPE; start, length: CARDINAL): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "(* Unsafe operations *)\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE LOOPHOLE(x: ANY_TYPE; t: M3TYPE): ANY_TYPE;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE ADR(VAR x: ANY_TYPE): ADDRESS;\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "PROCEDURE DISPOSE(VAR x: ANY_TYPE);\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/fe/StandardAsText.m3:standard := standard & "END " & M3Conventions.Standard & ".\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/files/Common/M3DepFindFile.m3:	          Fmt.F("problem reading timestamp for %s - %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/files/Common/M3PathFile.m3:  CONST SpaceOrTab = SET OF CHAR{' ', '\t'};
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/files/Common/M3PathFile.m3:            IN SET OF CHAR{'#'} + SET OF CHAR{'\n', '\r', '\f'} DO
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/files/Common/M3PathFile.m3:    EVAL RdExtras.Skip(s, ASCII.Asciis - ASCII.Set{'\n', '\r', '\f'},
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/files/WIN32/M3PathElemWin32.m3:  SCurrentS := "\\.\\"; SParentS := "\\..\\"; PathSeparator := ';';
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/files/WIN32/M3PathElemWin32.m3:  PathnameSeparator := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Args.m3:     '\000' if we have reached 'limit'. The value of 'item' returned is
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Args.m3:      RETURN '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Args.m3:                    fmt := "Argument required for key \'%s\'\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Args.m3:                    fmt := "Too few arguments for key \'%s\'\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Args.m3:                    fmt := "Too many arguments for key \'%s\'\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Args.m3:                    fmt := "More than one occurrence of key \'%s\'\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Args.m3:              fmt := "Unknown keyword \'%s\'\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Args.m3:              fmt := "Unexpected argument \'%s\'\n";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:          Err.Print(Fmt.F("Duplicated (short form of) command: \'%s\'\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:      Err.Print(Fmt.F("Duplicated command: \'%s\'\n", name),
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:        PutF("%-24s %s\n", command.name, command.help);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:      Put("No commands available!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:        PutF("Open failed on '%s'\n", name);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:        PutF("Close failed on '%s'\n", ss.name);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:      Put("Not logging\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:          PutF("Closing log \'%s\'\n", name);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:          Put("Closing log\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:              in, terminate := ASCII.Set{'\n', ';'}, unget := FALSE) DO
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:            IF NOT stdIn THEN PutF("%s\n", text) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:          ELSIF ch = '\"' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:      WITH line = Fmt.F("%s\n", line_g) DO
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:          Put("Bad command: \'?\' to list commands\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:    Put("Bad args\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:    Put("Bad args\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Command.m3:    Put("Bad args\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/Err.m3:    IF newline THEN third := "\n" ELSE third := "" END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/FingerPrint.m3:      IO.PutText(out, "CONST\n  FPaTable = FPTable{\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/FingerPrint.m3:        IO.PutF(out, "    2_%032s,\n", Fmt.Int(FPaTable[i], Fmt.Binary));
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/FingerPrint.m3:      IO.PutF(out, "    2_%032s,\n    }\n", 
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/FingerPrint.m3:      IO.PutText(out, "\n  FPbTable = FPTable{\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/FingerPrint.m3:        IO.PutF(out, "    2_%032s,\n", Fmt.Int(FPbTable[i], Fmt.Binary));
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/FingerPrint.m3:      IO.PutF(out, "    2_%032s,\n    }\n", 
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/M3Args.m3:      IF TextExtras.FindChar(t, '\n', index) THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/M3Args.m3:  "Keywords - \'/f\' boolean flag. \'/l\' space separated list of values.\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/M3Args.m3:  "           \'/1\' single value. \'/r\' means mandatory.\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/M3Args.m3:  "           \'/p\' means positional argument (keyword can be omitted).\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/M3Args.m3:  "Capitalisation (and \'=short\') indicates alternative shortened form.\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/misc/M3Args.m3:      Err.Print("Bad args - use \'-help\' if in need of help", 
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LDepends.m3:        Put("\nDependsOn list for %s\n - ", m, NIL);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LDepends.m3:      (*Debug Put("Done\n");  Debug*)
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LDepends.m3:      (*Debug Put("InProgress\n"); Cycle(m); Debug*)
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LDepends.m3:      (*Debug Put("Starting\n"); Debug*)
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LDepends.m3:         Put("Finished (%s)\n", m);  Debug*)
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LDepends.m3:      (*Debug Put("Adding %s to dependson list of %s\n", dm, m); Debug*)
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LDepends.m3:    (*Debug Put("AddExporters of %s to %s\n", i, m);  Debug*)
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LReveals.m3:                "incompatible partial \'REVEAL\' for opaque type \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LReveals.m3:                UnitTypeName(unit) & " \'" & 
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LReveals.m3:                M3CId.ToText(unit.as_id.lx_symrep) & "\'");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTool.m3:          Err.Print(Fmt.F("more than one exporter of \'%s\' interface",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTool.m3:      Err.Print(Fmt.F("no module named \'%s\' which exports \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTool.m3:            "procedure \'%s\' in interface \'%s\' is not implemented", id1, id2);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTool.m3:      "name of main program module (default \'Main\')");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTypeEquiv.m3:          "**Type equivalence computation completed after %s iterations\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTypeEquiv.m3:      IO.PutF(s, "  File \'%s\' line %s column %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTypeEquiv.m3:      IO.PutText(s, "  Basic type\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTypeEquiv.m3:    IO.Put(s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTypeEquiv.m3:        IO.PutF(s, "List at position %s contains %s elements:\n",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTypeEquiv.m3:    IO.PutF(stream_g, "Printing array of type lists %s\n", msg);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTypeEquiv.m3:    IO.PutF(stream_g, "Printing array of types %s\n", msg);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/pl/M3LTypeEquiv.m3:      IO.PutF(stream_g, "Entry %s:\n", Fmt.Int(i));
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CActualUtil.m3:            "\'%s\' has already been bound", expAndId.hashId);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CActualUtil.m3:                "no match found for keyword \'%s\'", expAndId.hashId);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CBrand.m3:      TextExtras.Join("\"", t, "\""));
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CConcTypeSpec.m3:        "identifier \'%s\' is not declared as an opaque type", id.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CConcTypeSpec.m3:                                 "\'REVEAL =\' must be followed by a BRANDED reference type expression");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CConcTypeSpec.m3:                              "different \'REVEAL =\' for opaque type %s",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CConcTypeSpec.m3:          "revelation for \'%s\' in import or export \'%s\' is recursive",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CConcTypeSpec.m3:                    "incompatible partial \'REVEAL\' for opaque type \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CConsActualS.m3:                "no value for field \'%s\'", fieldId.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CDef.m3:          "expression on the left of \'.\' cannot be selected");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CDef.m3:          "identifer \'%s\' on left of \'.\' is not an interface",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CDuplicate.m3:        M3Error.ReportWithId(qId, "duplicate exception handler label \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CExpTypeSpec.m3:        "recursive declaration of \'%s\'", cl.varId.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CExpTypeSpec.m3:              M3Error.ReportWithId(varId, "recursive declaration of \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CExpValue.m3:          IF LiteralLastChar(literal) = '\"' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CExpValue.m3:          IF LiteralLastChar(literal) = '\'' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CNameClash.m3:          "illegal redefinition of standard identifier \'%s\'", new.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CNameClash.m3:                "illegal redefinition of standard identifier \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CNameClash.m3:            "name \'%s\' appears more than once in enumeration",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CNameClash.m3:            "field name \'%s\' clashes with existing field name",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CNameClash.m3:            "method name \'%s\' clashes with existing field or method name",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CNameClash.m3:              "override method name \'%s\' clashes with existing field or method name",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CNameClash.m3:            "parameter name \'%s\' clashes with existing parameter name",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CProcActualS.m3:            M3Error.ReportWithId(call, "no argument for parameter \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CRecursive.m3:            "Illegal recursive declaration of \'%s\'", last.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CScope.m3:        "Illegal redefinition of identifier \'%s\'", id.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CScope.m3:              "Cannot import from self (\'%s\')", usedIntId.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CScope.m3:              "Identifier \'%s\' not declared", symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CSearch.m3:      M3Error.ReportWithId(id, "\'%s\' not found in interface \'%s\'",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CSearch.m3:        "Enumeration member \'%s\' not found", symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CSearch.m3:    M3Error.ReportWithId(id, "Record field \'%s\' not found", symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CSearch.m3:                "\'%s\' is a field not a method", symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CSearch.m3:        "object field or method \'%s\' not found", symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CSearch.m3:        "Formal parameter \'%s\' not found", symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CTypeCheck.m3:                 "procedure \'%s\' is not covered by declaration in interface",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CTypeCheck.m3:                  "\'%s\' is not an exception", qualId.as_id.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CTypeSpec.m3:                  "type following \'<:\' is not a reference type");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CTypeSpec.m3:              "method name \'%s\' clashes with existing field name",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/sem/M3CTypeSpec.m3:        "cannot override \'%s\'; no previous definition",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:    sign := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:      IF sign # '\000' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:      IF sign # '\000' THEN Unget(t, sign) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        'n', 't', 'r', 'f', '\\', '\'', '\"'} +
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:    HashAndBufferPut('\'', hashValue, buffer, pos);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:      IF ch IN ASCII.Graphics - ASCII.Set{'\''} THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        IF ch = '\\' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        IF ch = '\'' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:    HashAndBufferPut('\"', hashValue, buffer, pos);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:          IF ch = '\\' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:          ELSIF ch = '\"' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:    EndOfLine = ASCII.Set{'\n', '\f'};
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        | '\t', ' ', '\013', '\f', '\r' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        | '\n' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        | '\'' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        | '\"' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:            Unget(t, '\000'); DEC(t.offset);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:    Unget(t, '\000');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'+\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'-\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'*\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'/\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'=\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'#\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'<\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'>\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'<=\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'>=\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'&\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'^\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'.\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'(\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\')\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'{\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'}\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'[\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\']\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\':=\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\';\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\',\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\':\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'|\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'..\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'<:\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        RETURN "\'=>\'";
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLex.m3:        text := Fmt.F("identifier \'%s\'", t.cur_identifier.toText());
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CLiteral.m3:      IF ch = '\"' OR ch = '\''  THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CParse.m3:            Fmt.F("name after END should be \'%s\'", id.toText()));
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/syn/M3CParse.m3:        langSpec := TextExtras.Join("\"", langSpec, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:        (* 'x' or '\x' or '\ddd' *)
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:          IF Text.GetChar(t, 1) = '\\' THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:            | 'n' => cvi := ORD('\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:            | 't' => cvi := ORD('\t');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:            | 'r' => cvi := ORD('\r');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:            | '\'' => cvi := ORD('\'');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:            | '\"' => cvi := ORD('\"');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:            | 'f' => cvi := ORD('\f');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:            | '\\' => cvi := ORD('\\');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/target/M3CBackEnd_C.m3:            ELSE  (* \ddd *)
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/toolmisc/M3Error.m3:    t := Fmt.F("\"%s\"", name);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/toolmisc/M3Error.m3:      Wr.PutText(err, t); Wr.PutChar(err, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/warn/M3CChkUses.m3:    M3Error.WarnWithId(errNode, "\'%s\' is not used", defId.lx_symrep);
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/warn/M3CChkUses.m3:            M3Error.WarnWithId(d.defId, "\'%s\' is NOT unused!",
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/src/warn/M3CWarnTool.m3:    "don\'t warn about unused FOR loop control variables");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:    Wr.PutText(Stdio.stdout,name & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:        Fmt.Int(cchar) & "): " & M3CComment.Body(self.comment) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:        Fmt.Int(char) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:      Wr.PutText(wr," (In lexical SRC node list)\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:      Wr.PutText(wr,"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:          "Compilation of the following files was requested\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:        Wr.PutText(Stdio.stdout,args[i] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:          "\n\nAfter imports, the following were processed\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3astcontent/src/Main.m3:      Wr.PutText(Stdio.stdout,"\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3format/src/M3Conv.m3:  WSV = ARRAY WS OF TEXT {" ", ", ", "\n", ";\n", "; "};
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3format/src/M3Conv.m3:    D(h, n, " " & M3CId.ToText(n.as_id.lx_symrep) & "." & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3format/src/M3Conv.m3:        Fmt.Int(char) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3format/src/Main.m3:          "Compilation of the following files was requested\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3format/src/Main.m3:        Wr.PutText(Stdio.stdout,args[i] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3format/src/Main.m3:      Wr.PutText(Stdio.stdout,"\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tk/tutorial/m3format/src/Main.m3:      "Check the formatting of the files even if formatted files are\n" &
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/DBRd.m3:      IF (ch # ' ') AND (ch # '\n') THEN EXIT; END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/DBRd.m3:    WHILE (cur < len) AND (t.buf[cur] # '\n') DO INC (cur); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/DBWr.m3:    digits[next] := '\n';  DEC (next);
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/DBWr.m3:VAR newline := ARRAY [0..0] OF CHAR { '\n' };
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:    Out (wr, "<HTML>\n<HEAD>\n<TITLE>", key, " locations</TITLE>\n</HEAD>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:    Out (wr, "<BODY>\n<H2>", key, " is located in:<H2>\n<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:        Out (wr, "<LI><A HREF=\"", FilePath.Normalize (nm, file), ".html\">");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:        Out (wr, nm, "</A>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:    Out (wr, "</UL>\n</BODY>\n</HTML>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:      Out (wr, "<HTML>\n<HEAD>\n<TITLE>", s.title,
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:               "</TITLE>\n</HEAD>\n<BODY>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:    Out (wr, "<PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:            Out (wr, "<A HREF=\"", FilePath.Normalize (x.name, base_file), ".html\">");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:      Out (wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:    Out (wr, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/HTMLDir.m3:      Out (wr, "</BODY>\n</HTML>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:  Begin_ref       = "<A HREF=\"";
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:  End_ref         = "\">";
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:  Begin_tag       = "<A NAME=\"";
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:  End_tag         = "\">";
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:  BeginBracket = ARRAY BOOLEAN OF TEXT { "<inModule>\n",  "<inInterface>\n" };
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:  EndBracket   = ARRAY BOOLEAN OF TEXT { "</inModule>\n", "</inInterface>\n" };
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddH (z, "<HTML>\n<HEAD>\n<TITLE>SRC Modula-3: ");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddH (z, "</TITLE>\n</HEAD>\n<BODY>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddH (z, "<A NAME=\"0TOP0\">\n<H2>");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddH (z, "</H2></A><HR>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddH (z, "<PRE>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddH (z, "</BODY>\n</HTML>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddC (x, "<HR>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddC (x, " is in:\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddC (x, "<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:      AddC (x, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    AddC (x, "</UL>\n<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    Wr.PutText (Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/M3MarkUp.m3:    Wr.PutText (Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/Main.m3:    Wr.PutText (wr, "<HTML>\n<HEAD>\n<TITLE>SRC Modula-3 sources</TITLE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/Main.m3:    Wr.PutText (wr, "</HEAD>\n<BODY>\n<H1>SRC Modula-3 sources</H1>\n<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/Main.m3:    Wr.PutText (wr, "</UL>\n</BODY>\n</HTML>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/Main.m3:    Wr.PutText (wr, "</H2>\n<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/Main.m3:    Wr.PutText (wr, "<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/Main.m3:    Wr.PutText (Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:  EOF = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:    OutT (s, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:        IF c = '\n' THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      IF empty THEN (*! OutT (s, "\\par\\medskip ");  !*) END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:        OutT (s, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:        OutT (s, "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:        | '\n' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      IF (vspace > 0) THEN OutT (s, "\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      | '\"' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:            IF NOT afterDisplay THEN OutT (s, "<PRE>\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:            c := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      | '\n' => 
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:            OutT (s, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:            OutT (s, "<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:            OutT (s, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:              OutT (s, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      | '\134' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:            OutT (s, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:            OutT (s, "</PRE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      startOfLine := (c = '\n') OR (startOfLine AND c = ' ')
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      |'\n' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:          CommitC (s);  OutC (s, '\n');  RETURN
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:            OutC (s, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      | '\134' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      | '\"'          => OutT (s, CodeEdge [in_code]); in_code := NOT in_code;
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      | '\134' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      | '\n' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:      OutT (s, "\\char'");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtml/src/MarkUp.m3:    WHILE (c = ' ') OR (c = '\n') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtmlf/src/Main.m3:      Wr.PutText(wr,"<TITLE> The " & unitName & " interface </TITLE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtmlf/src/Main.m3:      Wr.PutText(wr,"<H1> The " & unitName & " interface </H1>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtmlf/src/Main.m3:      Wr.PutText(wr,"<TITLE> The " & unitName & " module </TITLE>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtmlf/src/Main.m3:      Wr.PutText(wr,"<H1> The " & unitName & " module </H1>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtmlf/src/Main.m3:      Wr.PutText(Stdio.stderr, "? can't read file " & file & " \n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tohtmlf/src/Main.m3:      Wr.PutText(Stdio.stderr, "? can't write file\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  EOFChar   = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:        IF (ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:      | '\''     => ScanChar (t);                            RETURN;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:      | '\"'     => ScanText (t);                            RETURN;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:    ELSIF (ch = '\'') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:    ELSIF (ch = '\n') OR (ch = '\r') OR (ch = '\f') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:    ELSIF (ch = '\\') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:    IF (ch # '\'') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:      ELSIF (ch = '\"') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:      ELSIF (ch = '\n') OR (ch = '\r') OR (ch = '\f') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:      ELSIF (ch = '\\') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:      OR (ch = '\\') OR (ch = '\'') OR (ch = '\"') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:      ELSIF (ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:      IF (ch = '\n') THEN  INC (my_line);  l_start := offset;  END;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  WhiteSpace ['\n'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  WhiteSpace ['\t'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  WhiteSpace ['\r'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  WhiteSpace ['\f'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  CommentAlert ['\n']    := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  CharAlert ['\''] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  CharAlert ['\"'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  CharAlert ['\n'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  CharAlert ['\r'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  CharAlert ['\f'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/M3Scanner.m3:  CharAlert ['\\'] := TRUE;
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/Main.m3:    Out  ("|\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3tools/src/Main.m3:      Out("  !!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      Rd.EndOfFile => Wr.PutText(wr, "\n}\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          IF c = '\n' THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      Wr.PutText(wr, "\\par\\medskip "); 
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      Wr.PutText(wr, "\\par\n\\tab ") 
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      Wr.PutText(wr, "\\par\\medskip\n\\tab ")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:    Wr.PutText(wr, "\\par{\\tt\\parskip=0pt\\parindent=0pt\\progmode\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '\n' => INC(vspace); hspace := 0; startOfLine := TRUE |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '%'  => Space(wr); Wr.PutText(wr, "\\char\'045{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '_'  => Space(wr); Wr.PutText(wr, "\\char\'137{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '&'  => Space(wr); Wr.PutText(wr, "\\char\'046{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '$'  => Space(wr); Wr.PutText(wr, "\\char\'044{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '^'  => Space(wr); Wr.PutText(wr, "\\char\'136{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '#'  => Space(wr); Wr.PutText(wr, "\\char\'043{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '{'  => Space(wr); Wr.PutText(wr, "\\char\'173{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '}'  => Space(wr); Wr.PutText(wr, "\\char\'175{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '~'  => Space(wr); Wr.PutText(wr, "\\char\'176{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '*'  => Space(wr); Wr.PutText(wr, "\\char\'052{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          '\\' => Space(wr); Wr.PutText(wr, "\\char\'134{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        Wr.PutText(wr, "}\\par\\smallskip\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        Wr.PutText(wr, "\\procspec ")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        Wr.PutText(wr, "}\\par\\medskip\\noindent\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '%'  => Wr.PutText(wr, "\\char\'045{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '_'  => Wr.PutText(wr, "\\char\'137{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '&'  => Wr.PutText(wr, "\\char\'046{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '$'  => Wr.PutText(wr, "\\char\'044{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '^'  => Wr.PutText(wr, "\\char\'136{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '#'  => Wr.PutText(wr, "\\char\'043{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '{'  => Wr.PutText(wr, "\\char\'173{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '}'  => Wr.PutText(wr, "\\char\'175{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '*'  => Wr.PutText(wr, "\\char\'052{}") |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      '\\' => Wr.PutText(wr, "\\char\'134{}") 
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:    Wr.PutText(wr, "{\\rm ");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        '\"' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:            Wr.PutText(wr, "{\\tt ")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:              Wr.PutText(wr, "\\par\\medskip ")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:            c := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        '\n' => 
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:            Wr.PutText(wr, "\\medskip\\noindent%\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:            Wr.PutText(wr, "\\par\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:            Wr.PutText(wr, "\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:              Wr.PutText(wr, "\\par}");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:                Wr.PutText(wr, "\\medskip\\noindent%\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:          Wr.PutText(wr, "\\medskip\\noindent%\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      startOfLine := (c = '\n') OR (startOfLine AND c = ' ')
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:    Wr.PutText(wr, "{\\display ");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        '%', '_', '&', '$', '^', '#', '{', '}', '*', '\\'  => 
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        '\n' => Wr.PutText(wr, "}\\noindent\\par\n"); RETURN |
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:    Wr.PutText(wr, "{\\rm ");
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        '\"' =>
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:            Wr.PutText(wr, "{\\tt ")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:    Rd.Failure => Wr.PutText(Stdio.stderr, "? can't read file\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:        "? usage: m3ToTex name.extension [name.extension]\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3totex/src/m3totex.m3:      Wr.PutText(Stdio.stderr, "? can't write file\n")
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("\nm3where: ", a, b, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("usage: m3where [options] [units]\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -b <dir>   build with template <dir> in directory <dir>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("               (default='", build_dir, "')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -d <dir>   start in directory <dir> (default='", start_dir,"')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -F <file>  prepend the quake code in <file>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -T <dir>   use templates in directory <dir>\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("               (default='", default_template_dir, "')\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -q         quiet\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -v         verbose\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -help      print this messsage\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -version   print version\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -<arg>     pass -<arg> to quake\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  -h         show hidden\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("  <unit>     call quake with each unit\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    Out ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:        Out ("m3where: ", M3_VERSION, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:        path := path & "\n" & trials.get(i);
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:      IF NOT quiet THEN Out ("--- searching in ", dir, " ---\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:      Wr.PutText(wr,"\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:        Wr.PutText(wr,"enum_units (\"" & show_hidden & "\")\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:          Wr.PutText(wr,"find_unit (\"" & units.head & "\", \"" & show_hidden &
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:              "\")\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    IF (verbose) THEN Out (sym, " = ", val, "\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3where2/src/Main.m3:    IF (verbose) THEN Out ("EVAL (", file, ")\n") END;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/templates/JunoView.m3:    ZeusPanel.ReportError("\"" & nm & "\" event error: " & msg)
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/templates/TranscriptView.m3:        TextPort.PutText(view.te.tp, "**zeus:  " & t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/templates/TranscriptView.m3:    TextPort.PutText(view.te.tp, "--event: " & t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:  EOF = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:      tok := tok & " = \"" & s.cur_id & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:      WHILE (CharClass [s.ch] = CC.WhiteSpace) AND (s.ch # '\n') DO
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:      IF (s.ch = '\n') THEN GetCh (s); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:        IF (s.ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:      IF (s.ch = '\n') THEN INC (s.cur_line); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:    CharClass['\t'] := CC.WhiteSpace;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:    CharClass['\n'] := CC.WhiteSpace;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/EventFile.m3:    CharClass['\r'] := CC.WhiteSpace;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Main.m3:        IF (i >= n) THEN Die ("missing directory after \"-templates\""); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Main.m3:        IF (i >= n) THEN Die ("missing file after \"-Obliq\""); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Main.m3:        IF (i >= n) THEN Die ("missing file after \"-Obliq3D\""); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Main.m3:        IF (i >= n) THEN Die ("missing file after \"-Juno\""); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Main.m3:    IO.Put ("m3zoom: " & msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Template.m3:      Out  (buf, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Template.m3:      IF (NOT full) OR (cur = 0) OR (tmp[cur-1] = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Template.m3:            WHILE (tx < tlen) AND (tmp[tx] # '\n') DO INC (tx); END;
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Template.m3:        b.newline := (c = '\n');
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Template.m3:      IF (c = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Template.m3:      ELSIF (c = '\r') THEN
/home/ftp/pub/m3/pkg/SRC-m3/m3zume/src/Template.m3:      IF (indent + len >= 65) THEN  OutT (buf, ";\n"); indent := 0;  END;
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/kpaths/Test.m3:          IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/kpaths/Test.m3:        Sx.ReadError(why) => IO.Put("\nSx Read error (" & why & ") at " & Fmt.Int(Rd.Index(Stdio.stdin)))
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/kpaths/Test.m3:  | Sx.ReadError(why) => IO.Put("\nSx Read error (" & why & ") at " & Fmt.Int(Rd.Index(Stdio.stdin)))
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/parse/A_BottomUp.m3:    Wr.PutText (Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/parse/A_TopDown.m3:    Wr.PutText (Stdio.stdout, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/parse/Token.m3:      IF (ch # ' ') AND (ch # '\n') AND (ch # '\t') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/parse/Token.m3:      t := T.Id;  name := "?\\" & Fmt.Int (ORD (ch), 8) & "?"; INC (cursor);
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/parse/V_Tree.m3:      Wr.PutText (Stdio.stdout, "-------\n");
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/parse/V_Tree.m3:    Wr.PutText (wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/pktroute/AlgGreedy.m3:              RAISE Topology.BadGraph("Could not open file \"" & fname & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/pktroute/AlgGreedy.m3:              RAISE Packet.BadPkts("Could not open file \"" & fname & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/pktroute/AlgGreedy.m3:        Wr.PutText(Stdio.stderr, "Graph Error: " & msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/pktroute/AlgGreedy.m3:        Wr.PutText(Stdio.stderr, "Packet Error: " & msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/unionfind/AlgBoth.m3:          ZeusPanel.ReportError("Bad input: " & txt & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/unionfind/AlgCompress.m3:          ZeusPanel.ReportError("Bad input: " & txt & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/unionfind/AlgList.m3:          ZeusPanel.ReportError("Bad input: " & txt & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/unionfind/AlgQuickFind.m3:          ZeusPanel.ReportError("Bad input: " & txt & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/unionfind/AlgSimple.m3:          ZeusPanel.ReportError("Bad input: " & txt & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/unionfind/AlgUnionByRank.m3:          ZeusPanel.ReportError("Bad input: " & txt & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/unionfind/UFInput.m3:      OSError.E => RAISE Error("unable to open file \"" & fileName & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/unionfind/UFInput.m3:        ELSE RAISE Error("expecting \"TRUE\" or \"FALSE\"")
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/wheeler/Wheeler.m3:      res[sn] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/wheeler/Wheeler.m3:    lastchars[n] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/wheeler/Wheeler.m3:      lastchars[n] := '\000'
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/wheeler/Wheeler.m3:      ans[n] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/wheeler/WheelerDDO.m3:      res[sn] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/wheeler/WheelerDDO.m3:    lastchars[n] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/wheeler/WheelerDDO.m3:      lastchars[n] := '\000'
/home/ftp/pub/m3/pkg/SRC-m3/mentor/src/wheeler/WheelerDDO.m3:      ans[n] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/Builder.m3:	SynParse.Fault(p, "Invalid token: \"\"") 
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/Builder.m3:      SynParse.Fault(p, "Invalid token: \"\"") 
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/Builder.m3:        SynWr.Text(SynWr.out, "\n", loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/Builder.m3:      SynWr.Text(SynWr.out, "\n", loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/MetaParser.m3:    SynWr.Text(SynWr.out, "\n", loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/MetaParser.m3:        SynWr.Text(SynWr.out, "\"" & node.key & "\"" );
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/MetaParser.m3:        SynWr.Text(SynWr.out, "\"~" & node.text & "\"" );
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/MetaParser.m3:        SynWr.Text(SynWr.out, "\' ");
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/MetaParser.m3:        SynWr.Text(SynWr.out, "\' ");
/home/ftp/pub/m3/pkg/SRC-m3/metasyn/src/MetaParser.m3:      SynWr.Char(SynWr.out, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/motif/src/Xmacro.m3:    tmp.pad1:=0; tmp.pad2:='\000'; tmp.val:=value;
/home/ftp/pub/m3/pkg/SRC-m3/motif/tests/src/Hello.m3:  debug(1,ftn,"begin\n");
/home/ftp/pub/m3/pkg/SRC-m3/motif/tests/src/Hello.m3:  debug(1,ftn,"end\n");
/home/ftp/pub/m3/pkg/SRC-m3/motif/tests/src/HelloGUI.m3:  debug(1,ftn,"begin\n");
/home/ftp/pub/m3/pkg/SRC-m3/motif/tests/src/HelloGUI.m3:  debug(1,ftn,"begin\n");
/home/ftp/pub/m3/pkg/SRC-m3/motif/tests/src/HelloGUI.m3:    debug(1,ftn,"begin\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/NetObjRT.m3:| T1  ob reachable /\ ob.w # WireRep.NullT =>
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/NetObjRT.m3:|     ob.w in domain(objTbl) /\ ob'.w = ob.w => ob' = ob
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/NetObjRT.m3:|  v.ref = NIL /\ v.ready =>
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/NetObjRT.m3:   c.xi.pinCount =  # loc: Location st. ( c.w in domain(loc.exports) /\
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/StubLib.m3:      res := UnsafeRd.FastGetChar(c.rd) # '\000';
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/StubLib.m3:      UnsafeWr.FastPutChar(c.wr, '\001');
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/StubLib.m3:      UnsafeWr.FastPutChar(c.wr, '\000');
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/StubLib.m3:      text[len] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/StubProt.m3:              (* UnsafeWr.FastPutChar(c.wr, '\000'); *)
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/netobjrt/WireRep.m3:        & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/tcpnetobj/HeaderOps.m3:    hdr.data[hdr.fx.length+len] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/tcpnetobj/HeaderOps.m3:      IF hdr.data[i] = '\000' THEN
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/tcpnetobj/TCPNetObj.m3:        Fmt.F("%s: NetObj location cleanup -- %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/src/tcpnetobj/TCPNetObj.m3:        Fmt.F("%s: NetObj location %s (%s) after %s seconds -- %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/echorw/src/Echo.m3:        Wr.PutText(c.wr, Rd.GetLine(c.rd) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/echorw/src/Echo.m3:      IO.Put("Exported target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/echorw/src/Echo.m3:        IO.Put("Exported target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/echorw/src/Echo.m3:    IO.Put("Echo server running, type <CR> to terminate\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/echorw/src/Echo.m3:        IO.Put(Fmt.F("No such host \"%s\"\n", host));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/echorw/src/Echo.m3:          IO.Put("Located target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/echorw/src/Echo.m3:            IO.Put("Located target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:    | NetObj.Error(x) => IO.Put("Forked NetObj.Error(" & ErrStr(x) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:    IO.Put("Waiting for forked threads to call back.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:          IO.Put("waiters=" & Fmt.Int(waiters) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:        IO.Put(Fmt.F("%s usec/call.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:    | NetObj.Error(ec) => IO.Put("NetObj.Error(" & ErrStr(ec) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:    IO.Put("Waiting for forked threads to return.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:        IO.Put("Exported target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:          IO.Put("Exported target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:      IO.Put("Test server running, type <CR> to terminate\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:          | IO.Error => IO.Put("Parameter must be an integer\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:          IO.Put(Fmt.F("No such host \"%s\"\n", host));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:            IO.Put("Located target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:              IO.Put("Located target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:  | IP.Error => IO.Put("IP.Error\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:  | TCPNetObj.Failed => IO.Put("TCPNetObj.Failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:  | NetObj.Invalid => IO.Put("NetObj.Invalid\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd/src/FDTest.m3:  | NetObj.Error(x) => IO.Put("NetObj.Error(" & ErrStr(x) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:    IO.Put("Waiting for forked threads to call back.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:          IO.Put("waiters=" & Fmt.Int(waiters) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:      IO.Put("fdmax=" & Fmt.Int(fdmax) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:        IO.Put(Fmt.F("%s usec/call.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:    | NetObj.Error(ec) => IO.Put("NetObj.Error(" & ErrStr(ec) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:        IO.Put("Exported target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:          IO.Put("Exported target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:      IO.Put("Test server running, type <CR> to terminate\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:          | IO.Error => IO.Put("Parameter must be an integer\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:          IO.Put(Fmt.F("No such host \"%s\"\n", host));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:            IO.Put("Located target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:              IO.Put("Located target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:  | IP.Error => IO.Put("IP.Error\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:  | TCPNetObj.Failed => IO.Put("TCPNetObj.Failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:  | NetObj.Invalid => IO.Put("NetObj.Invalid\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/fd1/src/FDTest.m3:  | NetObj.Error(x) => IO.Put("NetObj.Error(" & ErrStr(x) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:      IO.Put(Fmt.F("Blocking seqno=%s\n", Fmt.Int(seq)));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:    | Thread.Alerted => IO.Put(Fmt.F("Alerted seqno=%s\n", Fmt.Int(seq)));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:        IO.Put("Exported target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:          IO.Put("Exported target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:      IO.Put("Test server running, type <CR> to terminate\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:        IO.Put(Fmt.F("No such host \"%s\"\n", host));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:          IO.Put("Located target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:            IO.Put("Located target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:            IO.Put("Forking call\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/longcall/src/LongCallTest.m3:            IO.Put("Joined call\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:    IO.Put("ok\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:    IO.Put("\nOpening " & path & " ... ");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:    IO.Put("ok\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:        IO.Put("Rd.Failure(" & ErrStr(x) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:        IO.Put("Exported target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:          IO.Put("Exported target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:      IO.Put("Test server running, type <CR> to terminate\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:          IO.Put("Usage:  test hostname pathname\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:          IO.Put(Fmt.F("No such host \"%s\"\n", host));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:            IO.Put("Located target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:              IO.Put("Located target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:  | IP.Error => IO.Put("IP.Error\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:  | TCPNetObj.Failed => IO.Put("TCPNetObj.Failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:  | NetObj.Invalid => IO.Put("NetObj.Invalid\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:  | NetObj.Error(x) => IO.Put("NetObj.Error(" & ErrStr(x) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/luca/src/LucaTest.m3:  | OSError.E(x) => IO.Put("OSError.E(" & ErrStr(x) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put(Fmt.F("%s usec/call.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put(Fmt.F("%s usec/call.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put(Fmt.F("%s usec/call.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put(Fmt.F("%s usec/call.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put(Fmt.F("%s usec/call.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put(Fmt.F("%s KBytes/sec.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put(Fmt.F("%s KBytes/sec.\n",
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("Usage: test <host> [options]\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("Options are:\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -help    Print this message.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -short   Repeat test 1000 times, otherwise 5000 times.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("               (For byte stream tests this is 5MB vs. 50MB.)\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("  Various method call tests:\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -null    The null method.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -ten     A method with ten integer arguments.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -o       The same surrogate obj arg each time.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -oc      The same concrete obj arg each time.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -oq      A unique concrete obj arg each call.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -r       Return the same surrogate obj each call.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -rc      Return a different concrete obj each call.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -rq      Return a different concrete obj each call.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -sp      A REF CHAR argument for each call.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -bp      A 25-element linked list argument for each call.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("  Byte stream tests:\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -rd      Read data from a marshaled reader.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("    -wr      Write data to a marshaled writer.\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:      IO.Put("Exported target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:        IO.Put("Exported target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:    IO.Put("Test server running, type <CR> to terminate\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:          IO.Put(Fmt.F("No such host \"%s\"\n", host));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:            IO.Put("Located target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:              IO.Put("Located target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/perf/src/NetObjTest.m3:            IO.Put("Connected to " & qname & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:      IO.Put("failed: returned NIL\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:      IO.Put("failed: different typecode\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:      IO.Put("ok\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:      IO.Put("failed: different contents\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:      IO.Put("Exported target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:        IO.Put("Exported target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:    IO.Put("Test server running, type <CR> to terminate\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:        IO.Put(Fmt.F("No such host \"%s\"\n", host));
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:          IO.Put("Located target via netobjd\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:            IO.Put("Located target at private port\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobj/tests/pkl/src/PickleTest.m3:        | NetObj.Error(x) => IO.Put("NetObj.Error(" & ErrStr(x) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/netobjd/src/NetObjDaemon.m3:      	  Params.Get(0) & ": listen failed.  Is a netobjd already running?\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibAnimHelp.m3:        SynWr.Text(SynWr.out, "  rects             (the built-in rects library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibAnimHelp.m3:        SynWr.Text(SynWr.out, "  graph             (the built-in graph library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibAnimHelp.m3:        SynWr.Text(SynWr.out, "  zeus              (the built-in zeus library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibM3Help.m3:        SynWr.Text(SynWr.out, "  rd                (the built-in reader library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibM3Help.m3:        SynWr.Text(SynWr.out, "  wr                (the built-in writer library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibM3Help.m3:        SynWr.Text(SynWr.out, "  lex               (the built-in lex library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibM3Help.m3:        SynWr.Text(SynWr.out, "  fmt               (the built-in fmt library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibM3Help.m3:        SynWr.Text(SynWr.out, "  pickle            (the built-in pickle library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibM3Help.m3:        SynWr.Text(SynWr.out, "  process           (the built-in process library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibM3Help.m3:        SynWr.Text(SynWr.out, "  thread            (the built-in thread library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  syntax            (overview)\n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  syntax lexicon    (lexical matters)\n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  syntax real       (the one used by the parser)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  flags             (inspecting and setting system flags)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  Say 'flag;' to list system flags and their values\n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  Say 'flag <name>;' to inspect a flag\n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  Say 'flag <name> <value>;' to set a flag\n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "      (enclose <value> in double quotes if needed)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "Say 'help <topic>;' or 'help <topic> <subtopic>;'\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:      ELSE SynWr.Text(SynWr.out, "  " & name & "_" & opCodes^[i].name & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  lib               (show a list of loaded libraries)\n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  lib <lib>         (show info about loaded library <lib>)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:           SynWr.Text(SynWr.out, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:            SynWr.Text(SynWr.out, "  library not found\n")
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:          "  env               (show all the environment)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  sysOnline         (the built-in system library, online extension)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  sys               (the built-in system library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  bool              (the built-in boolean library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  int               (the built-in integer library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  real              (the built-in real library, with int overloading)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  math              (the built-in math library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  ascii             (the built-in ascii library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  text              (the built-in text library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  array             (the built-in array library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibOnlineHelp.m3:        SynWr.Text(SynWr.out, "  net               (the built-in network library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibUIHelp.m3:        SynWr.Text(SynWr.out, "  color             (the built-in color library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibUIHelp.m3:        SynWr.Text(SynWr.out, "  vbt               (the built-in vbt library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObLibUIHelp.m3:        SynWr.Text(SynWr.out, "  form              (the built-in forms library)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObliqOnline.m3:      SynWr.Text(interpreter.swr, "\n" & greetings & "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliq/src/ObliqOnline.m3:        SynWr.Text(SynWr.out, "Loading '" & filename & "'\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqbin3D/src/Main.m3:    "Obliq-3D    22-Aug-95 Beta Release (say \'help;\' for help)\nCopyright (c) 1995 Digital Equipment Corporation";
/home/ftp/pub/m3/pkg/SRC-m3/obliqbinanim/src/Main.m3:    "  obliq -anim  (obliq with standard, ui, and animation libraries) (say \'help;\' for help)";
/home/ftp/pub/m3/pkg/SRC-m3/obliqbinmin/src/Main.m3:    "  obliq -min  (obliq with minimum libraries) (say \'help;\' for help)";
/home/ftp/pub/m3/pkg/SRC-m3/obliqbinstd/src/Main.m3:    "  obliq -std  (obliq with standard libraries) (say \'help;\' for help)";
/home/ftp/pub/m3/pkg/SRC-m3/obliqbinui/src/Main.m3:    "  obliq -ui  (obliq with standard and ui libraries) (say \'help;\' for help)";
/home/ftp/pub/m3/pkg/SRC-m3/obliqlib3D/src/ObAux.m3:                  "(built-in interface to Anim3D's " & m3name & " module)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlib3D/src/ObKeySym.m3:    | Latin1Key.quotedbl     => t := "\"";
/home/ftp/pub/m3/pkg/SRC-m3/obliqlib3D/src/ObKeySym.m3:    | Latin1Key.backslash    => t := "\\";
/home/ftp/pub/m3/pkg/SRC-m3/obliqlib3D/src/ObKeySym.m3:      ELSIF Text.Equal (t, "\"") THEN
/home/ftp/pub/m3/pkg/SRC-m3/obliqlib3D/src/ObKeySym.m3:      ELSIF Text.Equal (t, "\\") THEN
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibanim/src/ObLibAnim.m3:            ObValue.BadArgVal(2, "\"rectangle\" or \"ellipse\"", 
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibanim/src/ObLibAnim.m3:           "*** A Modula3 callback to Obliq caused an Obliq error: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibanim/src/ObLibAnim.m3:           "*** A Modula3 callback to Obliq caused an Obliq exception: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibanim/src/ObLibAnim.m3:            "*** A Modula3 callback to Obliq caused an Obliq error: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibanim/src/ObLibAnim.m3:           "*** A Modula3 callback to Obliq caused an Obliq exception: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibanim/src/ObLibAnim.m3:          "*** a graph_ click action caused an Obliq error: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibanim/src/ObLibAnim.m3:         "*** a graph_ click action caused an Obliq exception: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibui/src/ObLibUI.m3:           "*** A Modula3 callback to Obliq caused an Obliq error: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibui/src/ObLibUI.m3:           "*** A Modula3 callback to Obliq caused an Obliq exception: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqlibui/src/ObLibUI.m3:            ObValue.BadArgType(3, "\"invert\" or \"grid \"", 
/home/ftp/pub/m3/pkg/SRC-m3/obliqparse/src/ObFrame.m3:      SynWr.Text(SynWr.out, "Loading '" & filename & "'\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqparse/src/ObFrame.m3:      TextRd.New("establish " & name & " for " & for & ";\n"),
/home/ftp/pub/m3/pkg/SRC-m3/obliqparse/src/ObFrame.m3:    SynScan.PushInput(sc, "<none>", TextRd.New("qualify;\n"), TRUE, TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/obliqparse/src/ObFrame.m3:        "' already exists and has not been reloaded)\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqparse/src/ObFrame.m3:    SynWr.Text(SynWr.out, "Establishing " & ModAndLib(name,for) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqparse/src/ObFrame.m3:      SynWr.Text(SynWr.out, "(Created frame " & ModAndLib(name,for) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqparse/src/ObFrame.m3:          "(Deleted frame " & ModAndLib(env.frameName,env.forName) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqparse/src/ObFrame.m3:      "(Closed frame " & ModAndLib(env.frameName,env.forName) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqprint/src/ObPrintTree.m3:      | 1 => res := "\'" & res;
/home/ftp/pub/m3/pkg/SRC-m3/obliqprint/src/ObPrintTree.m3:      | 2 => res := "\"" & res;
/home/ftp/pub/m3/pkg/SRC-m3/obliqprint/src/ObPrintTree.m3:    SynWr.Char(swr, '\'');
/home/ftp/pub/m3/pkg/SRC-m3/obliqprint/src/ObPrintTree.m3:    SynWr.Char(swr, '\'');
/home/ftp/pub/m3/pkg/SRC-m3/obliqprint/src/ObPrintValue.m3:    | ObValue.ValText => SynWr.Text(swr, "\" ... \"");
/home/ftp/pub/m3/pkg/SRC-m3/obliqrt/src/ObBuiltIn.m3:              self.name&"_"&opCode.name&": \""&text1&"\" not found", loc);
/home/ftp/pub/m3/pkg/SRC-m3/obliqrt/src/ObCommand.m3:        SynWr.Text(SynWr.out, "Command not found: " & name & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/obliqrt/src/ObErr.m3:      SynWr.Char(swr, '\n', loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvstd/src/Main.m3:  "process_new(processor, [\"netobjd\"], true); \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvstd/src/Main.m3:  "loop try \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvstd/src/Main.m3:  "  net_exportEngine(\"stdObliqEngine\", \"\", sys_address); \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvstd/src/Main.m3:  "  exit; \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvstd/src/Main.m3:  "except net_failure => pause(2.0); \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvstd/src/Main.m3:  "end end; \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvstd/src/Main.m3:  "let mu = mutex(); \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvstd/src/Main.m3:  "lock mu do wait(mu, condition()) end; \n";
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvui/src/Main.m3:  "process_new(processor, [\"netobjd\"], true); \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvui/src/Main.m3:  "loop try \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvui/src/Main.m3:  "  net_exportEngine(\"uiObliqEngine\", \"\", sys_address); \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvui/src/Main.m3:  "  exit; \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvui/src/Main.m3:  "except net_failure => pause(2.0); \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvui/src/Main.m3:  "end end; \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvui/src/Main.m3:  "let mu = mutex(); \n" &
/home/ftp/pub/m3/pkg/SRC-m3/obliqsrvui/src/Main.m3:  "lock mu do wait(mu, condition()) end; \n";
/home/ftp/pub/m3/pkg/SRC-m3/ocr/src/DS3100/DCRS.m3:      t[buffer_size] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/ocr/src/DS3100/DCRS.m3:    Wr.PutText(wr, "P4\n" & Fmt.Int(width) & " " & Fmt.Int(height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ocr/src/DS3100/DCRS.m3:        WHILE Rd.GetChar(rd) # '\n' DO END
/home/ftp/pub/m3/pkg/SRC-m3/ocr/src/DS3100/DCRS.m3:    Spaces  = SET OF CHAR{' ', '\t', '\n', '\r'};
/home/ftp/pub/m3/pkg/SRC-m3/ocr/src/DS3100/DCRS.m3:    Spaces = SET OF CHAR{' ', '\t', '\n', '\r'};
/home/ftp/pub/m3/pkg/SRC-m3/ocr/src/DS3100/OCR_DCRS.m3:    Wr.PutText(ws.wr, w); Wr.PutChar(ws.wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:      t.error("keyword \"" & key & "\" not found.");
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:          Fmt.Int(t.next-1) & " = \"" &
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:          a[t.next-1] & "\"."
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	    "parameter " & Fmt.Int(t.next-1) & " = \"" & txt &
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	    "\" should be an integer."
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	  "parameter " & Fmt.Int(t.next-1) & " = \"" & txt &
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	  "\" should be a real number."
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	  "parameter " & Fmt.Int(t.next-1) & " = \"" & txt &
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	  "\" should be a real number."
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	      "parameter " & Fmt.Int(i) & " = \"" & a[i] & 
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	      "\" extraneous or misplaced."
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	      "parameter " & Fmt.Int(i) & " = \"" & a[i] & 
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:	      "\" extraneous or misplaced."
/home/ftp/pub/m3/pkg/SRC-m3/parseparams/src/ParseParams.m3:      Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:                                  NetPath.ToText(pns[i].dir) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:                                  NetPath.PNToText(pns[i]) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:        Output("Error: " & PkgErr.Msg(lockEC) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:            Output(header & "not fingerprinted\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:	    Output(header & FPToText(entry.fp) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:            Output(header & "not fingerprinted\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:            Output(header & "version not found\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:        Output(header & "starting fingerprint (" & r.last & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:                               & " (" & r.last & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:          Output(header & FPToText(fp) & " (" & r.last & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:        Output(header & PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:        Output(header & PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:    IF verbose THEN Output("   ... exports - " & FPToText(fp) & "\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:                           & " - " & FPToText(fp) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:    Output("Usage:   pkgfp [-vfcpz] [-r replicaName] [packages ...]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:                Output("Replica \"" & argx & "\" is unknown\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:          Output("Bad package argument: " & Params.Get(narg) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgfprint/src/PkgFP.m3:      Output("Site.Error(\"" & Site.ErrMsg(ec) & "\")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgobj/src/POSIX/FileSysPosix.m3:    linkbuf[cc] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:"Usage: pkgq [-v] [-f] [-s site] [-q queue]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | status <the default action>\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | show [packages ...]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   ! showreps\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | skulk [packages ...]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | showdirs [replicas=a+b+c] [subrepnames ...]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | check [replicas=a+b+c] [packages ...]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | find packageNameArc\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | locks packages ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | locallocks [packages ...]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | synch [packages ...]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | createrep repositoryName\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | removerep repositoryName\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | enqueue packages ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | dequeue packages ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | change field=value packages ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | corrupt [replicas=a+b+c] packages ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stderr, "   | changeowner site packages ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stderr, Site.ErrMsg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stderr, PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stderr, PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:            PutText(stderr, "No such site:"  & siteArg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        PutText(stderr, Site.ErrMsg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:            PutText(stderr, "No such site:"  & siteParam & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stderr, "Siphon not enabled\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        PutText(stdout, Fmt.F("Synchronizing remote sites (%s)- wait ...\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:              PutText(stderr, Fmt.F("Error on package %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:              PutText(stderr, Fmt.F("Error on package %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                "No repositories registered at lock server!!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stdout, Fmt.F("%s\n", PathToText(dirs^[i])));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                PutText(stdout, PrintPackage(pkg) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stderr, "all replicas down\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        PutText(stdout, Fmt.F("Checking repositories at replicas %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:            PutText(stderr, "No repositories at lock server!!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                   Fmt.F( "repository %s unknown at lock server\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                "WARNING: replica  %s not reachable\n", replicas^[i]));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stderr, "all replicas down\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:            PutText(stderr, " - for all packages. Wait ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:            PutText(stderr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                stderr, Fmt.F("WARNING: replica  %s not reachable\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:            Fmt.F("WARNING: %s unknown at all replicas\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:            (* PRINTF(stdout, "%s exists at replicas: %s\n", dirName, m); *)
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:           Fmt.F("Creating repository %s\n", PathToText(dirName)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        PutText(stdout, "Repository created\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                      "Repository %s contains locally managed packages:\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                  PutText(stderr, Fmt.F("   %s\n", el[i].arc));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                 Fmt.F( "Deleting all foreign entries in %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stdout, Fmt.F("Removing repository %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stdout, "repository removed\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:              PutText(stderr, "ok\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                PutText(stderr, PkgErr.Msg(pmEC) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                PutText(stderr, PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                PutText(stderr, "ok\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:              PutText(stderr, PkgErr.Msg(lockEC) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:              PutText(stderr, Fmt.F("Error on package %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:              PutText(stderr, Fmt.F("Error on package %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                PutText(stderr, Fmt.F("Error on package %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:            PutText(stdout, "Packages managed by local site and locked\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                      "%s is not locked\n", PrintPackage(packages^[xpac])));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    "%s: cannot tell lock status: managing site is remote (%s)\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                PutText(stderr, Fmt.F("Error on package %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:                 Fmt.F("%s is not locked\n", PrintPackage(packages^[xpac])));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:              PutText(stderr, Fmt.F("Error on package %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:               Fmt.F("Commit failure at %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        PutText(stderr, PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        PutText(stderr, PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:      PutText(stderr, "Bad field name, possible field names are:\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        "   managedBy, ownerKey, ownerSite, inst, CV, LV, PV\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          PutText(stderr, "Bad integer field value\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:      PutText(stderr, "Bad boolean field value\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stdout, Fmt.F("  %s\n", Date(entry.lastModified)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stdout, PrintPackage(pkg) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:          Fmt.F("  Locked: %s (%s)\n", e.owner.key, e.owner.site));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:         Fmt.F("  Managed by: %s\n", e.managedBy));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:         Fmt.F("  Instance=%s; lv=%s; cv=%s; pv=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(stdout, "  Last modified: " & Date(e.lastModified) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:           Fmt.F("%s %s %s (%s)\n", PrintPackage(pkg), m,
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        PutText(stderr, "Invalid package name\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:        PutText(stderr, "Invalid directory name\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:      PutText(wrArg, Fmt.F("  %s\n", finalTxt));
/home/ftp/pub/m3/pkg/SRC-m3/pkgq/src/PkgQTool.m3:    PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockRestart.m3:            PSLib.LogIt ("LR: Can\'t reconcile " & PSLib.PkgText(pn));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:       "PL.Create %s, user=%s, key=%s, v=%s.%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:    PSLib.LogFmt("PL.Remove %s, user=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:       "PL.Lock %s, user=%s\n%skey=%s, site=%s, v=%s.%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:       "PL.Unlock %s, user=%s, site=%s, (%s, %s)\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:       "PL.Assign %s, user=%s, site=%s, vn=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:      out := out & "\n" & Indent;
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:    PSLib.LogFmt("PL.CreateRep %s, user=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:    PSLib.LogFmt("PL.RemoveRep %s, user=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/LockServer.m3:    PSLib.LogFmt("PL.RemoveForeign %s, user=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PSExportLink.m3:      Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PSExportLink.m3:      WHILE j < bufLen AND buffer[j] # ' ' AND buffer[j] # '\n' DO INC(j); END;
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PSLib.m3:    ServerLog.WriteText(log, t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PSLib.m3:    RETURN "\"" & NetPath.PNToText(pn) & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PSLib.m3:    RETURN "\"" & NetPath.ToText(path) & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PSRestart.m3:      PSLib.LogIt("RR: can\'t find " & name & " (" & Fmt.Int (nv.t) & "."
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PSShip.m3:      Wr.PutText (wr, Fmt.Int (v.t) & "." & Fmt.Int (v.vn) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PackageDB.m3:            Wr.PutText (wr, " N: " & pkg & Version() & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PackageDB.m3:                           & pe.owner.site & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PackageDB.m3:            Wr.PutText (wr, " U: " & pkg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PackageDB.m3:            Wr.PutText (wr, " C: " & pkg & Version() & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PackageDB.m3:            Wr.PutText (wr, " S: " & pkg & Version() & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PackageDB.m3:            Wr.PutText (wr, " F: " & pkg & Version() & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PackageDB.m3:            Wr.PutText (wr, " D: " & text & " (create)\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/PackageDB.m3:            Wr.PutText (wr, " D: " & text & " (remove)\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:      Util.LogText(Fmt.F("Send.EnQ of %s(%s) to %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:        Util.LogText(Fmt.F("Send.EnQ of %s(%s)\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:      Util.LogText(Fmt.F("Send.DeQ of %s\n", PSLib.PkgText(package)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:      Util.LogText(Fmt.F("Send.DeQ of %s for %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:      Wr.PutText(wr, Fmt.F("    %s(%s) %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:         Fmt.F("ok for %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:         Fmt.F("down for %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:           Fmt.F("     Reason: %s\n", PkgErr.Msg(q.linkStatus)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:      IF q = NIL THEN Wr.PutText(wr, "none\n"); ELSE Wr.PutText(wr, "\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:      Util.LogText(Fmt.F("%s failed for %s: no such site\n", op, dest));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:        Fmt.FN("NewSend %s(%s.%s) [%s] to %s (try %s)\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:      Util.LogText(Fmt.F("Send [%s] complete\n", Fmt.Int(id)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:        Util.LogText(Fmt.F("Send [%s] aborted\n", Fmt.Int(id)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:          Util.LogText(Fmt.F("Send [%s] aborted\n", Fmt.Int(id)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:            Fmt.F("Send [%s] failed: %s\n", Fmt.Int(id), PkgErr.Msg(ec)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:            Fmt.F("Send [%s] failed: package version does not exist\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:            Fmt.F("Send [%s] failed: package version may not exist\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:            Fmt.F("Send [%s] failed: %s\n", Fmt.Int(id), PkgErr.Msg(ec)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:            Util.LogText(Fmt.F("Site %s is now reachable\n", q.site));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Send.m3:            Util.LogText(Fmt.F("Site %s is unreachable: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/ServerLog.m3:          Wr.PutText(t.wr, "## Date is " & FmtTime.DateLong(cal) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/ServerLog.m3:          ProcessText(t, "ServerLog: Lost writes!!!\n", Time.Now(), TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/ServerLog.m3:              Fmt.F("  %s, up %s days, %s:%02s ...\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/ServerLog.m3:                Wr.PutText(wr, "\n    ");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/ServerLog.m3:            Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:    Util.LogText(Fmt.F("%s %s(%s.%s) from %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:        Util.LogText(Fmt.F("%s: creating foreign entry\n", id));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:        Util.LogText(Fmt.F("%s: version present\n", id));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:        Util.LogText(Fmt.F("%s: failed -- %s\n", id, PkgErr.Msg(ec)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:            "%s: receive complete\n    pulled=%s unchanged=%s cached=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:              Fmt.F("           %s: %s\n", reps[i], PkgErr.Msg(cf[i]));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:      Util.LogText(Fmt.F("%s: no replicas available\n", id)); 
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:          Util.LogText(Fmt.F("%s: replicas failed --\n%s",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:          Util.LogText(Fmt.F("%s: commit error -- %s\n", id, PkgErr.Msg(ec))); 
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:          Util.LogText(Fmt.F("%s: commit failed all replicas --\n%s",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:      Util.LogText(Fmt.F("%s: all replicas failed\n", id)); 
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:      Util.LogText(Fmt.F("%s: prepare failed at %s -- %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:    RETURN Fmt.F("    fetched %s bytes, %s files in %s, avgRate=%s kbit/s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:      IF rcv = NIL THEN out := out & "none\n"; ELSE out := out & "\n"; END;
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:              Fmt.F("  Received %s(%s) from %s, finished %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:              Fmt.F("     pulled=%s unchanged=%s cached=%s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:              Fmt.F("  Receiving %s(%s) from %s, started %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:              Fmt.F("  Abandoned  %s(%s) from %s, started %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:      out := "Replica statistics ...\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/SiphonServer.m3:          out := out & "Replica " & reps[i] & " is unreachable\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:    OutPut("skulk (" & synchKindMsg[synchKind] & ") of all packages\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:          OutPut("synch sites already going on\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:           OutPut("problem with lock server: " & PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:      OutPut("calling remote sites\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                  OutPut(h.sitename & ": " & PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                                      PSLib.PathText(dirs[idir]) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                                      PSLib.PathText(dirs[idir]) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:            OutPut("can't synch: " & PSLib.PathText(dirs[idir]) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:      OutPut("end\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                      PSLib.PkgText(package) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:          OutPut(h.sitename & ": " & PkgErr.Msg(err) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:        OutPut("can't synch: " & PSLib.PkgText(package) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:    OutPut("end\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:              Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                  Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:          Wr.PutText(wr, "error on not shared package\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:          Wr.PutText(wr, Fmt.F("   %s\n", msg));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:          Wr.PutText(wr, Fmt.F(", %s\n", FmtTime.Short(e.lastModified)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:        Wr.PutText(wr, "\n  ");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:        Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                Wr.PutText(wr, "fingerprint mismatch\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:        Wr.PutText(wr, Fmt.F("manager host %s unknown\n", managedBy));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                      Wr.PutText(wr, "package deleted at locking site?\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                           "locking site doesn't have best version\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:        Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:        Wr.PutText(wr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:        Wr.PutText(wr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:            Wr.PutText(wr, "site ignored\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:            Wr.PutText(wr, "no sub-repository\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:            Wr.PutText(wr, "deleted entry\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:              Wr.PutText(wr, "not reachable (sub-repository exists)\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:              Wr.PutText(wr, "not reachable (no sub-repository)\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:              Wr.PutText(wr, "not reachable\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:            Wr.PutText(wr, Fmt.F(", %s\n", FmtTime.Short(e.lastModified)));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:                Wr.PutText(wr, "      no fingerprint\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:          Wr.PutText(log, Fmt.F("   asking %s to send version %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:              Wr.PutText(log, Fmt.F("   enqueue failed at %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:              Wr.PutText(log, Fmt.F("   enqueue failed at %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:        Wr.PutText(log, Fmt.F("sending version %s to %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:            Wr.PutText(log, Fmt.F("    enqueue failed to %s: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:    Wr.PutText(log, Fmt.F("   deleting package at local site\n"));
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/Skulker.m3:         Wr.PutText(log, Fmt.F("    local deletion failed: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:      ServerLog.WriteText (log, "Periodic statistics:\n" &
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:    ServerLog.WriteText(log, "Initializing packageserver\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:          ServerLog.WriteText (log, "Initialization failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:       log, "Local configuration (" & thisReplName & "):\n" &
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:        PSLib.LogIt("Database doesn\'t agree about local site");
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:    out := "       site=" & t.name & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:           "       locksrv=" & t.lockserver & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:           "       owner=" & t.owner & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:           "       defRep=" & PSLib.PathText(t.defaultRepository) & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:      out := out & "       ipPort=" & Fmt.Int(t.ipPort) & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:      out := out & "       siphon=" & t.siphonserver & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:                                    "       remote sites:\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:        out := out & "       Repository map:\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:          out := out & "         " & PSLib.DirText(p) & " -> " & rp.fn & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:            out := out & "             vol: " & l.head & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:        out := out & "       Export map:\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:          out := out & "         " & PSLib.DirText(p) & " -> " & v & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgsrv/src/StartPS.m3:    RETURN out & ")\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail ("backup removal not implemented\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        PutStdout(invoc & " complete\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Creating lock entry for " & PkgText(p) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                   PutWarning("package name still exists at remote site\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:             "        (perhaps an earlier deletion has yet to propagate)\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                   PutWarning(PkgErr.Msg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                 PutStdout("        package name not guaranteed unique\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Created and locked: " & key & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Removing lock entry for " & PkgText(p) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Removed\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Locking package " & PkgText(p) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Locked: " & key & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Unlocking " & PkgText(p) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Unlocked\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Checking lock entry for " & PkgText(p) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                                     & entry.owner.site & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Commit successful\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          PutStderr ("commit failed at all replicas\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                               & " (" & owner.site & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStderr ("package not checked out\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                         el[i].e.owner.site & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout("\nLocks at local site:\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout("\nLocks at foreign sites:\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        PutStdout("[" & p.foreignSites[nSite].name & "]\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout("Comparing with " & PkgText(p) & " on " & host & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      IF d.same THEN PutStdout("Packages are the same\n");  END;
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    PutStdout(Pathname.Join(dir, e.arc, NIL) & ": " & x & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout("Getting with " & PkgText(p) & " on " & d.host & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout ("Changed mode of " & arg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout ("Made local directory " & arg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout ("Made local link " & arg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout ("Fetched to new file " & arg & Rate() & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout ("Fetched to old file " & arg & Rate() & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout ("Deleted " & arg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStderr ("failed getting " & arg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutWarning ("local file " & arg & " is newer\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutWarning ("local file " & arg & " not in package\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                       & TextFromList (p.replicas) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout("Backup to be kept on " & TextFromList (p.backupHosts) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:            PutStdout("Backup unnecessary on " & sf.host & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStderr ("ship failed on all replicas\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout(str & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout("Committing changes at replicas\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        PutStdout("Wild commit succeeded at " & p.replicas[i] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:           warn := TRUE;  x := "Couldn\'t export link ";
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    x := x & fn & arg1 & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      Fail ("no backup hosts specified\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail ("invalid package name\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        Fail ("bad replica spec\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        Fail ("replica spec requires \"-i\" switch\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail(Site.ErrMsg(ec) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail ("bad host name spec\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        Fail("invalid switch\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail("invalid export link specification\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          PutWarning ("can\'t export link to non-existent file "
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:             & referent & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail ("bad export link spec\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                         & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    PutStdout("  Managed by: " & e.managedBy & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                       & "; pv=" & Fmt.Int (e.pendVN) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                 FmtTime.Long(e.lastModified) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                    PkgErr.Msg(cf[i]) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          PutStderr("unexpected local error: " & PkgErr.Msg(a) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          PutStderr (PkgErr.Msg(a) & " (" & hostname & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                      NetPath.ToRelFN(path) & " (" & hostname & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        Fail ("local host name unknown.\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    Fail ("working directory is empty or bad?\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail ("current directory is $HOME?\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    Fail ("working directory not writeable?\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutWarning ("create test failed at all replicas!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    PutStderr ("create test failed at all replicas!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail ("current package version not available!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      Fail ("no servers are available!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      Fail ("no such package at replicas!!\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    PutText(stderr, "Invalid packagetool option\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    PutText(stderr, invoc & " failed\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        Fail("file name expected after \"-file\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:          Fail("problem reading command file \"" & fn & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:    RETURN ch = ' ' OR ch = '\n' OR ch = '\t';
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:         PutStdout("Reported EOF\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:         PutStdout(PkgErr.Msg(e) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:        PutStdout(invoc & " aborted\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout("Renamed README to existing_README\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:                           userAuth & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      Wr.PutText(wr, "current owner " & userAuth & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStdout("Created new README file\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStderr ("can\'t find working directory\n");
/home/ftp/pub/m3/pkg/SRC-m3/pkgtool/src/PackageTool.m3:      PutStderr ("can\'t discover user name\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInCompose.m3:      IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInCompose.m3:        Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInCompose.m3:        pos := MiscUtils.RdFindChar(rd, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInCompose.m3:      Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInCompose.m3:      IF Rd.GetChar(rd) = '\n' THEN RETURN  END
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInCompose.m3:      IF Rd.GetChar(rd) = '\n' THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInCompose.m3:      Wr.PutText(Stdio.stderr, "Can\'t read composition sub-window form\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInCompose.m3:                         "Can\'t read composition window form: " & t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInDisplay.m3:  VAR start := MiscUtils.Find(self.body, 0, "\n%!");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInDisplay.m3:                           "no line beginning with \"%!\".");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/BuiltInDisplay.m3:      Wr.PutText(Stdio.stderr, "Can\'t read display window form\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:CONST WhiteExceptNL = MailUtilities.DefaultWS - SET OF CHAR{'\n'};
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          failure := "the " & prompt & " \"" & name & "\" doesn\'t exist";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          failure := "the " & prompt & " \"" & name & "\" is a bulletin board";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        failure := "invalid font name \"" & names[0] & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          Scan.Int(TerminatedText(rd, SET OF CHAR {'\n'}));
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          Scan.Int(TerminatedText(rd, SET OF CHAR {'\n'}));
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          t.displayFont := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          t.displayFontSize := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:            EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        t.autoFccFolder := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        t.deleteMessagesToFolder := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        IF Rd.GetChar(rd) = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          t.includeReplyString := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        t.printFilter := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          t.editorFilter := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          t.psViewFilter := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          t.psPrintFilter := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          Scan.Int(TerminatedText(rd, SET OF CHAR {'\n'}));
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:            Scan.Int(TerminatedText(rd, SET OF CHAR {'\n'})); (* JRM *)
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:            ResolveModel(TerminatedText(rd, SET OF CHAR {'\n'}), ModelNames)
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        RAISE Error("Damaged configuration file \"" & configName & "\".");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        RAISE Error("Error while reading configuration file \""
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:                         & configName & "\".");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        RAISE Error("Configuration file \"" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:                         configName & "\" not found.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        RAISE Error("Can't open configuration file \"" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:                         configName & "\": " & t);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:  CONST NY = ARRAY BOOLEAN OF TEXT {"N\n", "Y\n"};
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        Wr.PutText(wr, "Postcard " & version & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:                          & Fmt.Int(t.mailCheckInterval) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:                          & Fmt.Int(t.newsCheckInterval) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        Wr.PutText(wr, "Display font family: " & t.displayFont & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        Wr.PutText(wr, "Display font size: " & t.displayFontSize & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        Wr.PutText(wr, "Auto fcc folder: " & t.autoFccFolder & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:                          & t.deleteMessagesToFolder & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        Wr.PutText(wr, "Prefixed by: " & t.includeReplyString & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        Wr.PutText(wr, "Print filter: " & t.printFilter & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        Wr.PutText(wr, "Compose filter: " & t.editorFilter & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          wr, "PostScript view filter: " & t.psViewFilter & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          wr, "PostScript print filter: " & t.psPrintFilter & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:                          & Fmt.Int(t.purgeSaveMessages) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:        Wr.PutText(wr, "Scale factor: " & Fmt.Int(t.scale) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Config.m3:          & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:    Wr.PutText(wr, "To: " & to & "\nCc: " & cc);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:    IF NOT Text.Empty(fcc) THEN Wr.PutText(wr, "\nFcc: " & fcc);  END;
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:    Wr.PutText(wr, "\nSubject: " & subject);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:      Wr.PutText(wr, "\nIn-Reply-To: " & inReplyTo);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:    Wr.PutText(wr, "\n------\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:      IF Text.GetChar(body, Text.Length(body)-1) # '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:        Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:        IF startOfLine AND ( (c = '\n') OR (c = '-') ) THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:        startOfLine := (c = '\n');
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:        Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:    nlHeader := "\n" & header;        (* newline makes "Find" easier to use *)
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:    nlFieldName := "\n" & fieldname;
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:        IF c IN SET OF CHAR {':', ' ', '\t'} THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:      IF Text.GetChar(header, pos) = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MailUtilities.m3:        IF NOT (Text.GetChar(header, pos+1) IN SET OF CHAR {' ','\t'}) THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/MiscUtils.m3:  CONST White = SET OF CHAR{' ', '\n', '\t'};
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:              expr.openParen := InsertSx("(Text %" & mySymbol & " \"(\" )");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:              expr.strOpen := InsertSx("(Text  %" & mySymbol & " \"(\" )");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:              expr.strClose := InsertSx("(Text %" & mySymbol & " \")\" )");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:              expr.closeParen := InsertSx("(Text %" & mySymbol & " \")\" )");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:        RETURN "Syntax error: " & t & " \"" & symText & "\""
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:    CONST EndOfSym = SET OF CHAR { '(', ')', '!', '|', '&', '"', '\''} +
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:        | '(' => str := TerminatedText(rd, SET OF CHAR{'\n', ')'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:        | '\"' => str := TerminatedText(rd, SET OF CHAR{'\n', '"'});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:        | '\'' => str := TerminatedText(rd, SET OF CHAR{'\n', '\''});
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:        IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:          RAISE Error("Syntax error: newline isn\'t allowed inside a string arg");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:                RAISE Error("Syntax error: missing \")\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:                RAISE Error(StringAndSymbol("expected \")\" before"));
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:        Wr.PutText(t.filter.wr, "count " & exprText & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:                          "\"Max\" field and try again.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:              Wr.PutText(t.filter.wr, "summary -c " & exprText & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/NI.m3:      Wr.PutText(Stdio.stderr, "Can\'t read NI item template\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:        Wr.PutText(Stdio.stderr, AppName & ": can't contact display server\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      RAISE BadFilter("Use \"Set Configuration\" to define " &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                      "e.g. \"xterm -e vi\" or \"epochclient\".");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      Wr.PutText(Stdio.stderr, "Can\'t read configuration window form\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      IF (c = ' ') OR (c = '\n') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:       the remainder.  Stops at '\n' or EOF. *)
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:        subBuf [0] := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:        IF subBuf [subCount - 1] # '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:            WHILE Rd.GetChar (rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      SetStatusLine (cl, "Loading \"" & cl.openFolder & "\" ...",
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                  IF (subBuf [subPos] # ' ') AND (subBuf [subPos] # '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:    SetStatusLine(cl, "Found in \"" & cl.openFolder & "\"",
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("A folder named \"" & folder &"\" already exists.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t rescan this browser - it\'s not a folder.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:    IF NOT cl.confirm("Rescan the folder \"" & cl.openFolder & "\"?",
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t sort and pack this browser - " &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                       "it\'s not a folder.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t sort and pack a bulletin board.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:       NOT cl.confirm("Sort and pack the folder \"" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                      cl.openFolder & "\"?",
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t purge this browser - it\'s not a folder.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:    IF NOT cl.confirm("Purge the folder \"" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                      "\", retaining only " &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t remove this browser - it\'s not a folder.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t remove your inbox.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t remove your \"deleted messages\" folder.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      confirmText := "Remove the bulletin board folder \"" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                     cl.openFolder & "\"?";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      confirmText := "Remove and destroy the message folder \"" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                     cl.openFolder & "\"?";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:        SetStatusLine(cl, "Searching \"" & candidateFolder & "\" ...",
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:          SetStatusLine(cl, "Stopped after \"" & candidateFolder & "\"",
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:               "You can\'t move or delete from the NI browser; use \"copy\".");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:             "You can\'t move or delete from a bulletin board; use \"copy\".");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                   "You can\'t move or copy a message into a bulletin board.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      "You can\'t move or copy a message into the folder from which it came.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:            statusMsg := "Moving to \"" & destFolder & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:            statusMsg := "Copying to \"" & destFolder & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      cl.unlockedError("Can\'t reply to multiple messages.");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      Wr.PutText (Stdio.stderr, "Who are you?  Please define $USER\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:      Wr.PutText(Stdio.stderr, "Where do you live?  Please define $HOME.\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:       Wr.PutText(Stdio.stderr, AppName & ": can't contact display server\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                   "Error in \"-geometry\" or \"-display\" parameter");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                   & why & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                   & "resource not found\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:        Wr.PutText(Stdio.stderr, "Unknown option \"" & param & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/PostcardMain.m3:                "Usage:\n    Postcard [-geometry WxH+X+Y] [-display name]\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/Rescreen.m3:            windowTitle := "Rescreen \"" & windowTitle & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:          RAISE Error("\"" & fileName & "\" doesn't exist");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:          RAISE Error("\"" & fileName & "\": " & why);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:          RAISE Error("Can't open \"" & fileName & "\": " & why);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:          RAISE Error("\"" & fileName & "\" doesn't exist");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:          RAISE Error("Can't write \"" & fileName & "\": " & why);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:      RAISE Error("Couldn't run \"" & argv[0] & "\": " & t);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:    errText := "\"" & argv[0] & "\": ";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        RAISE Error("Error while writing text into \"" & mine & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        Wr.PutText(Stdio.stderr, "\"" & mailDirName & "\" doesn't exist\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:                   ": " & t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        RAISE Error("Folder \"" & folder & "\" not found")
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        RAISE Error("Folder \"" & folder & "\" not found")
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:      index := Text.FindChar(result, '\n', index + 1);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        Wr.PutText (wr, f.curMsg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        RAISE Error("Expected integer from NI process, received:\n" & line);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:    EXCEPT Rd.Failure => RAISE Error("Can't read \"" & fileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        RAISE Error("Can't open \"" & fileName & "\": " & why);
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        header := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        brief := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        body := "********----********\n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:                "The message \"" & fileName & "\" doesn't exist.\n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:                "group, the message might have expired or been cancelled.\n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:                "********----********\n";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        RAISE Error("Can't read \"" & fileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:    EXCEPT Rd.Failure => RAISE Error("Can't read \"" & fileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:            RAISE Error("Can't read \"" & msgList.head & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:      RAISE Error("Error while saving into \"" & toFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:    inReplyTo := "Message of " & dateField & "\n    from " & sender;
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:    inReplyTo := inReplyTo & "\n    " & msgidField;
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        body := "\n\n------- Forwarded Message" & plural & "\n\n";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        body := body & "\n\n------- Message " & Fmt.Int(i) & "\n\n";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:    body := body & "\n------- End of Forwarded Message" & plural & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:            Wr.PutText(wr, prefix & line & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:            Wr.PutText(wr, prefix & line & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:      RAISE Error("Error while reading \"" & fileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:        RAISE Error("Error while saving draft into \"" &
/home/ftp/pub/m3/pkg/SRC-m3/postcard/src/UnixMail.m3:                    DraftFileName(draftFile) & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:    IF c < ' ' OR c > '~' OR c = '(' OR c = ')' OR c = '\\' THEN
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      Wr.PutText(o.wr, Fmt.F("\\%03s", Fmt.Int(ORD(c), 8)));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      Wr.PutText(o.wr, " setfont\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:    Wr.PutText(o.wr, Fmt.F(") %s %s T\n", Fmt.Real(o.charX), Fmt.Real(o.charY)));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:          Wr.PutText(o.wr, Fmt.F("%%Page: %s %s\n", rpnStr, rpnStr));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:          Wr.PutText(o.wr, Fmt.F("(%s) StartPage\n", rpnStr));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:        Wr.PutText(o.wr, "NextColumn\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:        Wr.PutText(o.wr, Fmt.F("%%Page: %s %s\n", rpnStr, rpnStr));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:        Wr.PutText(o.wr, Fmt.F("(%s) StartPage\n", rpnStr));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      Wr.PutText(o.wr, "showpage\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:        IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      Wr.PutText(o.wr, "%%Trailer\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:          o.wr, Fmt.F("%%Pages: %s\n", Fmt.Int((o.pageNum + 1) DIV 2)));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:        Wr.PutText(o.wr, Fmt.F("%%Pages: %s\n", Fmt.Int(o.pageNum)));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      Wr.PutText(o.wr, "%%EOF\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      Wr.PutText(o.wr, Fmt.F("/%s /%s findfont %s scalefont def\n",
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:    Wr.PutText(o.wr, "%!PS-Adobe-3.0\n" (* now conforming *)
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:                       & "%%Pages: (atend)\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      Wr.PutText(o.wr, "%%Orientation: Landscape\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      Wr.PutText(o.wr, "%%Orientation: Portrait\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:    Wr.PutText(o.wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:    Wr.PutText(o.wr, "%%EndComments\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      o.wr, "%%BeginSetup\n" & "/T { moveto show } bind def\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & "/Box { moveto dup 0 exch rlineto\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & " exch 0 rlineto neg 0 exch rlineto closepath\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & "} bind def\n" & "/Center { dup stringwidth pop neg 2 div\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & " 4 -1 roll add 3 -1 roll moveto show\n" & "} bind def\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & "/StartPage {\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:        o.wr, Fmt.F(" %s 0 translate 90 rotate\n", Fmt.Real(o.physPageHeight)));
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      o.wr, Fmt.F(" 72 36 %s %s Box 0.8 setgray fill\n",
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & Fmt.F(" 72 36 %s %s Box 0.8 setgray fill\n",
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & Fmt.F(" %s 20 %s %s Box 0.9 setgray fill\n",
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & " 0 setgray\n" & "TitleFont setfont\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:    Wr.PutText(o.wr, ") Center\n" & "CommentFont setfont\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      o.wr, ") Center\n" & Fmt.F(" %s %s (", Fmt.Real(o.leftMargin + 36.0),
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:      o.wr, ") Center\n" & "PageFont setfont\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & Fmt.F(" %s exch %s exch Center\n",
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & Fmt.F(" %s %s translate\n", Fmt.Real(o.leftMargin),
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:                      Fmt.Real(o.bottomMargin)) & "} bind def\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & Fmt.F("/NextColumn { %s 0 translate } bind def\n",
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & "/CommentFont /Times-Bold findfont 12 scalefont def\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & "/TitleFont /Times-Roman findfont 12 scalefont def\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:              & "/PageFont /Helvetica-Bold findfont 30 scalefont def\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEPostScript.m3:    Wr.PutText(o.wr, "%%EndSetup\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEWr.m3:      Wr.PutChar(o.wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEWr.m3:        IF Text.GetChar(t, i) = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/FBEWr.m3:      IF c = '\n' THEN o.curPos := 0; ELSE INC(o.curPos); END;
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:	& "It can produce\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & "either text or PostScript output.\n"		
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & "Usage: " & program & " [options] [file]\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & "Options (first letter of each is enough):\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -caps      -- allow lower-case keywords\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -margin n  -- set right margin to n\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -offset n  -- set indentation offset to n\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -xcolumn n -- set comment column to n\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -src       -- use SRC-style formatting\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -eric      -- use Muller-style formatting\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -callspace -- write f (x, y) instead of f(x, y)\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -noalign   -- don\'t align declarations in columns\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -follow    -- format comments assuming they follow decls\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -break     -- same as '-whenbreak always'\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -whenbreak {always | early | late}\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & "            -- when to break long lines\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:	& " -text      -- select text output (default)\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & "These are PostScript-related options.  Except for -portrait,\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & "they cannot be abbreviated.\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -ps        -- select PostScript output\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -portrait  -- print one-column portrait mode.\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & "               default is two-column landscape\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -bf font   -- font for body text (default: Times-Roman10)\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -kf font   -- font for keywords (Helvetica7)\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -bif font  -- font for built-in identifiers (Times-Roman8)\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -pf font   -- font for procedure names (Times-Bold10)\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -cf font   -- font for comments (Times-Italic10)\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -fcf font  -- font for fixed-format comments (Courier-Oblique9)\n"
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        & " -ff font   -- font for text and char literals (Courier9)\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        Wr.PutText (stderr, "Error in parsing " & argvSource & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        Formatter.PutChar(output, '\001');
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:        Formatter.PutChar(output, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/Main.m3:      Wr.PutText(stderr, "Formatting failed -- " & e.info & ".\n");
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/NewFormatter.m3:    IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/NewFormatter.m3:    IF ch^ = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/NewFormatter.m3:    IF mode = Mode.Writing THEN t.fbe.PutChar('\n',pos.font) END;
/home/ftp/pub/m3/pkg/SRC-m3/pp/src/NewFormatter.m3:      IF mode = Mode.Writing THEN t.fbe.PutChar('\n',pos.font) END;
/home/ftp/pub/m3/pkg/SRC-m3/rehearsecode/src/RehearseCode.m3:        Wr.PutText(typescriptWr, Fmt.F("Reloading file %s ...\n",
/home/ftp/pub/m3/pkg/SRC-m3/rehearsecode/src/RehearseCode.m3:              Fmt.F("*** OSError.E on file %s\n", view.filename));
/home/ftp/pub/m3/pkg/SRC-m3/rehearsecode/src/RehearseCode.m3:                Fmt.F("procedure annotation %s not in file %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/rehearsecode/src/RehearseCode.m3:        "usage: RehearseCode filename1 [... filename4]\n");
/home/ftp/pub/m3/pkg/SRC-m3/rehearsecode/src/RehearseCode.m3:            typescriptWr, Fmt.F ("Loading file %s ...\n", source));
/home/ftp/pub/m3/pkg/SRC-m3/rehearsecode/src/RehearseCode.m3:              Fmt.F ("RehearseCode: Error trying to open file %s\n", source));
/home/ftp/pub/m3/pkg/SRC-m3/rehearsecode/src/RehearseCode.m3:              typescriptWr, Fmt.F ("*** Error trying to open file %s\n", source));
/home/ftp/pub/m3/pkg/SRC-m3/rehearsecode/src/RehearseCode.m3:      Wr.PutText (Stdio.stderr, "RehearseCode: no source files found\n");
/home/ftp/pub/m3/pkg/SRC-m3/replayheap/src/Main.m3:    Wr.PutText (stdout, Fmt.F ("%s: %s, %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/replayheap/src/Main.m3:    Wr.PutText (Stdio.stderr, "usage: replayheap [-showheap prog] datafile\n");
/home/ftp/pub/m3/pkg/SRC-m3/sharedboard/boardclient/src/Win.m3:      nextNL := Text.FindChar (text, '\n', lastNL+1);
/home/ftp/pub/m3/pkg/SRC-m3/sharedboard/calendar/src/Calendar.m3:CONST UsageMessage = "Usage: Calendar <board name> [<server name>] \n";
/home/ftp/pub/m3/pkg/SRC-m3/sharedboard/calendar/src/Calendar.m3:          & Params.Get (2) & "\n", Stdio.stderr); 
/home/ftp/pub/m3/pkg/SRC-m3/sharedboard/calendar/src/Calendar.m3:      NetObj.Error =>  IO.Put ("Error importing board server \n",
/home/ftp/pub/m3/pkg/SRC-m3/sharedboard/calendar/src/Calendar.m3:        & text & "\n", Stdio.stderr); 
/home/ftp/pub/m3/pkg/SRC-m3/sharedboard/calendar/src/Calendar.m3:      BoardServer.Failed (text) => IO.Put (text & "\n", Stdio.stderr); 
/home/ftp/pub/m3/pkg/SRC-m3/shownew/src/ZIO.m3:    IF (xx <= 0) THEN Wr.PutChar (Stdio.stderr, '\n');  xx := 10; END;
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "&Marks\tLB",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "&Lines\tMB",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "&Selections\tRB",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "&Arcs \t^A",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "&Rectangles\t^R",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "&Groups\t^X / ^Y",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "&Copy\t^C",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "&Delete\t^D / ^U",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:    "Mo&ve\t^V",
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "up transitions, then the select mode is \"point\" selection.  "
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "is depressed, then the mode is \"sweep\" selection.  "
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "In \"point\" mode, any items whose bounding boxes contain "
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "In \"sweep\" mode, any items whose bounding boxes are contained "
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilHelp.m3:  & "\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilRd.m3:  EOF = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilRd.m3:      SilError.Put (info, "unable to open \"", filename, "\" for reading");
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilRd.m3:        SilError.Put (info, "problem closing \"", t.name, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilRd.m3:    WHILE (t.ch = ' ') OR (t.ch = '\n') OR (t.ch = '\t') OR (t.ch = '\r') DO
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilRd.m3:      | '\n', EOF => (* end of line *)
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilRd.m3:      | ' ', '\t', '\r' => (* white space *)
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilRd.m3:      SilError.Put (info, "problem reading \"", t.name, "\"");
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilString.m3:    IF (ch = '\010') THEN
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilString.m3:    ELSIF (ch = '\r') OR (ch = '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilWindow.m3:    Filter  = "Sil Files\000*.sil\000All Files (*.*)\000*.*\000\000";
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilWindow.m3:    fn[0] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilWindow.m3:    Filter = "Sil Files\000*.sil\000All Files (*.*)\000*.*\000\000";
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilWindow.m3:    fullFileName[0] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilWindow.m3:      fileTitle[0] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilWindow.m3:      fileTitle [MIN (LAST(fileTitle), Text.Length(t.fileName))] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilWr.m3:    Wr.PutChar (t.wr, '\"');
/home/ftp/pub/m3/pkg/SRC-m3/sil/src/SilWr.m3:    Wr.PutText (t.wr, "\" ");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:    Wr.PutText(stderr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:          Wr.PutText(stderr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:          Wr.PutText(stderr, "can't parse input\n");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:        self.error(Fmt.F("\"%s\" should be a symbol", SxToText(e)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:       RETURN self.error(Fmt.F("\"%s\" should be a list", SxToText(e)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:       EVAL self.error(Fmt.F("\"%s\" should be an integer", SxToText(e)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:        EVAL self.error(Fmt.F("\"%s\" should be a float", SxToText(e)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN self.error(Fmt.F("\"%s\" should be a string", SxToText(e)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      Wr.PutText (stdout, ")\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      Wr.PutText (stdout, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN interp.error("\"car\" of empty list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN interp.error("\"cdr\" of empty list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN interp.error("can't take \"caar\" of empty list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:                   "can't take \"caar\" of list when first element is nil")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:            "can't take \"caar\" of list when first element isn't a list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN interp.error("can't take \"cadr\" of empty list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN interp.error("can't take \"cadr\" of too short list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN interp.error("can't take \"cdar\" of empty list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:                   "can't take \"cdar\" of list when first element is nil")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:            "can't take \"cdar\" of list when first element isn't a list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN interp.error("can't take \"cddr\" of empty list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      RETURN interp.error("can't take \"cddr\" of too short list")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:    Sx.SetReadMacro (syntax, '\'', quoteParser);
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:    Sx.SetReadMacro (backQuoteSyntax, '\'', quoteParser);
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:  SQUOTE        = '\'';
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:  SLASH         = '\\';
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:    IF ch = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      Wr.PutText (wr, "\\n")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:    ELSIF ch = '\t' THEN
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      Wr.PutText (wr, "\\t")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:    ELSIF ch = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      Wr.PutText (wr, "\\r")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:    ELSIF ch = '\f' THEN
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      Wr.PutText (wr, "\\f")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      Wr.PutText (wr, "\\\\")
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:      Wr.PutText (wr, Fmt.F ("\\%03s", Fmt.Int (ORD (ch), 8)))
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLisp.m3:    RETURN ' ' <= ch AND ch <= '~' OR '\241' <= ch AND ch <= '\377'
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:             Fmt.F("\"%s\": non-numeric argument to a numeric operator",
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:    | NULL => RETURN interp.error("Can't \"float\" nil");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:        interp.error(Fmt.F("\"%s\" should be an integer", SLispClass.SxToText(i)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:    | NULL => RETURN interp.error("Can't \"truncate\" nil");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:        interp.error(Fmt.F("\"%s\" should be a real", SLispClass.SxToText(r)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:    | NULL => RETURN interp.error("Can't \"round\" nil");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:        interp.error(Fmt.F("\"%s\" should be a real", SLispClass.SxToText(r)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:    | NULL => RETURN interp.error("Can't \"sqrt\" nil");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:      RETURN interp.error(Fmt.F("\"%s\" should be a real", SLispClass.SxToText(r)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:    | NULL => RETURN interp.error("Can't \"sin\" nil");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:      RETURN interp.error(Fmt.F("\"%s\" should be a real", SLispClass.SxToText(r)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:    | NULL => RETURN interp.error("Can't \"cos\" nil");
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:               Fmt.F("\"%s\" should be a real", SLispClass.SxToText(r)));
/home/ftp/pub/m3/pkg/SRC-m3/slisp/src/SLispMath.m3:      RETURN interp.error(Fmt.F("\"%s\" should be a Random.T",
/home/ftp/pub/m3/pkg/SRC-m3/slisp/tests/src/Main.m3:          Wr.PutText (stdout, "\n-> ");
/home/ftp/pub/m3/pkg/SRC-m3/smalldb/src/SmallDB.m3:      Wr.PutText(versionWriter, Fmt.Int(t.version) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/smalldb/src/SmallDB.m3:    out := "   Stable storage status for directory \"" & t.dirname & "\"\n";
/home/ftp/pub/m3/pkg/SRC-m3/smalldb/src/SmallDB.m3:              & ", size " & Fmt.Int(t.snapshotByteCnt) & " bytes.\n";
/home/ftp/pub/m3/pkg/SRC-m3/smalldb/src/SmallDB.m3:         FmtTime.Long(t.lastSnapshot) & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/smalldb/src/SmallDB.m3:      out := out & "      No snapshot has been made in this run.\n";
/home/ftp/pub/m3/pkg/SRC-m3/smalldb/src/SmallDB.m3:               & Fmt.Int(t.logByteCnt) & " bytes.\n";
/home/ftp/pub/m3/pkg/SRC-m3/smalldb/src/SmallDB.m3:         FmtTime.Long(t.lastLog) & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/smalldb/src/SmallDB.m3:      out := out & "      No log entries have been written in this run.\n";
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solitaire.m3:      THEN RETURN '\000';
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solitaire.m3:    WHILE (ch = ' ') OR (ch = '\n') OR (ch = '\t') DO ch := GetC (rd); END;
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solitaire.m3:      "Need to provide 52 cards on stdin.\n"
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solitaire.m3:    & "Each card is of the form n[D,S,D,H], 1 <= n <= 13\n");
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solitaire.m3:    Wr.PutText(Stdio.stderr, "solitaire: bad -display parameter\n");
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solitaire.m3:          Stdio.stderr, "solitaire: couldn't contact window system\n")
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:        Fmt.F("Win with %s moves.  (%s (%s) layouts, %s htable entries)\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:          Put(Fmt.F("%s: %s -> %s\n", FmtCard(card), FmtGroup(src),
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:            Put("No moves (hence no winning move)\n", flush := TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:            "  No winning move on this branch.  (%s layouts, %s htable entries)\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:                "starting a depth first search:  %s cards on foundation\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:            Put("...\n", flush := TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:      Put("\n", flush := TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:        Put(Fmt.F("No winning move.     (%s layouts, %s htable entries)\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:            "Give Up. No win after %s layouts generated.  (%s htable entries)\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:            Fmt.F("    level %s, %s layouts examined, htable size at %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:      Put(Fmt.F("No winning move.     (%s layouts, %s htable entries)\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:      Put(Fmt.F("    %s layouts examined, htable size at %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:            "  Give up in this subtree after %s layouts.  (%s htable entries)\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:            "Give up. No win after %s layouts generated.  (%s htable entries)\n",
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve.m3:    IF veryVerbose THEN Put(txt & "\n", flush := TRUE); END;
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve2.m3:    Put ("----- new path --- ", Fmt.Int (n), " moves ---\n");
/home/ftp/pub/m3/pkg/SRC-m3/solitaire/src/Solve2.m3:      Put ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:(* \subsection{Driving the stable object}
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \begin{itemize}
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \item[s] Initialize the stable state of the Fibonacci object.  The
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \item[c] Crank the Fibonacci object.  The application  prompts the
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \item[d] Dispose of the stable state (terminate stability).
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \item[i] Initialize the stable state (restabilize).  Use this command
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \item[k] Checkpoint the object.  Make sure that the object is stable
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \item[q] Quit the example (terminate the application).
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \end{itemize}
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:                 "usage: example <path of stable storage>\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:                   Fmt.F("recovered fib from %s\n", stablePath));
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:        Wr.PutText(Stdio.stdout, "brand new fib!\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:                     Fmt.F("the result is %s\n", 
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:                     Fmt.F("(%s cranks this session)\n", 
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:          Wr.PutText(Stdio.stdout, "stability cancelled\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:                       Fmt.F("recovered state from %s\n", stablePath));
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:            Wr.PutText(Stdio.stdout, "state is now stable\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:                                  "bombed out with stable storage error\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:    Wr.PutText(Stdio.stdout, "bye!\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Example.m3:   \comment{{ 
/home/ftp/pub/m3/pkg/SRC-m3/stable/example/src/Fib.m3:(* \subsection{Object Implementation} *)
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/Log.m3:      Wr.PutText(stdout, "\n"); Wr.Flush(stdout);
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/LogManager.m3:(* \subsection{produce filenames}
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/LogManager.m3:(* \subsection{Public Methods}
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/LogManager.m3:(* \subsection{Utilities}
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableError.m3:    Wr.PutText(Stdio.stderr, "****\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableError.m3:    Wr.PutText(Stdio.stderr, "**** fatal stable object error\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableError.m3:    Wr.PutText(Stdio.stderr, "****\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableError.m3:    Wr.PutText(Stdio.stderr, "****       " & msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableError.m3:    Wr.PutText(Stdio.stderr, "****\n\n\nProgram aborted\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableLog.m3:      text[len] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableRep.mg:   objects that is independent of {\tt Data.T}.
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableRep.mg:(* \subsection{Initialization Procedures} *)
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableRep.mg:(* \subsection{Procedure Init}
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableRep.mg:(* \subsection{Procedure Recover}
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableRep.mg:(* \subsection{Procedure Checkpoint}
/home/ftp/pub/m3/pkg/SRC-m3/stable/src/StableRep.mg:(* \subsection{Procedures Read- and WriteCheckpoint}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:   \begin{enumerate}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:   \item   Manipulating a stable test object:
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                 \begin{itemize}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                 \item Reset the stable object (using "LogManager.T.cleanup()"),
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                 \item initialize it (using static initializations),
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                 \item first modification,
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                 \item second modification,
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                 \item write a checkpoint, or cleanup (when testing cleanup crashes, see below)
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                 \item terminate.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                 \end{itemize}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:    \item  Check whether a checkpoint and log read leads to an object that
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:    \end{enumerate}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\subsection{Testcases}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\subsubsection{Normal operation}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:Use {\bf (0)} to let the program run without crash.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\subsubsection{Crashes outside}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\begin{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(-1)]     Terminate before clients initialisation.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(999)] Terminate just before normal client termination.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\end{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\subsubsection{Bootstrapping}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\begin{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(101-106)]Crashes during the first checkpoint (see next subsection
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\end{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\subsubsection{Crashes during Checkpointing}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\begin{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(201)]	Crash during renaming the checkpoint to the backup name.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(202)]	Crash during writing the new checkpoint.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(203)]	Crash during renaming the new checkpoint to the final name.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(204)]	Crash during truncating the log.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(205)]	Crash during deleting the backup checkpoint.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(206)]	Crash {\em after} all checkpoint actions.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\end{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:All these must be recovered without loss of data (i.e.\ without loosing
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\subsubsection{Crashes in client code}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\begin{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(301)] Client crashes are simulated between the two modifications
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\end{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\subsubsection{Crashes in update methods}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:in the first update method following the "301" crash point (i.e.\ before
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\begin{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(401)] Crash occurs during writing to the log {\em before} executing
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(402)] Like "401" but {\em after} the super call and {\em before} the
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(403)] Crash occurs {\em inside} the super call.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\end{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\subsubsection{Crashes while cleaning up}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:before terminating (such there is a checkpoint {\em and} a redo-log to
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\begin{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(501)]         Crash before deleting checkpoint.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\item[(502-503)]Crash after deleting checkpoint and after deleting
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:\end{description}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:  Usage = "Test [-tmp] [-verbose] [check] [CrashPointNumber]\n"
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:(* \subsection{Testclient} *)
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:    IO.Put("Running test "); IO.PutInt(crash); IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:(* \paragraph{Testclient} Allocate a stable object and modify it twice.
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:   be set {\em after} initialization in this cases. This is done before the
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:   call to "Checkpoint()". Values of "crash" in 401..403 have to be set {\em after}
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:        Failed("state should not be recovered after dispose\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:        Failed("state should not be modified after dispose\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:        Failed("state shoule not be modified after restabilization\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:(* \subsection{Check Leftovers from "Client()"} *)
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:    IO.Put("Test failed: "&msg&"\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:    IO.Put("\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:    IO.Put("passed\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:(* \subsection{Parsing the parameters} *)
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:(* \subsection{Main of test program} *)
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:  | WrongUsage=> IO.Put(Usage); IO.Put("\n"); Process.Exit(2);
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                &StableError.ToText(err)&"\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/Main.m3:                &StableError.ToText(err)&"\n");
/home/ftp/pub/m3/pkg/SRC-m3/stable/test/src/TestObj.m3:              c, vc      : CHAR        := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/AstToType.m3:(* \subsection{Procedure Convert}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/AstToType.m3:(* \subsection{Conversion from M3AST type to Type.T}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:(* \subsection{List of additional Imports}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:(* \subsection{Procedure Do}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:   \paragraph{Parameters}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:   \paragraph{Algorithm}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:(* \subsubsection*{TypeDo}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:(* \subsubsection*{ParsePragma}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:(* \subsection{Procedure CheckStableType}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:   \begin{enumerate}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:   \item  Be an object type
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:   \item  (NOT CHECKED YET) Not update method can have a procedure type
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:   \end{enumerate}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:(* \subsection{Procedure CheckBrands}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:(* \subsection{Procedure GenStableImpl}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:      Formatter.PutText(modWr, "BEGIN\n");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:(* \subsection{Procedure BuildMethods}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenCode.m3:   be the same as the length of "umethods" (i.e.\ no undeclared
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Name preambles} The following constants are used to alter
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Utility procedures and abreviations}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Generate procedure calls}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Procedure Header}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Procedure Revealation}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Procedure Surrogates}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      PutLine(f, "              \"can not flush log (\"& StableError.ToText(err) ");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      PutLine(f, "              & \") in dir \" & self.nm);");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Procedure SurrBody}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:   the three parts of this procedure. {\em Prolog:} Output the
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:   call. {\em Parameter saving:} Output recording calls for every
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:   parameter of the method. {\em Supercall} Output the call to
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:   the original update method. {\em Epilog:} Output the commit
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Procedure Dispatcher}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\nPROCEDURE ReplayLog(o: T; log: Rd.T) =");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n  BEGIN");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n    TRY");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n      LOOP");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:        "\n        CASE VAL(StableLog."
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n        END (*CASE*)");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n      END (*LOOP*)");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n    EXCEPT");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n     ELSE");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n    END;");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:      Put(f, "\n  END ReplayLog;\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Procedure ReplayStubs}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:   {\em Generate procedure header} generates the header of the
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:   {\em Variable Deklarations:} For each parameter of the
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:   type than the parameter). {\em Read in Values:} generate
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:   calls to read each such parameter from the log. {\em Super call:}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:        Put(f, "=\n");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:                 & Atom.ToText(methods[i].name) & ";\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Procedure Checkpoint}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Marshalling Procedures}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenModuleCode.m3:(* \subsection{Define the signature of replay stubs}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenTypeCode.m3:(* \subsection{Produce type specification text}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenTypeCode.m3:              text := "BRANDED \"" & Atom.ToText(ref.brand) & "\" ";
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenTypeCode.m3:                RETURN ToText(o.super) & " " & text & "OBJECT\n"
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenTypeCode.m3:                         & FieldsToText(o.fields) & "\nMETHODS\n"
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenTypeCode.m3:                         & MethodsToText(o.methods) & "\nEND";
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenTypeCode.m3:      IF notFirst THEN text := text & ";\n"; END;
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenTypeCode.m3:(* \subsection{Procedure ProcHeader}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/GenTypeCode.m3:(* \subsection{Procedure QidToText}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/ImportList.m3:(* \subsection{Producing import lists} The proceuderes "Import..." maintain
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/ImportList.m3:(* \subsection{Procedure Add} Add an element "intf" to a import list. *)
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/ImportList.m3:(* \subsection{Procedure ToText} Generate a comma separated list of
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/Main.m3:(* \subsection{Procedure DoRun}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/Main.m3:(* \subsection{Startup} *)
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/StablegenArgs.m3:(* \subsection{Procedure Get}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/StablegenArgs.m3:(* \subsection{Initialisation}
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/StablegenError.m3:    Wr.PutText(Stdio.stderr, msg&"\n");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/StablegenError.m3:    Wr.PutText(Stdio.stderr, msg&"\n");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/StablegenError.m3:    Wr.PutText(Stdio.stderr, msg&"\n");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/StablegenError.m3:    Wr.PutText(Stdio.stderr, "stablegen: aborted\n ");
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/Type.m3:              text := "BRANDED \"" & Atom.ToText(ref.brand) & "\" ";
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/Type.m3:                RETURN ToText(o.super) & " " & text & "OBJECT\n"
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/Type.m3:                         & FieldsToText(o.fields) & "\nMETHODS\n"
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/Type.m3:                         & MethodsToText(o.methods) & "\nEND";
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/Type.m3:      IF notFirst THEN text := text & ";\n"; END;
/home/ftp/pub/m3/pkg/SRC-m3/stablegen/src/Value.m3:    | Txt (text) => RETURN "\"" & text.val & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/AstToType.m3:          " \n not a subtype of NetObj.T or opaque or " &
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/AstToType.m3:          "NetObj.T.\n       No stubs generated: default stubs exist.");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/CodeForType.m3:              text := "BRANDED \"" &  Atom.ToText(ref.brand) & "\" ";
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/CodeForType.m3:              RETURN ToText(o.super) & " " & text & "OBJECT\n" &
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/CodeForType.m3:                  "\nMETHODS\n" & MethodsToText(o.methods) & "\nEND";
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/CodeForType.m3:      IF notFirst THEN text := text & ";\n"; END;
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/IntfStubCode.m3:      ";\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/IntfStubCode.m3:      Formatter.PutText(intWr, ";\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/IntfStubCode.m3:      Formatter.PutText(intWr, ";\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:       StubUtils.FileName(typeName) & ";\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:      & ";\n\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:      Formatter.PutText(modWr, "};\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\nPROCEDURE Invoke(");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n    c: StubLib.Conn;");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n    obj: NetObj.T;");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n    rep: StubLib.DataRep;");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n    stubProt: StubLib.StubProtocol)");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n    RAISES {NetObj.Error, Rd.Failure,");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n            Wr.Failure, Thread.Alerted} =");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n  VAR t := NARROW(obj, " & 
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n  BEGIN");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n    IF stubProt # Protocol" & 
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n    TRY");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n      CASE StubLib.InInt32(c, rep) OF");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n      ELSE");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n        StubLib.RaiseUnmarshalFailure();");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n      END;");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n    EXCEPT");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:      Formatter.PutText(modWr, "\n    | " & QidToText(e.qid, ".") );
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:      Formatter.PutText(modWr, "\n        StubLib.StartResult(c);");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:                        "\n        StubLib.OutInt32(c, ORD(ReturnCodes." 
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:        Formatter.PutText(modWr, "\n        ");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:    Formatter.PutText(modWr, "\n  END Invoke;\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:      Formatter.PutText(modWr, "=\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/ModuleStubCode.m3:                     Atom.ToText(methods[i].name) & ";\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/StubCode.m3:     Formatter.PutText(modWr, "BEGIN\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/StubCode.m3:     Formatter.PutText(modWr, "), Invoke);\n");
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/StubGenTool.m3:            "Invalid argument \"" & strings[i] &"\".  " &
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/StubUtils.m3:    Wr.PutText(stubchatter, "stubgen: " & text & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/Type.m3:              text := "BRANDED \"" &  Atom.ToText(ref.brand) & "\" ";
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/Type.m3:              RETURN ToText(o.super) & " " & text & "OBJECT\n" &
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/Type.m3:                  "\nMETHODS\n" & MethodsToText(o.methods) & "\nEND";
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/Type.m3:      IF notFirst THEN text := text & ";\n"; END;
/home/ftp/pub/m3/pkg/SRC-m3/stubgen/src/Value.m3:    | Txt (text) => RETURN "\"" & text.val & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynParse.m3:      SynWr.Char(swr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynParse.m3:	SynWr.Char(swr, '\n', loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:      IF z.lookAheadChar='\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:    IF GetChar(sc) # '\'' THEN
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:      SyntaxMsg(sc, "closing \' expected", "");
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:      WHILE LookChar(sc) # '\"' DO
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:      ELSIF char = '\'' THEN
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:      ELSIF char = '\"' THEN
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:          SynWr.Char(sc.swr, '\"', loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:          SynWr.Char(sc.swr, '\"', loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:      IF (Rd.CharsReady(sc^.input^.rd)>0) OR (ch#'\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:      SynWr.Char(sc.swr, '\n', loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:      SynWr.Char(sc.swr, '\n', loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:    SynWr.Char(sc.swr, '\n', loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:    SynWr.Char(sc.swr, '\n', loud:=TRUE);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:    SetChar(sc, '\"', CharacterClass.ReservedCharCase);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:    SetChar(sc, '\'', CharacterClass.ReservedCharCase);
/home/ftp/pub/m3/pkg/SRC-m3/synex/src/SynScan.m3:    SetChar(sc, '\\', CharacterClass.SpecialCharCase);
/home/ftp/pub/m3/pkg/SRC-m3/tcl/test/src/src/TclCTest.m3:      s := TclC.AssembleCmd (buf, TtoS (Rd.GetLine (Stdio.stdin) & "\n"));
/home/ftp/pub/m3/pkg/SRC-m3/tcl/test/src/src/TclCTest.m3:            Wr.PutText (Stdio.stdout, CopyStoT (i.result) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/tcl/test/src/src/TclCTest.m3:            Wr.PutText (Stdio.stderr, "error: " & CopyStoT (i.result) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/tcl/test/src/src/TclCTest.m3:					& Fmt.Int (status) & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/tcl/test/src/src/TclTest.m3:      s := buf.assemble (Rd.GetLine (Stdio.stdin) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/tcl/test/src/src/TclTest.m3:          Wr.PutText (Stdio.stdout, i.getResult () & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/tcl/test/src/src/TclTest.m3:            Wr.PutText (Stdio.stderr, "error: " & i.getResult () & "\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/tcp/src/WIN32/TCP.m3:    (*IO.Put("TCP:  err = " & Fmt.Int(err) & "\n");*)
/home/ftp/pub/m3/pkg/SRC-m3/tcp/src/common/ConnMsgRW.m3:   The {\it alignment} of a byte in a sequence is its index modulo
/home/ftp/pub/m3/pkg/SRC-m3/tcp/src/common/ConnMsgRW.m3:(* The {\it current fragment} of "rd" is the fragment containing
/home/ftp/pub/m3/pkg/SRC-m3/tempfiles/src/TempFiles.m3:                       "Warning: failed to delete \"" & t & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "*LeftFrame.Buttons.NewGame.translations: #augment \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "*LeftFrame.Buttons.Pause.translations: #override \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "*LeftFrame.Buttons.Quit.translations: #augment \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "*LeftFrame.Buttons.Scores.translations: #augment \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "*LeftFrame.Buttons.Start.translations: #override \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Expose>: Refresh() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      !Shift<Btn1Down>: RotateCCW() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      !<Btn1Down>: MoveLeft() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      !Shift<Btn3Down>: RotateCW() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      !<Btn3Down>: MoveRight() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>space: Drop() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>h: MoveLeft() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>q: Quit() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>p: Pause() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>s: Start() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>r: NewGame() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>Left: MoveLeft() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>j: RotateCW() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>Down: RotateCW() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>k: RotateCCW() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>Up: RotateCCW() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "      <Key>l: MoveRight() \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "*ScoreFrame.ScorePanel.Close.translations: #augment \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:    "*ScorePanel.Close.translations:        #augment \\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                    "tetris: can\'t read score file: " &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                    " Run with \'-noscore\' to avoid this message.\n");
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                    "tetris: can\'t write score file: " &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                    " Run with \'-noscore\' to avoid this message.\n");
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:      Wr.PutText (wr, high_scores[i].name & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                      Fmt.Int (high_scores[i].score) & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                      Fmt.Int (high_scores[i].rows) & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                      Fmt.Int (high_scores[i].level) & "\n" &
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                      high_scores[i].date & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                       "Hmm. I got a Refresh() for an unrecognized window!\n")
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:  SetArgT (args, count, XtN.label, "        TETRIS\nX11R4 + Modula-3\n     entertainment");
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                                     TtoS("\252\000"), 2, 2);
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                          TtoS("\223\000"), 2, 2);
/home/ftp/pub/m3/pkg/SRC-m3/tetris/src/Main.m3:                              " [ -noscore] [ -score ] [ -boxsize [<n>]\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/vbt/BatchUtil.m3:   %-4d e %-4d n %-4d s %-4d\n"; TintFormat = "PaintTint: w %-4d e %-4d n
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/vbt/BatchUtil.m3:   %-4d s %-4d\n"; TextureFormat = "PaintTexture: w %-4d e %-4d n %-4d s
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/vbt/BatchUtil.m3:   %-4d\n"; TextFormat = "PaintText: w %-4d e %-4d n %-4d s %-4d\n";
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/vbt/BatchUtil.m3:   BitmapFormat = "PaintBitmap: w %-4d e %-4d n %-4d s %-4d\n"; TrapFormat
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/vbt/BatchUtil.m3:   = "PaintTrap: w %-4d e %-4d n %-4d s %-4d\n"; ExtensionFormat =
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/vbt/BatchUtil.m3:   "PaintExtension: w %-4d e %-4d n %-4d s %-4d\n"; ScrollFormat = "Scroll:
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/vbt/BatchUtil.m3:   w %-4d e %-4d n %-4d s %-4d\n"; VAR start, end: INTEGER; p:
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/vbt/VBTRep.m3:      (* expand br by (rect \ v^.domain) intersect v^.oldDomain. Return TRUE
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:        stderr, Fmt.FN ("%s = %s (%s) + %s (%s) -> %s (%s)\n",
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:		  f {'\'', ' ', Latin1Key.apostrophe, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'\'', '\'', Latin1Key.acute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'A', '\'', Latin1Key.Aacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'E', '\'', Latin1Key.Eacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'I', '\'', Latin1Key.Iacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'O', '\'', Latin1Key.Oacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'U', '\'', Latin1Key.Uacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'Y', '\'', Latin1Key.Yacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'a', '\'', Latin1Key.aacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'e', '\'', Latin1Key.eacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'i', '\'', Latin1Key.iacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'o', '\'', Latin1Key.oacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'u', '\'', Latin1Key.uacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/split/ComposeKey.m3:                  f {'y', '\'', Latin1Key.yacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinContext.m3:             The same note can be found in "msdev\lib\win32api.csv" and
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinContext.m3:             "mstools\lib\win32api.csv", two Excel spreadsheets that come on 
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:      IO.Put ("WinPixmap.T {\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:      IO.Put ("  id := " & Fmt.Int (pm.id) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:      IO.Put ("  depth := " & Fmt.Int (pm.depth) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:      IO.Put ("  bounds := " & Fmt_Rect(pm.bounds) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:        THEN IO.Put ("  st := a monochrome screen type\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:        ELSE IO.Put ("  st := a color screen type\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("WinScrnPixmap.PixmapRecord{\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("  hbmp   := " & Fmt_Addr (pmr.hbmp)   & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("  domain := " & Fmt_Rect (pmr.domain) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("}\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:      IO.Put ("could not get dimensions of bitmap!\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("ScrnPixmap.Raw: \n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("   depth = " & Fmt.Int (pm.depth) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("   bounds = {" & Fmt_Rect (dom) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("   bitsPerPixel = " & Fmt.Int (pm.bitsPerPixel) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("   wordsPerRow = " & Fmt.Int (pm.wordsPerRow) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("   One row of pixels from the middle:\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:      IO.Put ("   byteOrder = MSBFirst\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:      IO.Put ("   byteOrder = LSBFirst\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:    IO.Put ("   westRounded = " & Fmt.Int (pm.westRounded) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinScrnPixmap.m3:      IO.Put ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:              & Fmt.Int (rect.bottom - rect.top) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:            "  ts= " & Fmt.Int (ts) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:    DEBUG ("WARNING: WinTrestle.Release is not yet implemented \n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:DEBUG ("waiting for result...\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:DEBUG ("done.\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:DEBUG ("  dom = "); PrintRect (ToRect (rc));  DEBUG ("\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:    IF (hdc # info.hdc) THEN DEBUG ("WM_PAINT: BeginPaint HDC # info HDC\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:      IF (hdc # ur.hdc) THEN DEBUG ("WM_PAINT: BeginPaint HDC # ur.hdc\n"); END;
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:(** DEBUG ("paint "); PrintRect (rect); DEBUG ("\n");***)
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:      THEN DEBUG (" to a WinTrestle.Child ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:      ELSE DEBUG (" to a VBT.T ...\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:      DEBUG ("Starting GC ................................\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:      DEBUG ("................................ Finished GC\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:      DEBUG("\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/winvbt/WinTrestle.m3:              Fmt.Int (entries[i].peFlags) & "}\n");
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/xvbt/XConfCtl.m3:  Sep = SET OF CHAR{';', '!', '-', '^', '/', '+', '=', ',', '\000'};
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/xvbt/XMessenger.m3:    tail                                       := a[len2 - 1] = '\000';
/home/ftp/pub/m3/pkg/SRC-m3/ui/src/xvbt/XMessenger.m3:      IF a[i] = '\000' AND cnt < NumDisplays THEN
/home/ftp/pub/m3/pkg/SRC-m3/ui/test/BadBricks/src/BadBricks.m3:      Wr.PutText(Stdio.stderr, "Can't connect to Trestle Server\n")
/home/ftp/pub/m3/pkg/SRC-m3/ui/test/StarAnim/src/StarAnim.m3:  Lo = -1.2; Hi = 1.2;     (* t \in [Lo, Hi] *)
/home/ftp/pub/m3/pkg/SRC-m3/ui/test/Track/src/Track.m3:    (* Wr.PutText(Stdio.stderr, msg & "\n") *)
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Wr.PutText(wr, "P1\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:      Wr.PutText(wr, "\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Wr.PutText(wr, "P3\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Wr.PutText(wr, "256\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:                         & Fmt.Int(b) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Wr.PutText(wr, "P3\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Wr.PutText(wr, "256\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:                         & Fmt.Int(ROUND(rgb.b * 255.0)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:      WHILE Rd.GetChar(rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:      WHILE Rd.GetChar(rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:      WHILE Rd.GetChar(rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/lego/Image.m3:    Spaces  = SET OF CHAR{' ', '\t', '\n', '\r'};
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/ISOChar.m3:  FOR c := '\000' TO '\377' DO Upper [c] := ASCII.Upper [c] END;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/ISOChar.m3:  FOR c := '\340' TO '\376' DO
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/ISOChar.m3:  FOR c := '\000' TO '\377' DO Lower [c] := ASCII.Lower [c] END;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/ISOChar.m3:  FOR c := '\300' TO '\336' DO
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/ISOChar.m3:  FOR c := '\000' TO '\377' DO
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:        stderr, Fmt.FN ("%s = %s (%s) + %s (%s) -> %s (%s)\n",
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:		  f {'\'', ' ', Latin1Key.apostrophe, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'\'', '\'', Latin1Key.acute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'A', '\'', Latin1Key.Aacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'E', '\'', Latin1Key.Eacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'I', '\'', Latin1Key.Iacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'O', '\'', Latin1Key.Oacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'U', '\'', Latin1Key.Uacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'Y', '\'', Latin1Key.Yacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'a', '\'', Latin1Key.aacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'e', '\'', Latin1Key.eacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'i', '\'', Latin1Key.iacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'o', '\'', Latin1Key.oacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'u', '\'', Latin1Key.uacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                  f {'y', '\'', Latin1Key.yacute, FALSE},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:             g {g {'\'', 'a', Latin1Key.aacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'e', Latin1Key.eacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'i', Latin1Key.iacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'o', Latin1Key.oacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'u', Latin1Key.uacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'y', Latin1Key.yacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', '\'', Latin1Key.acute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'A', Latin1Key.Aacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'E', Latin1Key.Eacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'I', Latin1Key.Iacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'O', Latin1Key.Oacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'U', Latin1Key.Uacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyFilter.m3:                g {'\'', 'Y', Latin1Key.Yacute},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyTrans.m3:      | Key.Backspace => RETURN '\010'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyTrans.m3:      | Key.Tab => RETURN '\t'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyTrans.m3:      | Key.Return => RETURN '\n'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyTrans.m3:      | Key.Escape => RETURN '\033'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyTrans.m3:      | Key.Delete => RETURN '\177'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/KeyTrans.m3:        c := '\177'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:      e.left := FindChar (rrd, SET OF CHAR {'\n'}, index, -1);
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:      e.right := FindChar (rd, SET OF CHAR {'\n'}, index);
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:      left := FindChar (rrd, SET OF CHAR {'\n'}, index, -1);
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:      leftMargin := FindChar (rd, SET OF CHAR {'\n'} + NonBlankRun, left);
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:      rightEnd := FindChar (rd, SET OF CHAR {'\n'}, leftMargin);
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:          | '\n' => RETURN TRUE
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:          | ' ', '\t', '\f' =>
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:        WITH c = Rd.GetChar (rrd) DO <* ASSERT c = '\n' *> END;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MTextUnit.m3:        IF ch = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MacModel.m3:                f {'\\', Latin1Key.guillemotleft},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/MacModel.m3:                f {'\'', Latin1Key.ae},
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPort.m3:  Backspace = '\010';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPort.m3:  Tab       = '\t';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPort.m3:  Return    = '\n';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPort.m3:  Del       = '\177';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPort.m3:  CONST PRINTABLE = (ISOChar.All - ISOChar.Controls) + SET OF CHAR {'\t'};
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPort.m3:        (* adjust for last line: if ends with \n, increment lineCount;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPort.m3:    (* SmallIO.PutChar (SmallIO.stderr, '\007') *)
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPort.m3:        Wr.PutChar(Stdio.stderr, '\n')
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPortClass.m3:         AND ch # '\n'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPortClass.m3:                       Fmt.F ("[%s .. %s] = \"%s\"\n", Fmt.Int (r.begin),
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/etext/TextPortClass.m3:    Wr.PutText (Stdio.stderr, "-------------------\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:                           & Fmt.Int(node.length) & "]\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:                             & Fmt.Int(node.right.length) & "]\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:                  & " index=" & Fmt.Int(index) & "]\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:            Wr.PutText(wr, node.text & ">\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:            Wr.PutText(wr, Text.Sub(node.text, 0, 20) & "...>\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:            Wr.PutText(wr, ">\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:            Wr.PutText(wr, "...>\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:            Wr.PutText(wr, Rd.GetText(node.file, node.length) & ">\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:            Wr.PutText(wr, Rd.GetText(node.file, 20) & "...>\n")
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:                       & Fmt.Int(Id (m.root)) & "]\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:      Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:              & "] at height " & Fmt.Int(height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:              & Fmt.Int(Id (node)) & "] at height " & Fmt.Int(height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/mtext/MTextDebug.m3:      IF node.length # 1 THEN Err("anchor\'s length is not 1") END
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:              ELSIF (c = '\t') AND ('\t' IN z_80.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                        + z_79.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                xx := xx - xx MOD z_79.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:              ELSIF (c = '\t') AND ('\t' IN z_84.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                        + z_83.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                xx := xx - xx MOD z_83.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:              ELSIF (c = '\t') AND ('\t' IN z_90.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                        + z_89.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                xx := xx - xx MOD z_89.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:          IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:          ELSIF c = '\t'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                  AND '\t'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:                    + view.vScreenFont.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTPhony.m3:            xx := xx - xx MOD view.vScreenFont.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:              ELSIF (c = '\t') AND ('\t' IN z_80.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                        + z_79.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                xx := xx - xx MOD z_79.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:              ELSIF (c = '\t') AND ('\t' IN z_84.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                        + z_83.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                xx := xx - xx MOD z_83.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:              ELSIF (c = '\t') AND ('\t' IN z_90.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                        + z_89.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                xx := xx - xx MOD z_89.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:            IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:            ELSIF (c = '\t') AND ('\t' IN z_98.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:                      + z_97.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.new.m3:              xx := xx - xx MOD z_97.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:              ELSIF (c = '\t') AND ('\t' IN z_80.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                        + z_79.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                xx := xx - xx MOD z_79.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:              ELSIF (c = '\t') AND ('\t' IN z_84.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                        + z_83.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                xx := xx - xx MOD z_83.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:              IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:              ELSIF (c = '\t') AND ('\t' IN z_90.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                        + z_89.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                xx := xx - xx MOD z_89.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                ELSIF c = '\t'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                        AND '\t'
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                          + view.vScreenFont.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/testing/VTReal.semi.m3:                  xx := xx - xx MOD view.vScreenFont.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:          ELSIF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:            w := w + widthMap['\n'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:          ELSIF c = '\t' AND '\t' IN printable THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:            w := w + widthMap[' '] + widthMap['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:            w := MIN(w - w MOD widthMap['\t'], avail);
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:          IF rBuf[rI - rrI] = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:                IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:                  IF (c = '\t') AND ('\t' IN z_10.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTBase.m3:                    w := w - w MOD z_9.vScreenFont.width ['\t']
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:    c := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:          | '\n' => iR := iL + 1; EXIT
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:          | '\t' =>
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:              IF '\t' IN view.vScreenFont.vScreenFont.vFont.vFont.printable THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:                        + view.vScreenFont.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:                w0 := w0 - w0 MOD view.vScreenFont.vScreenFont.width ['\t']
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:          IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:            IF c = '\n' THEN EXIT ELSE iL := iL - 2 END
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:          IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:            IF c = '\n' THEN EXIT END
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTPounce.m3:  wordCodes ['\n'] := WordCode.Special (* I guess.  \r?  \f? *)
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:              IF c = '\n' OR c = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:              ELSIF (c = '\t') AND ('\t' IN z_80.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                        + z_79.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                xx := xx - xx MOD z_79.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:              IF c = '\n' OR c = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:              ELSIF (c = '\t') AND ('\t' IN z_84.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                        + z_83.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                xx := xx - xx MOD z_83.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:              IF c = '\n' OR c = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:              ELSIF (c = '\t') AND ('\t' IN z_90.vFont.printable) THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                        + z_89.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                xx := xx - xx MOD z_89.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                escape [0] := '\\';
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:          IF c = '\n' OR c = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:          ELSIF c = '\t' AND '\t' IN 
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:                    + view.vScreenFont.vScreenFont.width ['\t'] - 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTReal.m3:            xx := xx - xx MOD view.vScreenFont.vScreenFont.width ['\t'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTView.m3:    IF SET OF CHAR{' ', '\\', '0'.. '9'} - vScreenFont.vScreenFont.defined
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTView.m3:    bsWidth := vScreenFont.vScreenFont.width['\\'];
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTView.m3:      vScreenFont.vScreenFont.width['\n'] := 1;
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTView.m3:        vScreenFont.vScreenFont.defined - SET OF CHAR{'\n'};
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTView.m3:      IF '\t' IN vFont.vFont.printable THEN
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTView.m3:        vScreenFont.vScreenFont.width['\t'] :=
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTView.m3:          vScreenFont.vScreenFont.defined - SET OF CHAR{'\t'}
/home/ftp/pub/m3/pkg/SRC-m3/vbtkit/src/vtext/VTVirtual.m3:        view.virtual.start.turned := Rd.GetChar(view.vt.rd) # '\n';
/home/ftp/pub/m3/pkg/SRC-m3/videovbt/src/POSIX/VideoVBT.m3:              Fmt.F("VideoVBT: adds: %s, subs: %s, cleans: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/videovbt/src/POSIX/VideoVBT.m3:              "VideoVBT.Picture.DetachData.TrestleFail\n", Stdio.stderr);
/home/ftp/pub/m3/pkg/SRC-m3/videovbt/src/WIN32/VideoVBT.m3:    IO.Put ("JVideo not supported\n", Stdio.stderr);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Attributes.m3:        " \nLight\nDark\nDull\nBright\nReddish\nGreenish\nBluish\nYellowish\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Attributes.m3:        " \nVeryVerySlightly\nVerySlightly\nSlightly\nSomewhat\nRather\nQuite\nVery\nVeryVery\nVeryVeryVery\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Attributes.m3:                   & Text.Sub(theName, 1, Text.Length(theName) - 1) & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Attributes.m3:              Stdio.stdout, "Creating fv for \n" & newSX &  "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Attributes.m3:                          & " X " & Fmt.Int(Rect.VerSize(dom)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Attributes.m3:    indx := Text.FindChar(t, '\n', 0);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Attributes.m3:        indx := Text.FindChar(t, '\n', from);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:        items := items & "\"" & nv.Contents[i] &  "\" ";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:          Attributes.LVAppendText(editBrowser, nv.Contents[i] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:          Attributes.LVAppendText(uniBrowser, nv.Contents[i] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:          Attributes.LVAppendText(multiBrowser, nv.Contents[i] & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:      code := code & "\ttemp.Contents := [";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:        code := code & "\"" &  nv.Contents[FIRST(nv.Contents^) + i] &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:                    "\",";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:      code := code & "];\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:      code := code & "\ttemp.Selections := [";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:      code := code & "];\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:          Attributes.LVAppendText(suffixBrowser, nv.Suffixes[i] & "\n")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:    RETURN "form_attach(SELF.FORM,  SELF." & nv.name & ".name & \"action\", SELF." & nv.name
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:             & "Proc);\n" & NodeVBT.T.generateAttachments(nv);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:                       nv.DialogSX, "Suffixes", "\"\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:        suffixList := suffixList & " \"" & nv.Suffixes[i] &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:                          "\" "
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:       code := code & "\ttemp.Suffixes := [";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:          code := code & "\"" &  nv.Suffixes[i]  & "\",";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Browser.m3:           code := code & "];\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Clickable.m3:          nv.DialogSX, "ButtonContents", "Text %@text \"" & nv.text & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Clickable.m3:                               "Pixmap Accurate %@pixmap \"" & nv.pixmap & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Clickable.m3:                               "Text %@text \"" & nv.text & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Clickable.m3:                               "Pixmap %@pixmap \"" & nv.pixmap & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Clickable.m3:      nv.DialogSX := "(Radio \n" & nv.DialogSX & ")\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Clickable.m3:          nv.DialogSX, "ChoiceContents", "Text %@text \"" & nv.text & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Clickable.m3:                               "Pixmap %@pixmap \"" & nv.pixmap & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:    GenerateObliq.sessionConstructor := "CreateEachFormOnce(LOCAL);\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:                             " containing the widget.\n\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:              "the methods shown below.\n\n" & 
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:              "Usage\n-----\n" & parentage & 
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:              "LOCAL.<method-name> instead.\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:    ObliqRuntime.Do("installAt (\"" & where & "\");");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:        "\t\tGlobal Code \n" 
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:    &   "\t\t***********\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:    & "Visual Obliq library, you need to pass it in as a parameter.\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:    & "new forms will need to bring shared widgets up to speed.\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:        "\t\tServer Side Code \n" 
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:    &   "\t\t****************\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:    & "It will not be accessible to other hosts\n\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:            WITH newfv  = NEW(FormsVBT.T).init( "(ZChassis Open NoClose (Title \"\") " & 
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Dialog.m3:                  & Fmt.Int(height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                         & " => ( let temp = LOCAL.menuItemNew( \""
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                         & menu[i].Label & "\", \""
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                         & menu[i].Name & "\", " &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                         Fmt.Int(menu[i].Level) & ", \"" &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                         menu[i].initialState  & "\");\n" &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                         "\ttemp.form := meth(s) SELF.FORM end;\ntemp),\n";   
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                     "\"RIDGE\", \"RIDGE\", 1, \"\"),\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                      micb, "bgHeader", "thread_fork(proc()\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:              NodeVBT.FindAndReplace(micb, "bgFooter", "\nend, 10000)\n")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                "let VODest = \n(*----------------------------------------*)\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                  & menu[i].executeAt & ";\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                  & "(*----------------------------------------*)\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                  & "VODest.VOCompute( proc(REMOTE) \n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                      micb, "remoteFooter", "\n ok \n end )\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                           & menu[i].Name  & "*)\n" & menu[i].callback)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                           & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                      "Proc);\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:          pulldownDef := "(VBox \n"; (* start creation of pulldown *)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                  pulldownDef := pulldownDef & "Ridge\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                      & "\"" & menu[ix].Label & "\")\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:            pulldownDef := pulldownDef & ")\n"; (* close VBox *)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                & menu[i].Name & "Label " & "\"" & menu[i].Label & "\"\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                & pulldownDef & ")\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/DialogMenu.m3:                & menu[i].Name & "Label " & "\"" & menu[i].Label & "\")\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/GenerateObliq.m3:    RETURN Text.Sub(string, 0, first) & "\\\"" &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/GenerateObliq.m3:   first: INTEGER := Text.FindChar(string, '\\');
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/GenerateObliq.m3:    RETURN Text.Sub(string, 0, first) & "\\\\" &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/GenerateObliq.m3:                                    "New(LOCAL);\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/GenerateObliq.m3:                                                 "\"" & SlashQuotes(SlashSlashes(current.DialogSX)) & "\""); 
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/GenerateObliq.m3:                             "volibLocal.LoadFile(\"" & current.name &".fv\")");                     
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/GenerateObliq.m3:                              "load \"" & progname & "DEFN.obl\";"  ); 
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    RETURN  "\ttemp." & name & " := " & Fmt.Int(arg) & ";\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    RETURN  "\ttemp." & name & " := \"" &  GenerateObliq.SlashQuotes(
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                                               GenerateObliq.SlashSlashes(arg)) & "\";\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      RETURN  "\ttemp." & name & " := true;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      RETURN  "\ttemp." & name & " := false;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:  VAR ret := "temp.SELF := meth(s) VOInstance end;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ret := ret &  "\ttemp.parent := meth(s) VOInstance."
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      & v.parent.name & "  end;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    (* print("After ComputeSX :\n" & v.DialogSX & "\n"); *)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:   code := code & GetNodeTypeName(nv) & "New(\""
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:             & nv.name & "\");\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:   code := code & "\ttemp.form := meth(s) SELF.FORM end;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:   code := code & "temp),\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ncb := FindAndReplace(ncb, "bgHeader", "thread_fork(proc()\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ncb := FindAndReplace(ncb, "bgFooter", "\nend, 10000)\n")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:          "let VODest = \n(*----------------------------------------*)\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:            & nv.Location & ";\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:            & "(*----------------------------------------*)\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:            & "VODest.VOCompute( proc(REMOTE) \n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ncb := FindAndReplace(ncb, "remoteFooter", "\n ok; \n end )\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                          "(* Callback for " & nv.name & "*)\n" & nv.Code)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:             & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:             & "Proc);\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    RETURN ("(* Initialization Code " & nv.name & " *)\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:            & Fmt.Int(nv.height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    ret := ret & "\ttemp.children := meth(s)  [";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    ret := ret & "]; end;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:  VAR footer := ")\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                       "(ZSplit %@zsplit\n (ZBackground %@zback\n  ");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                      & Fmt.Int(child.y - child_offset_redn) & "  NW Absolute) Open\n  " &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                      child.DialogSX & "\n    )\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      footer := footer & ")\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    (* print("After SplitComputeSX :\n" & nv.DialogSX & "\n"); *)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:        IF z.Tag THEN list := list & z.name & "\n" END
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    (* print("After FormComputeSX :\n" & nv.DialogSX & "\n"); *)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    GenerateObliq.sessionConstructor := "CreateEachFormOnce(LOCAL);\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    print("Cleaning up \n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:    print("Done\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:          print("Computing sx for " & current.name & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                & Fmt.Int(y) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                  & Fmt.Int(Rect.VerSize(dom)) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:            & Fmt.Int(nv.height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:            & Fmt.Int(nv.height) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ret := ret & "\ttemp.ParentForm := meth(s) VOInstance." & nv.ParentForm.name &
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                 " end;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ret := ret & "\ttemp.ChildForms := meth(s)  [";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ret := ret & "] end;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ret := ret & "\ttemp.Menu := meth(s)  [";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:      ret := ret & "] end;\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:   print("Getting Info on " & topic & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                              info:= "\t\tMethods in the Visual Obliq Library\n"
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                                   & "\t\t***********************************\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                  info:="\t\tMethods for " & signature &  "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                  infoList[infoCtr-1].info := infoList[infoCtr-1].info & signature & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/NodeVBT.m3:                  infoList[0].info := infoList[0].info & signature & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ObliqRuntime.m3:      Rsrc.NotFound =>NodeVBT.print("Error: Cannot find '" & name & "' in resource bundle\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ObliqRuntime.m3:     NodeVBT.print("Error: while executing '" & name & "'\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/RW.m3:      & "\n"); Rd.UnGetChar(r);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/RW.m3:      & "\n"); Rd.UnGetChar(r);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/RW.m3:      & "\n"); Rd.UnGetChar(r);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/RW.m3:      & "\n"); Rd.UnGetChar(r);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/RW.m3:      & "\n"); Rd.UnGetChar(r);
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Textual.m3:  (* So that it will write "ab\nc" instead of "ab c" *)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Textual.m3:    first        := Text.FindChar(input, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Textual.m3:      prefix := Text.Sub(input, 0, first) & "\\n";
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Textual.m3:          nv.DialogSX, "Initial", "From \"" & nv.teFromFile & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/Textual.m3:                       "Value \"" & DecodeText(nv.teContents) & "\"")
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ZHandleVBT.m3:         & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ZHandleVBT.m3:          Fmt.Int(wid) & "X" & Fmt.Int(ht) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ZHandleVBT.m3:        (*        NodeVBT.print("Pointer exited " & nv.name & "\n") *)
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ZHandleVBT.m3:                            & Fmt.Int(newcd.cp.pt.v) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ZHandleVBT.m3:                              & Fmt.Int(newcd.cp.pt.v) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ZHandleVBT.m3:            Wr.PutText(Stdio.stdout, "Chord Cancel - Move Abandoned\n");
/home/ftp/pub/m3/pkg/SRC-m3/visualobliq/src/ZHandleVBT.m3:          Wr.PutText(Stdio.stdout, "Error !#@\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    & "<P><P>\n";
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    RETURN  "<A HREF=\"" & linkto & "\">" & message &   "</A>";
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("Content-type: text/html\n\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("<TITLE>List of Available Applications</TITLE>\n<UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("<H2>Visual Obliq Applications</H2>\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out (Params.Get(0), ")<P><P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:              Out ("<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    cmd := "try\n" &
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:      "     let svr = net_import(\"vossns\", \"" & Params.Get(2) &  "\");\n" &
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:      "     svr.addNew(\"" & name & "\",\"" & voclient & "\");\n" &
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:      "except else end;\n"; 
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("Content-type: application/x-vobl\n\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:      Out ("Content-type: application/x-vobl\n\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:      Out ("Join(\"" & ssn & "\",\"" & host & "\");\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    quotedPrefix := "\"http://" &
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:                        vopath & "?vojoin\"";
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    script :=    "let result = \n"  &
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:        "try\n" &
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:        "     let svr = net_import(\"vossns\", \"" & Params.Get(2) &  "\");\n" &
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:        "     svr.genListing(" &  quotedPrefix  & ");\n" &
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:        "except else \"none\" end;\n";
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("Content-type: text/html\n\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("<H1>Error in " & Params.Get(0) & "</H1><P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("<H2>" & msg & "</H2> <P>\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("<H1>Usage:</H1> <P>\n<B>", Params.Get(0), "</B>\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("| vosessions &lt;HOSTNAME&gt;<P><UL><UL>\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out (" | vojoin &lt;APP-NAME&gt;@&lt;SERVER-SITENAME&gt;<P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/vocgi/src/Main.m3:    Out ("      | vomembers &lt;APP-NAME&gt;@&lt;SERVER-SITENAME&gt;] <P>\n");
/home/ftp/pub/m3/pkg/SRC-m3/voquery/src/Main.m3:  "(LabelFont \"-*-helvetica-medium-r-*-*-*-240-*-*-*-*-*-*\")" &
/home/ftp/pub/m3/pkg/SRC-m3/voquery/src/Main.m3:   " (Text %msg \"No Message Yet\")" &
/home/ftp/pub/m3/pkg/SRC-m3/voquery/src/Main.m3:   " (HBox Fill (Button %y \"Yes\") (Glue 100) " &
/home/ftp/pub/m3/pkg/SRC-m3/voquery/src/Main.m3:   "     (Button %n \"No\") Fill ) " &
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:    Wr.PutText(stderr, "Usage: " & Params.Get(0) & " [-p | -r]  [-q<voquery-filename>] [<obliq file>]\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:    Wr.PutText(stderr, "   -p = execute in PROTECTED mode ( no filesystem access or process creation )\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:    Wr.PutText(stderr, "   -r = execute in RESTRICTED mode ( restricted access to filesystem & process creation )\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:    Wr.PutText(stderr, "   Default is UNPROTECTED (no restrictions)\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:    Wr.PutText(stderr, "   -q<voquery-filename> specifies the full path of the voquery executable\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:    Wr.PutText(stderr, "   Default is " & QueryExecutable & "\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:    Wr.PutText(stderr, "   If no file is specified, reads from standard input until EOF\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:      Rsrc.NotFound =>Wr.PutText(stderr, "Error: Cannot find '" & name & "' in resource bundle\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:      Wr.PutText(stderr,  "Error: while executing '" & name & "'\n");
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:      WITH  ix = Text.FindChar(code, '\n') DO
/home/ftp/pub/m3/pkg/SRC-m3/vorun/src/Main.m3:    Wr.PutText(stderr, "Error: Abnormal Termination...\nPost-Mortem:-\n\n" & TextWr.ToText(output));
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:  EndOfRequest = "\r\n";
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:        Lex.Error => RAISE Error(Fmt.F("Lexing error parsing %s\n", url));
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:  NonColon     = SET OF CHAR{'\000'.. '~'} - SET OF CHAR{':', '/', '\n'};
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:  ColonSpace   = SET OF CHAR{' ', '\t', ':', ','};
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:  NoProxySeps  = SET OF CHAR{',', ' ', '\n'};
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:  NoProxyChars = SET OF CHAR{'\000'.. '~'} - NoProxySeps;
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:              "Unrecognized MIME type ``%s''in content-type field\n", t));
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:        RAISE Error("Error in content-type field\n");
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:(* End of header marker is vague: should be \r\n\r\n, but experimentally
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:             OR Text.GetChar(label, 0) = '\r' THEN
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:        | '\'' => Wr.PutText(wr, "%27");
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:        | '\\' => Wr.PutText(wr, "%5C");
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:        RAISE Error(Fmt.F("Error parsing date string %s\n", t));
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:        RAISE Error(Fmt.F("Error %s parsing date string %s\n", e, t));
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:    RAISE Error(Fmt.F("Can't parse month %s\n", t));
/home/ftp/pub/m3/pkg/SRC-m3/web/src/Web.m3:    RAISE Error(Fmt.F("Can't parse day %s\n", t));
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInCompose.m3:      IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInCompose.m3:        Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInCompose.m3:        pos := MiscUtils.RdFindChar(rd, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInCompose.m3:      Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInCompose.m3:      IF Rd.GetChar(rd) = '\n' THEN RETURN  END
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInCompose.m3:      IF Rd.GetChar(rd) = '\n' THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInCompose.m3:      Wr.PutText(Stdio.stderr, "Can\'t read composition sub-window form\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInCompose.m3:                         "Can\'t read composition window form: " & t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:  VAR start := MiscUtils.Find(self.body, 0, "\n%!");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:                           "no line beginning with \"%!\".");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:        IF MiscUtils.Find(text, 0, "\n%!", FALSE) >= 0
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:      Wr.PutText(Stdio.stderr, "Can\'t read display window form\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:  date := "Date: " & FmtTime.Long(Time.Now()) & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:    Wr.PutText(wr, "From: " & "..." & GetTail(url) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:    Wr.PutText(wr, "Subject: " & GetSubject(url) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:    Wr.PutText(wr, "X-URL: " & url & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/BuiltInDisplay.m3:    Wr.PutText(wr, "------\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:CONST WhiteExceptNL = MailUtilities.DefaultWS - SET OF CHAR{'\n'};
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          failure := "the " & prompt & " \"" & name & "\" doesn\'t exist";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          failure := "the " & prompt & " \"" & name & "\" is a bulletin board";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        failure := "invalid font name \"" & names[0] & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          Scan.Int(TerminatedText(rd, SET OF CHAR {'\n'}));
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          Scan.Int(TerminatedText(rd, SET OF CHAR {'\n'}));
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          t.displayFont := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          t.displayFontSize := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:            EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        t.autoFccFolder := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        t.deleteMessagesToFolder := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        EVAL TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        IF Rd.GetChar(rd) = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          t.includeReplyString := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        t.printFilter := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          t.editorFilter := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          t.psViewFilter := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          t.psPrintFilter := TerminatedText(rd, SET OF CHAR {'\n'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          Scan.Int(TerminatedText(rd, SET OF CHAR {'\n'}));
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:            Scan.Int(TerminatedText(rd, SET OF CHAR {'\n'})); (* JRM *)
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:            ResolveModel(TerminatedText(rd, SET OF CHAR {'\n'}), ModelNames)
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        RAISE Error("Damaged configuration file \"" & configName & "\".");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        RAISE Error("Error while reading configuration file \""
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:                         & configName & "\".");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        RAISE Error("Configuration file \"" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:                         configName & "\" not found.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        RAISE Error("Can't open configuration file \"" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:                         configName & "\": " & t);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:  CONST NY = ARRAY BOOLEAN OF TEXT {"N\n", "Y\n"};
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        Wr.PutText(wr, "Postcard " & version & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:                          & Fmt.Int(t.mailCheckInterval) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:                          & Fmt.Int(t.newsCheckInterval) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        Wr.PutText(wr, "Display font family: " & t.displayFont & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        Wr.PutText(wr, "Display font size: " & t.displayFontSize & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        Wr.PutText(wr, "Auto fcc folder: " & t.autoFccFolder & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:                          & t.deleteMessagesToFolder & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        Wr.PutText(wr, "Prefixed by: " & t.includeReplyString & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        Wr.PutText(wr, "Print filter: " & t.printFilter & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        Wr.PutText(wr, "Compose filter: " & t.editorFilter & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          wr, "PostScript view filter: " & t.psViewFilter & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          wr, "PostScript print filter: " & t.psPrintFilter & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:                          & Fmt.Int(t.purgeSaveMessages) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:        Wr.PutText(wr, "Scale factor: " & Fmt.Int(t.scale) & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Config.m3:          & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:    Wr.PutText(wr, "To: " & to & "\nCc: " & cc);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:    IF NOT Text.Empty(fcc) THEN Wr.PutText(wr, "\nFcc: " & fcc);  END;
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:    Wr.PutText(wr, "\nSubject: " & subject);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:      Wr.PutText(wr, "\nIn-Reply-To: " & inReplyTo);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:    Wr.PutText(wr, "\n------\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:      IF Text.GetChar(body, Text.Length(body)-1) # '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:        Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:        IF startOfLine AND ( (c = '\n') OR (c = '-') ) THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:        startOfLine := (c = '\n');
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:        Wr.PutChar(wr, '\n');
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:    nlHeader := "\n" & header;        (* newline makes "Find" easier to use *)
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:    nlFieldName := "\n" & fieldname;
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:        IF c IN SET OF CHAR {':', ' ', '\t'} THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:      IF Text.GetChar(header, pos) = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MailUtilities.m3:        IF NOT (Text.GetChar(header, pos+1) IN SET OF CHAR {' ','\t'}) THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/MiscUtils.m3:  CONST White = SET OF CHAR{' ', '\n', '\t'};
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:              expr.openParen := InsertSx("(Text %" & mySymbol & " \"(\" )");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:              expr.strOpen := InsertSx("(Text  %" & mySymbol & " \"(\" )");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:              expr.strClose := InsertSx("(Text %" & mySymbol & " \")\" )");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:              expr.closeParen := InsertSx("(Text %" & mySymbol & " \")\" )");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:        RETURN "Syntax error: " & t & " \"" & symText & "\""
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:    CONST EndOfSym = SET OF CHAR { '(', ')', '!', '|', '&', '"', '\''} +
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:        | '(' => str := TerminatedText(rd, SET OF CHAR{'\n', ')'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:        | '\"' => str := TerminatedText(rd, SET OF CHAR{'\n', '"'});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:        | '\'' => str := TerminatedText(rd, SET OF CHAR{'\n', '\''});
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:        IF c = '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:          RAISE Error("Syntax error: newline isn\'t allowed inside a string arg");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:                RAISE Error("Syntax error: missing \")\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:                RAISE Error(StringAndSymbol("expected \")\" before"));
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:        Wr.PutText(t.filter.wr, "count " & exprText & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:                          "\"Max\" field and try again.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:              Wr.PutText(t.filter.wr, "summary -c " & exprText & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/NI.m3:      Wr.PutText(Stdio.stderr, "Can\'t read NI item template\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:        Wr.PutText(Stdio.stderr, AppName & ": can't contact display server\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      RAISE BadFilter("Use \"Set Configuration\" to define " &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                      "e.g. \"xterm -e vi\" or \"epochclient\".");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      Wr.PutText(Stdio.stderr, "Can\'t read configuration window form\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      IF (c = ' ') OR (c = '\n') THEN EXIT END;
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:       the remainder.  Stops at '\n' or EOF. *)
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:        subBuf [0] := '\n';
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:        IF subBuf [subCount - 1] # '\n' THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:            WHILE Rd.GetChar (rd) # '\n' DO END;
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      SetStatusLine (cl, "Loading \"" & cl.openFolder & "\" ...",
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                  IF (subBuf [subPos] # ' ') AND (subBuf [subPos] # '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:    SetStatusLine(cl, "Found in \"" & cl.openFolder & "\"",
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("A folder named \"" & folder &"\" already exists.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t rescan this browser - it\'s not a folder.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:    IF NOT cl.confirm("Rescan the folder \"" & cl.openFolder & "\"?",
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t sort and pack this browser - " &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                       "it\'s not a folder.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t sort and pack a bulletin board.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:       NOT cl.confirm("Sort and pack the folder \"" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                      cl.openFolder & "\"?",
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t purge this browser - it\'s not a folder.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:    IF NOT cl.confirm("Purge the folder \"" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                      "\", retaining only " &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t remove this browser - it\'s not a folder.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t remove your inbox.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("You can\'t remove your \"deleted messages\" folder.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      confirmText := "Remove the bulletin board folder \"" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                     cl.openFolder & "\"?";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      confirmText := "Remove and destroy the message folder \"" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                     cl.openFolder & "\"?";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:        SetStatusLine(cl, "Searching \"" & candidateFolder & "\" ...",
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:          SetStatusLine(cl, "Stopped after \"" & candidateFolder & "\"",
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:               "You can\'t move or delete from the NI browser; use \"copy\".");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:             "You can\'t move or delete from a bulletin board; use \"copy\".");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                   "You can\'t move or copy a message into a bulletin board.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      "You can\'t move or copy a message into the folder from which it came.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:            statusMsg := "Moving to \"" & destFolder & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:            statusMsg := "Copying to \"" & destFolder & "\"";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      cl.unlockedError("Can\'t reply to multiple messages.");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      Wr.PutText (Stdio.stderr, "Who are you?  Please define $USER\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:      Wr.PutText(Stdio.stderr, "Where do you live?  Please define $HOME.\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:       Wr.PutText(Stdio.stderr, AppName & ": can't contact display server\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                   "Error in \"-geometry\" or \"-display\" parameter");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                   & why & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                   & "resource not found\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:        Wr.PutText(Stdio.stderr, "Unknown option \"" & param & "\"\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/PostcardMain.m3:                "Usage:\n    Postcard [-geometry WxH+X+Y] [-display name]\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/Rescreen.m3:            windowTitle := "Rescreen \"" & windowTitle & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:          RAISE Error("\"" & fileName & "\" doesn't exist");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:          RAISE Error("\"" & fileName & "\": " & why);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:          RAISE Error("Can't open \"" & fileName & "\": " & why);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:          RAISE Error("\"" & fileName & "\" doesn't exist");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:          RAISE Error("Can't write \"" & fileName & "\": " & why);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:      RAISE Error("Couldn't run \"" & argv[0] & "\": " & t);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:    errText := "\"" & argv[0] & "\": ";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        RAISE Error("Error while writing text into \"" & mine & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        Wr.PutText(Stdio.stderr, "\"" & mailDirName & "\" doesn't exist\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:                   ": " & t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        RAISE Error("Folder \"" & folder & "\" not found")
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        RAISE Error("Folder \"" & folder & "\" not found")
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:      index := Text.FindChar(result, '\n', index + 1);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        Wr.PutText (wr, f.curMsg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        RAISE Error("Expected integer from NI process, received:\n" & line);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:    EXCEPT Rd.Failure => RAISE Error("Can't read \"" & fileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        RAISE Error("Can't open \"" & fileName & "\": " & why);
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        header := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        brief := "\n";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        body := "********----********\n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:                "The message \"" & fileName & "\" doesn't exist.\n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:                "group, the message might have expired or been cancelled.\n\n" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:                "********----********\n";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        RAISE Error("Can't read \"" & fileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:    EXCEPT Rd.Failure => RAISE Error("Can't read \"" & fileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:            RAISE Error("Can't read \"" & msgList.head & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:      RAISE Error("Error while saving into \"" & toFileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:    inReplyTo := "Message of " & dateField & "\n    from " & sender;
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:    inReplyTo := inReplyTo & "\n    " & msgidField;
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        body := "\n\n------- Forwarded Message" & plural & "\n\n";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        body := body & "\n\n------- Message " & Fmt.Int(i) & "\n\n";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:    body := body & "\n------- End of Forwarded Message" & plural & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:            Wr.PutText(wr, prefix & line & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:            Wr.PutText(wr, prefix & line & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:      RAISE Error("Error while reading \"" & fileName & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:        RAISE Error("Error while saving draft into \"" &
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/UnixMail.m3:                    DraftFileName(draftFile) & "\"");
/home/ftp/pub/m3/pkg/SRC-m3/webcard/src/WebBrowserVBT.m3:          title := "Reloading \"" & GetTitle() & "\" interrupted by user";
/home/ftp/pub/m3/pkg/SRC-m3/webcat/src/HTTPCat.m3:  NonColon = SET OF CHAR{'\000'..'\377'} - SET OF CHAR{':'};
/home/ftp/pub/m3/pkg/SRC-m3/webcat/src/Main.m3:        stderr, " Usage? webcat [-post args -debug -head -noCache -proxy XXX] URL\n"); 
/home/ftp/pub/m3/pkg/SRC-m3/webcat/src/Main.m3:      Wr.PutText(stderr, msg & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webcat/src/Main.m3:          ReportError(Fmt.F("Error for url %s: The content type of this URL is not 'text'\n", url));
/home/ftp/pub/m3/pkg/SRC-m3/webcat/src/Main.m3:          ReportError(Fmt.F("Error for url %s: The content type of this URL is not 'text'\n", url));
/home/ftp/pub/m3/pkg/SRC-m3/webcat/src/Main.m3:        Wr.PutText(stderr, "Error reading from WWW server\n"); <* NOWARN *>
/home/ftp/pub/m3/pkg/SRC-m3/webscape/src/Main.m3:    Separator = "\n\n\n***************************************************************\n\n";
/home/ftp/pub/m3/pkg/SRC-m3/webscape/src/Main.m3:          title := "Reloading \"" & GetTitle() & "\" interrupted by user";
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/CIText.m3:    u[len] := '\000';
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTML.m3:      Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTG.m3:    NL        = '\n';
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:      IF info.lastChar # '\n' OR NOT Text.Equal(text, "\n") THEN
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:          this := Consume(info, "\n\n" & Spaces(info.indent));
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:          this := Consume(info, "\n" & Spaces(info.indent));
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:              "\n-----------------------------------------------------------------\n")
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:          this := Consume(info, "\n")
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:                    & Consume(info, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:          this := Consume(info, "\n" & Spaces(info.indent))
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:                    & Consume(info, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:           this := Consume(info, "\n\nThis view cannot display oblets; sorry. [" 
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:                     & oblet.source & "]\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:    ELSE nl := "\n" END;
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:                 & Consume(info, " **\n\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:                 & Consume(info, " *\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:                 & Consume(info, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:                 & Consume(info, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:    this := Consume(info, "\n" & Spaces(info.indent));
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:                & Consume(info, "\n" & Spaces(info.indent));
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/HTMLVBTText.m3:      this := this & Consume(info, "\n" & Spaces(info.indent))
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/SimpleWeb.m3:            Error(Fmt.F("reader failure: %s\n", RdUtils.FailureText(code)))
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/SimpleWeb.m3:              Error(Fmt.F("reader failure closing connection: %s\n",
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObLibWeb.m3:           "*** A Modula3 callback to Obliq caused an Obliq error: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObLibWeb.m3:           "*** A Modula3 callback to Obliq caused an Obliq exception: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObLibWeb.m3:           "*** A Modula3 callback to Obliq caused an Obliq error: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObLibWeb.m3:           "*** A Modula3 callback to Obliq caused an Obliq exception: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObLibWeb.m3:           "*** A Modula3 callback to Obliq caused an Obliq error: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObLibWeb.m3:           "*** A Modula3 callback to Obliq caused an Obliq exception: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObLibWeb.m3:           "*** A Modula3 callback to Obliq caused an Obliq error: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObLibWeb.m3:           "*** A Modula3 callback to Obliq caused an Obliq exception: ***\n");
/home/ftp/pub/m3/pkg/SRC-m3/webvbt/src/oblet/ObMetaEval.m3:                  "(meta-level procedures)\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/TracedAlg.m3:      Wr.PutText (Stdio.stdout, "alg: " & t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/TracedView.m3:        Wr.PutText(Stdio.stdout, "view: " & t & "\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/View.m3:                       & " " & Fmt.Int(se.q.v) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/View.m3:      Wr.PutText(wr, "()\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusPanel.m3:    IF (Text.GetChar(text, tlength - 1) # '\n') THEN
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusPanel.m3:      text := text & "\n";
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusPanel.m3:                        & " (Text %TITLE" & info.groupName & " \""
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusPanel.m3:                        & info.title & "\")))");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusPanel.m3:(* DebugWrite("P-id = " & Fmt.Ref(Thread.Self()) & "\n");*)
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusPanel.m3:(* DebugWrite("A-id = " & Fmt.Ref(Thread.Self()) & "\n");*)
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusPanel.m3:    (* DebugWrite("abort:" & Fmt.Ref(Thread.Self()) & "\n");*)
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusPanel.m3:        Wr.PutText(wr, ")\n" );
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:      Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:      Wr.PutText(wr, "\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:    Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:      wr, "(InTrestle " & Fmt.Bool(sess.inTrestle) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:    Wr.PutText(wr, "(Session \"" & sess.name & "\")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:            & Fmt.Int(se.q.v) & ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:    Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:    Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:      Wr.PutText(wr, "(Alg \"" & alg.name & "\")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:      Wr.PutText(wr, "(Alg \"NIL\")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:    Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:        Wr.PutText(wr, "(View \"" & view.name & "\")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:        Wr.PutText(wr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:            Wr.PutText(twr, "(Session \"" & sess.name & "\")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:            Wr.PutText(twr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:            Wr.PutText(twr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:        Wr.PutText(twr, ")\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:        "Error: the HOME environment variable is undefined.\n");
/home/ftp/pub/m3/pkg/SRC-m3/zeus/src/ZeusSnapshot.m3:        "Please set it to the path of your home directory and try again.\n");
