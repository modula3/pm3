Each line you enter will be parsed as an expression.

> []
*** Parse error: Found ']'
[

> [ "a", "b", (*
*** Lex error: Unclosed comment
["a", "b", 

> x REL y (*
*** Lex error: Unclosed comment
x REL y

> x REL y REL z
*** Parse error: Found 'REL'
x REL y

> x + (*
*** Lex error: Unclosed comment
x + 

> x + y (*
*** Lex error: Unclosed comment
x + y

> x * (*
*** Lex error: Unclosed comment
x * 

> x * y (*
*** Lex error: Unclosed comment
x * y

> - (*
*** Lex error: Unclosed comment
-

> - x (*
*** Lex error: Unclosed comment
-x

> NIL (*
*** Lex error: Unclosed comment
NIL

> 3.0 (*
*** Lex error: Unclosed comment
3

> x (*
*** Lex error: Unclosed comment
x

> x. (*
*** Lex error: Unclosed comment
x.

> x.y (*
*** Lex error: Unclosed comment
x.y

> [ (*
*** Lex error: Unclosed comment
[

> [ st:Push ]
*** Parse error: Found ']'; Expected '('
[st:Push

> [ x+y )
*** Parse error: Found ')'; Expected ']'
[x + y

> (*
*** Lex error: Unclosed comment


> |
*** Parse error: Found '|'


> x.3
*** Parse error: Found '0.3'
x

> x.y: (*
*** Lex error: Unclosed comment
x.y:

> x.y:2
*** Parse error: Found '2'; Expected '<Identifier>'
x.y:

> x.y:z.3
*** Parse error: Found '0.3'; Expected '('
x.y:z

> x.y:z.w (*
*** Lex error: Unclosed comment
x.y:z.w

> x.y:z.w |
*** Parse error: Found '|'; Expected '('
x.y:z.w

> x.y:z.w(a, b, +)
*** Parse error: Found '+'
x.y:z.w(a, b, 

> x.y:z.w(a, b, c (*
*** Lex error: Unclosed comment
x.y:z.w(a, b, c

> (E (*
*** Lex error: Unclosed comment
(E 

> (E x.y :: TRUE)
*** Parse error: Found '.'; Expected '::'
(E x 

> (E x, y :: (*
*** Lex error: Unclosed comment
(E x, y :: 

> (E x, y :: +
*** Parse error: Found '+'
(E x, y :: 

> (E x, y :: TRUE (*
*** Lex error: Unclosed comment
(E x, y :: TRUE

> (E x, y :: TRUE AND x = y
*** Parse error: Found '<End-Of-File>'; Expected ')'
(E x, y :: TRUE AND x = y

> (x + 2 (*
*** Lex error: Unclosed comment
(x + 2

> (x + 2 |
*** Parse error: Found '|'
(x + 2

> (x + 2) (*
*** Lex error: Unclosed comment
(x + 2)

> (x + 2) :
*** Parse error: Found '<End-Of-File>'; Expected '<Identifier>'
(x + 2):

> (x): (*
*** Lex error: Unclosed comment
(x):

> (x): |
*** Parse error: Found '|'; Expected '<Identifier>'
(x):

> (x):Foo.P (*
*** Lex error: Unclosed comment
(x):Foo.P

> (x):Foo.P |
*** Parse error: Found '|'; Expected '('
(x):Foo.P

> (x):Foo.P(st:Push)
*** Parse error: Found ')'; Expected '('
(x):Foo.P(st:Push

> (x):Foo.P(a, b, c |
*** Parse error: Found '|'; Expected ')'
(x):Foo.P(a, b, c

> (x + 2, (*
*** Lex error: Unclosed comment
(x + 2, 

> (x + 2, st:Push)
*** Parse error: Found ')'; Expected '('
(x + 2, st:Push

> (x + 2, y (*
*** Lex error: Unclosed comment
(x + 2, y

> (x + 2, y |
*** Parse error: Found '|'
(x + 2, y

> (x + 2, y) (*
*** Lex error: Unclosed comment
(x + 2, y)

> (x + 2, y) |
*** Parse error: Found '|'
(x + 2, y)

> (x + 2, y):
*** Parse error: Found '<End-Of-File>'; Expected '<Identifier>'
(x + 2, y):

> (x, y + 2):
*** Parse error: Found '<End-Of-File>'; Expected '<Identifier>'
(x, y + 2):

> (x, y): |
*** Parse error: Found '|'; Expected '<Identifier>'
(x, y):

> (x, y):Foo.P (*
*** Lex error: Unclosed comment
(x, y):Foo.P

> (x, y):Foo.P |
*** Parse error: Found '|'; Expected '('
(x, y):Foo.P

> (x, y):Foo.P(st:Push)
*** Parse error: Found ')'; Expected '('
(x, y):Foo.P(st:Push

> (x, y):Foo.P(a, b, c |
*** Parse error: Found '|'; Expected ')'
(x, y):Foo.P(a, b, c

> (x + 2, y,
*** Parse error: Found '<End-Of-File>'; Expected '<Identifier>'
(x + 2, y, 

> (x, y + 2,
*** Parse error: Found '<End-Of-File>'; Expected '<Identifier>'
(x, y + 2, 

> (x, y, (*
*** Lex error: Unclosed comment
(x, y, 

> (x, y, |
*** Parse error: Found '|'; Expected '<Identifier>'
(x, y, 

> (x, y, st:Push):Pop()
*** Parse error: Found ':'; Expected ')'
(x, y, st

> (x, y, z) (*
*** Lex error: Unclosed comment
(x, y, z)

> (x, y, z) |
*** Parse error: Found '|'; Expected ':'
(x, y, z)

> (x, y, z, w (*
*** Lex error: Unclosed comment
(x, y, z, w

> (x, y, z, w |
*** Parse error: Found '|'; Expected ')'
(x, y, z, w

> (x, y, z, w) (*
*** Lex error: Unclosed comment
(x, y, z, w)

> (x, y, z, w) |
*** Parse error: Found '|'; Expected ':'
(x, y, z, w)

> (x, y, z, w):Foo.P (*
*** Lex error: Unclosed comment
(x, y, z, w):Foo.P

> (x, y, z, w):Foo.P |
*** Parse error: Found '|'; Expected '('
(x, y, z, w):Foo.P

> (x, y, z, w):Foo.P(st:Push)
*** Parse error: Found ')'; Expected '('
(x, y, z, w):Foo.P(st:Push

> (x, y, z, w):Foo.P(a, b, (*
*** Lex error: Unclosed comment
(x, y, z, w):Foo.P(a, b, 

> (x, y, z, w):Foo.P(a, b, |
*** Parse error: Found '|'
(x, y, z, w):Foo.P(a, b, 

> (x, y, z, w):Foo.P(a, b, c (*
*** Lex error: Unclosed comment
(x, y, z, w):Foo.P(a, b, c

> (x, y, z, w):Foo.P(a, b, c |
*** Parse error: Found '|'; Expected ')'
(x, y, z, w):Foo.P(a, b, c

> (E x ~ .5 :: TRUE)
(E x ~ 0.5 :: TRUE)

> (E 2)
*** Parse error: Found '2'; Expected '<Identifier>'
(E 

> ^D
