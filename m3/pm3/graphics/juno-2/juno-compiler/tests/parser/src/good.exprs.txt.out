Each line you enter will be parsed as an expression.

> x REL y
x REL y

> x REL (y REL z)
x REL (y REL z)

> x + y - z & w
x + y - z & w

> x + y * z / y DIV z MOD y & w
x + y * z / y DIV z MOD y & w

> NIL
NIL

> 2.3e5
230000

> "Text Literal"
"Text Literal"

> x
x

> Foo.V
Foo.V

> [ 1, "Two", 3 ]
[1, "Two", 3]

> Bar.P()
Bar.P()

> Foo.V:Bar.P()
Foo.V:Bar.P()

> Bar.P(TRUE, FALSE, x, y.z, 2+z)
Bar.P(TRUE, FALSE, x, y.z, 2 + z)

> Foo.V:Bar.P(TRUE, FALSE, x, y.z, 2+z)
Foo.V:Bar.P(TRUE, FALSE, x, y.z, 2 + z)

> (E x :: TRUE)
(E x :: TRUE)

> (E x, y :: TRUE)
(E x, y :: TRUE)

> (E x~1, y :: x = y AND x * x = 2)
(E x ~ 1, y :: x = y AND x * x = 2)

> (x + 2)
(x + 2)

> TRUE
TRUE

> FALSE
FALSE

> (TRUE AND TRUE)
(TRUE AND TRUE)

> (NOT NOT NOT FALSE)
(NOT NOT NOT FALSE)

> (x + 2, y + 3)
(x + 2, y + 3)

> (TRUE, y + 3)
(TRUE, y + 3)

> (x + 2):Foo.P()
(x + 2):Foo.P()

> (x + 2):Foo.P(a, b.c, d+e)
(x + 2):Foo.P(a, b.c, d + e)

> (x + 2, y + 3):Foo.P()
(x + 2, y + 3):Foo.P()

> (x + 2, y + 3):Foo.P(a, b.c, d+e)
(x + 2, y + 3):Foo.P(a, b.c, d + e)

> (x + 2, y + 3, z, w):Foo.P()
(x + 2, y + 3, z, w):Foo.P()

> (x + 2, y + 3, z, w):Foo.P(a, b.c, d+e)
(x + 2, y + 3, z, w):Foo.P(a, b.c, d + e)

> ISTEXT("Foo")
ISTEXT("Foo")

> ISREAL(x)
ISREAL(x)

> ISINT(y)
ISINT(y)

> ISPAIR(CAR(CDR(z)))
ISPAIR(CAR(CDR(z)))

> COS(SIN(MAX(x, MIN(y, ATAN(5,LN(EXP(FLOOR(CEILING(ABS(2))))))))))
COS(SIN(MAX(x, 
        MIN(y, 
        ATAN(5, 
        LN(EXP(FLOOR(CEILING(ABS(2))))))))))

> ^D
