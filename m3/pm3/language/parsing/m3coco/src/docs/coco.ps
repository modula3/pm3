%!PS-Adobe-2.0%%Title: Report%%Creator: WriteNow 3.0%%CreationDate: Donnerstag, 4. Februar 1993%%Pages: (atend)%%BoundingBox: ? ? ? ?%%PageBoundingBox: 28 30 566 811%%For: %%DocumentProcSets: "(AppleDict md)" 71 0%% © Copyright Apple Computer, Inc. 1989-91 All Rights Reserved.%%EndComments%%BeginProcSet: "(AppleDict md)" 71 0userdict/LW{save statusdict/product get(LaserWriter)anchorsearchexch pop{dup length 0 eq{pop 1}{( Plus)eq{2}{3}ifelse}ifelse}{0}ifelse exch restore}bind putuserdict/downloadOK known not{userdict/downloadOK{systemdict dup/eexec known exch/cexec known and LW dup 1 ne exch 2 ne and and vmstatus exch sub exch pop 120000 gt and}bind put}ifuserdict/type42known known not{userdict/type42known systemdict/resourcestatus known{42/FontType resourcestatus{pop pop true}{false}ifelse }{false}ifelse put}iftype42known not downloadOK and {userdict begin /*charpath /charpath load def/charpathflag false def/charpath{userdict/charpathflag true put userdict/*charpath get exec userdict/charpathflag false put}bind def end}ifuserdict/checkload known not{userdict/checkload{{pop exec} {save 3 dict begin/mystring 6050 string defexch/endstring exch def{currentfile mystring readline not{stop}if endstring eq{exit}if}loop end restore pop}ifelse}bind put}ifuserdict/LW+{LW 2 eq}bind putuserdict/ok known not{userdict/ok{systemdict/statusdict known dup{LW 0 gt and}if}bind put}ifsystemdict/currentpacking known{currentpacking true setpacking}if/md 270 dict def md begin/av 71 def/T true def/F false def/mtx matrix def/s75 75 string def/sa8 8 string def/sb8 8 string def/sc8 8 string def/sd8 8 string def/s1 ( ) def/pxs 1 def/pys 1 def/ns false def1 0 mtx defaultmatrix dtransform exch atan/pa exch def/nlw .24 def/ppr [-32 -29.52 762 582.48] def/pgr [0 0 0 0] def/pgs 1 def/por true def/xb 500 array def/so true def/tso true def/fillflag false def/pnm 1 def/fmv true def/sfl false def/ma 0 def/invertflag false def/dbinvertflag false def/xflip false def/yflip false def/noflips true def/scaleby96 false def/fNote true def/fBitStretch true def/4colors false def/fg (Rvd\001\001\000\000\177) def/bdf{bind def}bind def/xdf{exch def}bdf/xl{neg exch neg translate}bdf/fp{pnsh 0 ne pnsv 0 ne and}bdf/nop{}bdf/lnop[/nop load]cvx bdf/vrb[{fp{fg 6 get 0 ne{gsave stroke grestore}{gsave 1 setlinewidth pnsh pnsv scale stroke grestore}ifelse}if newpath}bind/eofill loaddup/newpath load2 indexdup{clip newpath}bind{}binddup2 copy]def/sgd systemdict/setpagedevice known{{2 dict begin/PreRenderingEnhance exch def/Policies 1 dict dup/PreRenderingEnhance 1 put def currentdict end setpagedevice}}{{pop}}ifelse bdf/svsc systemdict/currentcolorscreen known{{currentcolorscreen/dkspf xdf/dkrot xdf/dkfreq xdf/dyspf xdf/dyrot xdf/dyfreq xdf/dmspf xdf/dmrot xdf/dmfreq xdf/dcspf xdf/dcrot xdf/dcfreq xdf}}{{currentscreen/spf xdf/rot xdf/freq xdf}}ifelse bdf/doop{vrb exch get exec}bdf/psu{/udf xdf/tso xdf /fNote xdf/fBitStretch xdf/scaleby96 xdf/yflip xdf/xflip xdf/invertflag xdf/dbinvertflag invertflag statusdict begin version cvr 47.0 ge product (LaserWriter) eq not and end invertflag and {not}if defxflip yflip or{/noflips false def}if/pgs xdf 2 index .72 mul exch div/pys xdf div .72 mul/pxs xdf ppr astore pop pgr astore pop/por xdf sn and/so xdf}bdf/tab{userdict /11x17 known{userdict begin /11x17 load exec end}{statusdict /setpage known{statusdict begin 792 1224 1 setpage end}{statusdict /setpageparams known{statusdict begin 792 1224 0 1 setpageparams end}if}ifelse}ifelse}bdf/a3Size{userdict /a3 known{userdict begin /a3 load exec end}{statusdict /setpageparams known{statusdict begin 842 1191 0 1 setpageparams end}if}ifelse}bdf/txpose{fNote{smalls}{bigs}ifelse pgs get exec pxs pys scale ppr aload pop por{noflips{pop exch neg exch translate pop 1 -1 scale}ifxflip yflip and{pop exch neg exch translate 180 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg translate}if xflip yflip not and{pop exch neg exch translate pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0 translate}if yflip xflip not and{ppr 1 get neg ppr 0 get neg translate}if}{noflips{translate pop pop 270 rotate 1 -1 scale}if xflip yflip and{translate pop pop 90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg translate}ifxflip yflip not and{translate pop pop 90 rotate ppr 3 get ppr 1 get neg sub neg 0 translate}if yflip xflip not and{translate pop pop 270 rotate ppr 2 get ppr 0 get neg sub neg 0 exch translate}if}ifelsestatusdict begin/waittimeout where{pop waittimeout 300 lt{statusdict/waittimeout 300 put}if}if end scaleby96{ppr aload pop 4 -1 roll add 2 div 3 1 roll add 2 div 2 copy translate .96 dup scale neg exch neg exch translate}if}bdf/fr{4 copy pgr aload pop 3 -1 roll add 3 1 roll exch add 6 2 roll 3 -1 rollsub 3 1 roll exch sub 3 -1 roll exch div 3 1 roll div exch scale pop pop xl}bdf/obl{{0.212557 mul}{pop 0}ifelse}bdf/sfd{ps fg 5 -1 roll get mul 100 div 0 ps 5 -1 roll obl ps neg 0 0 6a astore makefont setfont}bdf/fnt{findfont sfd}bdf/bt{sa 3 1 roll 3 index and put}bdf/sa(\000\000\000\000\000\000\000\000\000\000)def/fs{0 1 bt 1 2 bt 2 4 bt 3 8 bt 4 16 bt 5 32 bt 6 64 bt 7 128 bt sa exch 8 exch put}bdf/mx1 matrix def/mx2 matrix def/mx3 matrix def/bu{currentpoint 4colors{currentcmykcolor}{currentrgbcolor}ifelse currentlinewidth currentlinecap currentlinejoin currentdash exch aload length fg 5 sfl{1}{0}ifelse put pnsv pnsh 2t aload pop 3a aload pop mx2 aload pop mx1 aload pop mtx currentmatrix aload popmx3 aload pop ps pm restore/ps xdf mx3 astore pop}bdf/bn{/pm save def mx3 setmatrix newpath 0 0 moveto ct dup 39 get 0 exch getinterval cvx exec mtx astore setmatrix mx1 astore pop mx2 astore pop 3a astore pop 2t astore pop/pnsh xdf/pnsv xdf gw/sfl fg 5 get 0 ne def array astore exch setdash setlinejoin setlinecap setlinewidth 4colors{mysetcmykcolor}{setrgbcolor}ifelse moveto}bdf/fc{save vmstatus exch sub 50000 lt{(%%[|0|]%%)=print flush}if pop restore}bdf/tc{32768 div add 3 1 roll 32768 div add 2t astore pop}bdf/3a [0 0 0] def/2t 2 array def/tp{3a astore pop}bdf/tt{mx2 currentmatrix pop currentpoint 2 copy 2t aload pop qa 2 copy translate 3a aload pop exch dup 0 eq{pop}{1 eq{-1 1}{1 -1}ifelse scale}ifelse rotate pop neg exch neg exch translate moveto}bdf/te{mx2 setmatrix}bdf/th{3 -1 roll div 3 1 roll exch div 2 copy mx1 scale pop scale/sfl true def}bdf/tu{1 1 mx1 itransform scale/sfl false def}bdf/ts{1 1 mx1 transform scale/sfl true def}bdf/fz{/ps xdf}bdf/dv{dup 0 ne{div}{pop}ifelse}bdf/pop4{pop pop pop pop}bdf/it{sfl{mx1 itransform}if}bdf/gm{exch it moveto}bdf/rm{it rmoveto}bdf/lm{currentpoint sfl{mx1 transform}if exch pop sub 0 exch it rmoveto}bdf/fm{statusdict/manualfeed known}bdf/se{statusdict exch/manualfeed exch put}bdf/mf{dup/ma exch def 0 gt{fm se/t1 5 st ok ma 1 gt and{/t2 0 st/t3 0 ststatusdict/manualfeedtimeout 3600 put}if}if}bdf/jn{/statusdict where exch pop{statusdict exch /jobname exch put}if}bdf/pen{pnm mul/pnsh xdf pnm mul/pnsv xdf pnsh setlinewidth}bdf/min{2 copy gt{exch}if pop}bdf/max{2 copy lt{exch}if pop}bdf/dh{fg 6 1 put array astore dup {1 pxs div mul exch}forall astore exch pop exch pop exch setdash}bdf/ih[currentdash]def/rh{fg 6 0 put ih aload pop setdash}bdf/dl{gsave nlw pys div setlinewidth 0 setgray}bdf/dlin{exch currentpoint currentlinewidth 2 div duptranslate newpath moveto lineto currentpoint stroke grestore moveto}bdf/lin{fg 6 get 0 ne{exch lineto currentpoint 0 doop moveto}{exch currentpoint/pnlv xdf/pnlh xdf gsave newpath/@1 xdf/@2 xdf fp{pnlh @2 lt{pnlv @1 ge{pnlh pnlv moveto @2 @1 lineto pnsh 0 rlineto0 pnsv rlineto pnlh pnsh add pnlv pnsv add lineto pnsh neg 0 rlineto}{pnlh pnlv moveto pnsh 0 rlineto @2 pnsh add @1 lineto 0 pnsv rlinetopnsh neg 0 rlineto pnlh pnlv pnsv add lineto}ifelse}{pnlv @1 gt{@2 @1 moveto pnsh 0 rlineto pnlh pnsh add pnlv lineto 0 pnsv rlinetopnsh neg 0 rlineto @2 @1 pnsv add lineto}{pnlh pnlv moveto pnsh 0 rlineto0 pnsv rlineto @2 pnsh add @1 pnsv add lineto pnsh neg 0 rlineto0 pnsv neg rlineto}ifelse}ifelseclosepath fill}if @2 @1 grestore moveto}ifelse}bdf/gw{/pnm fg 3 get fg 4 get div def}bdf/lw{fg exch 4 exch put fg exch 3 exch put gw pnsv pnsh pen}bdf/barc{/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf/@6 xdf/@7 xdf/@8 xdf gsave@5 @7 add 2 div @6 @8 add 2 div translate newpath 0 0 moveto@5 @7 sub @6 @8 sub mtx currentmatrix pop scale @1{newpath}if0 0 0.5 @4 @3 arc @4 @3 sub abs 360 ge{closepath}ifmtx setmatrix @2 doop grestore}bdf/ar{dup 0 eq barc}bdf/ov{0 exch 360 exch true barc}bdf/rc{dup/@t xdf 0 eq{4 copy 3 -1 roll eq 3 1 roll eq and{pnsv 2 div sub exch pnsh 2 div sub exch 4 2 roll pnsv 2 div add exch pnsh 2 div add exch/@t 1 def}if}if currentpoint 6 2 roll newpath 4 copy 4 2 roll exch moveto 6 -1 roll lineto lineto lineto closepath @t doop moveto}bdf/mup{dup pnsh 2 div le exch pnsv 2 div le or}bdf/rr{/@1 xdf 2. div/@2 xdf 2. div/@3 xdf/@4 xdf/@5 xdf/@6 xdf/@7 xdf@7 @5 eq @6 @4 eq @2 mup or or{@7 @6 @5 @4 @1 rc}{@4 @6 sub 2. div dup @2 lt{/@2 xdf}{pop}ifelse@5 @7 sub 2. div dup @2 lt{/@2 xdf}{pop}ifelse@1 0 eq{/@2 @2 pnsh 2 div 2 copy gt{sub def}{0 pop4}ifelse}ifcurrentpoint newpath@4 @6 add 2. div @7 moveto@4 @7 @4 @5 @2 arcto pop4@4 @5 @6 @5 @2 arcto pop4@6 @5 @6 @7 @2 arcto pop4@6 @7 @4 @7 @2 arcto pop4closepath @1 doop moveto}ifelse}bdf/pr{gsave newpath/pl{exch moveto/pl{exch lineto}def}def}bdf/pl{exch lineto}bdf/ep{dup 0 eq{{moveto}{exch lin}{}{(%%[|1|]%%)= flush}pathforallpop grestore}{doop grestore}ifelse currentpoint newpath moveto}bdf/gr{64. div setgray}bdf/savescreen{ns not{/ns true def systemdict/currentcolorscreen known{currentcolorscreen/pkspf xdf/pkrot xdf/pkfreq xdf/pyspf xdf/pyrot xdf/pyfreq xdf/pmspf xdf/pmrot xdf/pmfreq xdf/pcspf xdf/pcrot xdf/pcfreq xdf}{currentscreen/sspf xdf/srot xdf/sfreq xdf}ifelse}if}bdf/restorescreen{/ns false def systemdict/setcolorscreen known{pcfreq pcrot/pcspf load pmfreq pmrot/pmspf load pyfreq pyrot/pyspf loadpkfreq pkrot/pkspf load setcolorscreen}{sfreq srot/sspf load setscreen}ifelse}bdf/pat{savescreen sa8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}setscreen exch not{gr}{pop}ifelse}bdf/sg{restorescreen gr}bdf/cpat{savescreen 10 2 roll 7 -1 roll sa8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}8 -1 roll sb8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sb8exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}9 -1 roll sc8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sc8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}10 -1 roll sd8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sd8exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}psuedo1 dsc 4{4 -1 roll 1 exch 64 div sub}repeat mysetcmykcolor pop pop}bdfsystemdict/setcolorscreen known{/psuedo1 lnop bdf/dsc/setcolorscreen load def}{/psuedo1{16{pop}repeat sa8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}}bdf/bwsc{setscreen dup gr 0 exch 0 exch 64 exch 64 exch 64 exch}bdf/dsc/bwsc load def}ifelsesystemdict/setcmykcolor known{/mysetcmykcolor /setcmykcolor load def}{/mysetcmykcolor{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}bdf}ifelse/dc{transform round .5 sub exch round .5 sub exch itransform}bdf/sn{userdict/smooth4 known}bdf/x8{3 bitshift}bdf/x4{2 bitshift}bdf/d4{-2 bitshift}bdf/d8{-3 bitshift}bdf/rb{15 add -4 bitshift 1 bitshift}bdf/db{/@7 save def/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf/@6 @5 @3 4 add mul defdc translate scale/xdbit 1 1 idtransform abs/ydbit exch def abs def{0 0 1 ydbit add 1 10 rc clip}if@1 0 eq @1 4 eq or{currentrgbcolor 1 setgray ydbit 0 1 ydbit add 1 2 rc setrgbcolor}if@1 3 eq @1 7 eq or{1 setgray}{currentrgbcolor 2 index eq exch 2 index eq and exch pop{0 setgray}if}ifelse/@9 @1 0 eq @1 1 eq @1 3 eq or or dbinvertflag xor def/@13 @6 def@2 fBitStretch or{/@10 @4 x4 def/@11 @3 x4 def/@12 @10 rb def/@13 @12 @11 mul def/@15 1 1 dtransform abs/calcY 1 index def round cvi/@14 exch defabs/calcX 1 index def round cvi scaleby96 not{1 add}if def/@16 @15 rb def/@17 @16 @14 mul def}ifsn @13 60000 lt and @2 fBitStretch or and{mtx currentmatrix dup 1 get exch 2 get 0. eq exch 0. eq and @17 60000 lt and fBitStretch and{@16 3 bitshift @14 @9 [calcX 0 0 calcY 0 0]{@17 string @13 stringcurrentfile @6 string readhexstring pop 1 index @4 @3 @5 @12 @2 smooth4@10 @11 @12 dup string 5 index @15 @14 @16 dup string stretch}imagemask}{@12 x8 @11 @9 [@10 0 0 @11 0 0]{@13 stringcurrentfile @6 string readhexstring pop 1 index @4 @3 @5 @12 @2 smooth4}imagemask}ifelse}{@5 3 bitshift @3 4 add @9 [@4 0 0 @3 0 2]{currentfile @6 string readhexstring pop}imagemask}ifelse@7 restore}bdfsystemdict/setcmykcolor known{/psuedo lnop bdf/di/colorimage load def}{/routines[{.3 mul add 1}bind{.59 mul add 2}bind{.11 mul add round cvi str exch i exch put/i i 1 add def 0 0}bind]def/psuedo{/i 0 def 0 exch 0 exch{exch routines exch get exec}forall pop pop str}bdf/bwi{pop pop image}bdf/di/bwi load def}ifelse/cdb{/@7 save def/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdfsystemdict/setcmykcolor known not{dc}if translate scale /@6 xdf/@18 @5 dup 60000 ge{pop 60000}if string def @6 not{/str @18 0 @18 length 3 idiv getinterval def}if @4 @3 8 [@4 0 0 @3 0 0]@6{{currentfile @18 readhexstring pop}image}{{currentfile @18 readhexstring pop psuedo}false 3 di}ifelse @7 restore}bdf/wd 16 dict def/mfont 14 dict def/mdf{mfont wcheck not{/mfont 14 dict def}if mfont begin xdf end}bdf/cf{{1 index/FID ne{def}{pop pop}ifelse}forall}bdf/rf{/@1 exch def/@2 exch defFontDirectory @2 known{cleartomark pop}{findfont dup begin dup length @1 add dict begincf{/Encoding macvec def}{Encoding dup length array copy/Encoding exch defcounttomark 2 idiv{Encoding 3 1 roll put}repeat}ifelsepopexec currentdict end end @2 exch definefont pop}ifelse}bdf/bmbc{exch begin wd begin/cr xdfsaveCharTable cr 6 mul 6 getinterval{}forall/bitheight xdf/bitwidth xdf.96 div/width xdfGkernmax add/XOffset xdf Gdescent add/YOffset xdf/rowbytes xdfrowbytes 255 eq{0 0 0 0 0 0 setcachedevice}{Gnormsize dup scalewidth 0 XOffset YOffset bitwidth XOffset add bitheight YOffset addsetcachedevicerowbytes 0 ne{XOffset YOffset translate newpath 0 0 movetobitwidth bitheight scalesn{/xSmt bitwidth x4 def/ySmt bitheight x4 def/rSmt xSmt rb defrSmt x8 ySmt true[xSmt 0 0 ySmt neg 0 ySmt]{rSmt ySmt mul string CharData cr get1 index bitwidth bitheight rowbytes rSmt tso smooth4}}{rowbytes 3 bitshift bitheight 4 add true[bitwidth 0 0 bitheight neg 0 bitheight 2 add]{CharData cr get}}ifelseimagemask}if}ifelserestoreend end}bdf/bb{.96 exch div/Gnormsize mdf 2 index/Gkernmax mdf 1 index/Gdescent mdf3 index div 4 1 roll2 index div 1. 5 2 rollexch div 4 1 roll4 array astore/FontBBox mdf}bdf/cdf{mfont/CharData get 3 1 roll put}bdf/bf{mfont begin/FontType 3 def/FontMatrix [1 0 0 1 0 0] def/Encoding macvec def/MFontType 0 def/BuildChar/bmbc load defendmfont definefont pop}bdf/wi LW 1 eq{{gsave 0 0 0 0 0 0 0 0 moveto lineto lineto lineto closepath clip stringwidth grestore}bind}{/stringwidth load}ifelse def/aps{0 get 124 eq}bdf/xc{s75 cvs dup}bdf/xp{put cvn}bdf/scs{xc 3 67 put dup 0 95 xp}bdf/sos{xc 3 79 xp}bdf/sbs{xc 1 66 xp}bdf/sis{xc 2 73 xp}bdf/sob{xc 2 79 xp}bdf/sss{xc 4 83 xp}bdf/dd{exch 1 index add 3 1 roll add exch}bdf/smc{moveto dup show}bdf/ndf2{udf{dup /FontType get 0 eq{/FDepVector get{dup /FontType get 0 eq{ndf2}{dup /df2 known{begin df2 0 null put end}{pop}ifelse}ifelse}forall}{/df2 known{dup begin df2 0 null put end}if}ifelse}{pop}ifelse}bdf/kwn{FontDirectory 1 index known{findfont dup ndf2 exch pop}}bdf/gl{1 currentgray sub setgray}bdf/newmm{dup /FontType get 0 eq{dup maxlength dict begin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall currentdict enddup /FDepVector 2 copy get[exch 6 index exch 6 index exch{newmm 3 1 roll}forall pop pop] put dup}{/mfont 10 dict def mfont begin/FontMatrix [1 0 0 1 0 0] def/FontType 3 def/Encoding macvec def/df 1 index def/df2 1 array def/FontBBox [0 0 1 1] def/StyleCode 2 index def/mbc{bcarray StyleCode get}def/BuildChar{exch begin	wd begin/cr exch def/cs s1 dup 0 cr put def df /MFontType known not{df2 0 get null eq{df dup length 2 add dict begin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall/StrokeWidth 1 0 FontMatrix idtransform pop dup nlw mul pys div ps div exch 0.012 mul 2 copy le{exch}if pop def/PaintType 2 def currentdict end/q exch definefont df2 exch 0 exch put}if}if mbc exec end end}def end mfont}ifelse3 index exch definefont exch pop}bdf/mb{dup sbs kwn{0 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf/mo{dup sos kwn{2 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf/ms{dup sss kwn{4 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf/ou{dup sos kwn{mfont/df2 known{mfont begin df2 0 null put end}if 3 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf/su{dup sss kwn{mfont/df2 known{mfont begin df2 0 null put end}if 5 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf/ao{/fmv true def ou}bdf/as{/fmv true def su}bdf/vo{/fmv false def ou}bdf/vs{/fmv false def su}bdf/c{currentrgbcolor dup 4 1 roll eq 3 1 roll eq and/gray xdf}bdf/bcarray[{/da .03 def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidthcs 0 0 smc da 0 smc da da smc 0 da moveto show}bind dup{/da 1 ps div def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidthcs 0 0 smc da 0 smc da da smc 0 da smc c gray{gl}{1 setgray}ifelse da 2. div dup moveto show}bind{df setfont gsave cs wi grestore setcharwidth c gray{gl}{currentrgbcolor 1 setgray}ifelse cs 0 0 smc df2 0 get setfontgray{gl}{4 1 roll setrgbcolor}ifelse 0 0 moveto show}bind{/da 1 ps div def/ds .05 def/da2 da 2. div def df setfont gsave cs wi 1 index 0 ne{exch ds add da2 add exch}if grestore setcharwidthcs ds da2 add .01 add 0 smc 0 ds da2 sub translate 0 0 smc da 0 smc da da smc 0 da smc c gray{gl}{1 setgray}ifelse da 2. div dup moveto show}bind{/da .05 def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth c cs da .01 add 0 smc 0 da translategray{gl}{currentrgbcolor 1 setgray 4 -1 roll}ifelse 0 0 smc gray{gl}{4 1 roll setrgbcolor}ifelse df2 0 get setfont 0 0 moveto show}bind]def/st{1000 mul usertime add dup 2147483647 gt{2147483647 sub}if def}bdf/the{usertime sub dup 0 lt exch -2147483648 gt and}bdf/6a 6 array def/2a 2 array def/3q 3 array def/qs{3 -1 roll sub exch 3 -1 roll sub exch}bdf/qa{3 -1 roll add exch 3 -1 roll add exch}bdf/qm{3 -1 roll 1 index mul 3 1 roll mul}bdf/qn{6a exch get mul}bdf/qA .166667 def/qB .833333 def/qC .5 def/qx{6a astore popqA 0 qn qB 2 qn add   qA 1 qn qB 3 qn addqB 2 qn qA 4 qn add   qB 3 qn qA 5 qn addqC 2 qn qC 4 qn add   qC 3 qn qC 5 qn add}bdf/qp{6 copy 12 -2 roll pop pop}bdf/qc{exch qp qx curveto}bdf/qi{{exch 4 copy 2a astore aload pop qa .5 qm newpath moveto}{exch 2 copy 6 -2 roll 2 qm qs 4 2 roll}ifelse}bdf/qq{{qc 2a aload pop qx curveto}{exch 4 copy qs qa qx curveto}ifelse}bdf/pt{currentpoint newpath moveto}bdf/qf{/fillflag true def}bdf/ec{dup 4 and 0 ne{closepath}if 1 and 0 ne{0 doop}if grestore currentpoint newpath moveto/fillflag false def}bdf/eu{currentpoint fp{0 ep}{grestore newpath}ifelse moveto/fillflag false def}bdf/bp{currentpoint newpath 2 copy moveto}bdf/ef{gsave fillflag{gsave eofill grestore}if}bdf/sm{0 exch{@1 eq{1 add}if}forall}bdf/lshow{4 1 roll exch/@1 exch def{1 index wi pop sub 1 index sm dv 0 @1 4 -1 roll widthshow}{1 index wi pop sub1 index dup sm 10 mul exch length 1 sub add dv dup 10. mul 0 @1 4 -1 roll 0 6 -1 roll awidthshow}ifelse}bdf/setTxMode{sa 9 2 index put exch not{3 eq{1}{0}ifelse setgray}{pop}ifelse}bdf/SwToSym{{}mark false/Symbol/|______Symbol 0 rf 0 sa 6 get 0 ne{pop 1}{sa 7 get 0 eq{pop 2}if}ifelsesa 1 get 0 ne/|______Symbolsa 4 get 0 ne{vs}{sa 3 get 0 ne{vo}{fnt}ifelse}ifelse}bdf/mc{0 3 1 roll transform neg exch pop}bdf/ul{dup 0 ne sa 2 get 0 ne and{gsave 0 0/UnderlinePosition kif{mc}{ps -10 div}ifelse/UnderlineThickness kif{mc}{ps 15 div}ifelseabs setlinewidth neg rmovetosa 4 get 0 ne{gsave currentlinewidth 2. div dup rmoveto currentpoint newpath moveto2 copy rlineto stroke grestore}ifsa 3 get sa 4 get or 0 ne{gsave currentrgbcolor dup 4 1 roll eq 3 1 roll eq and{gl}{1 setgray}ifelse 2 copy rlineto stroke grestore rlineto strokepath nlw pys div setlinewidth}{rlineto}ifelsestroke grestore}{pop}ifelse}bdf/sgt{2 copy known{get true}{pop pop false}ifelse}bdf/kif{currentfont dup/FontMatrix get exch/FontInfo sgt{true}{currentfont/df sgt{dup/FontInfo sgt{3 1 roll/FontMatrix get mtx concatmatrix exch true}{pop pop pop false}ifelse}{pop pop false}ifelse}ifelse{3 -1 roll sgt{exch true}{pop false}ifelse}{false}ifelse}bdf/blank/Times-Roman findfont/CharStrings get/space get def/macvec 256 array def/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/USmacvec 0 32 getinterval astore popmacvec 32/Times-Roman findfont/Encoding get32 96 getinterval putinterval macvec dup 39/quotesingle put 96/grave put/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronmacvec 128 128 getinterval astore pop{}mark true/Courier/|______Courier 0 rf{/Metrics 21 dict begin/zero 600 def/one 600 def/two 600 def/three 600 def/four 600 def/five 600 def/six 600 def/seven 600 def/eight 600 def/nine 600 def/comma 600 def/period 600 def/dollar 600 def/numbersign 600 def/percent 600 def/plus 600 def/hyphen 600 def/E 600 def/parenleft 600 def/parenright 600 def/space 600 defcurrentdict end def currentdict/UniqueID known{/UniqueID 16#800000 def}if/FontBBox FontBBox 4 array astore def}mark true/Helvetica/|______Seattle 1 rf/oldsettransfer/settransfer load def/concatprocs{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array defnewproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx}def/settransfer{currenttransfer concatprocs oldsettransfer}def/PaintBlack{{1 exch sub}settransfer gsave newpath clippath 1 setgray fill grestore}def/od{(Rvd\001\001\000\000\177) fg copy pop txpose1 0 mtx defaultmatrix dtransform exch atan/pa exch defnewpath clippath mark{transform{itransform moveto}}{transform{itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf pop ct 39 0 put10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}ifstatusdict/processcolors known{statusdict begin processcolors end 4 eq{/4colors true def}if}if}bdf/cd{}bdf/op{/sfl false def systemdict/currentcolorscreen known{dcfreq dcrot/dcspf load dmfreq dmrot/dmspf load dyfreq dyrot/dyspf loaddkfreq dkrot/dkspf load setcolorscreen}{freq rot/spf load setscreen}ifelse savescreen/ns false def/pm save def}bdf/cp{not{userdict/#copies 0 put}if ma 0 gt{{t1 the{exit}if}loop}if{/copypage load exec}{/showpage load exec}ifelse pm restore}bdf/px{0 3 1 roll tp tt}bdf/psb{/us save def}bdf/pse{us restore}bdf/ct 40 string def/nc{currentpoint initclip newpath gc{dup type dup/arraytype eq exch/packedarraytype eq or{exec}if}forall clip newpath moveto}def/kp{ct 0 2 index length 2 index 39 2 index put getinterval copy cvx exec mx3 currentmatrix pop}bdfendLW 1 eq userdict/a4small known not and{/a4small[[300 72 div 0 0 -300 72 div -120 3381]280 3255{statusdict/jobstate (printing) put 0 setblinkmarginsexch 196 add exch 304 add 8 div round cvi frametoroketstatusdict/jobstate (busy) put1 setblink}/framedevice load60 45{dup mul exch dup mul add 1.0 exch sub}/setscreen load{}/settransfer load/initgraphics load/erasepage load]cvxstatusdict begin bind end readonly def}ifmd begin/bigs[lnop userdict/letter known{/letter load}{lnop}ifelse userdict/legal known{/legal load}{lnop}ifelse userdict/a4 known{/a4 load}{lnop}ifelse userdict/b5 known{/b5 load}{lnop}ifelse lnop lnop lnop /tab load/a3Size load]def/smalls[lnop userdict/lettersmall known{/lettersmall load}{userdict/note known{/note load}{lnop}ifelse}ifelseuserdict/legal known{/legal load}{lnop}ifelse userdict/a4small known{/a4small load}{lnop}ifelse userdict/b5 known{/b5 load}{userdict/note known{/note load}{lnop}ifelse}ifelse lnop lnop lnop /tab load/a3Size load]def endsystemdict/currentpacking known{setpacking}if{currentfile eexec} ( %endeexec) ok userdict/stretch known not and checkload0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark
 %endeexec
{currentfile eexec} ( %endeexec) ok userdict/smooth4 known not and checkloadF94E00EE41A71C59E5CAEED1EDBCF23D1DBA1EE99B9BB356492923BD8B1BA83A87CEB0E07377A31FD6241E814681118E17DC7CACE570399506E6E441B871B6043831BD03EFC11DBBD8001EE2FF8CFBD485065D455A2E15AC36F1A84AD8789FA6461199C7CD14CB9FD64D4B06452B7FC0A8FC263F70F1CCB893295D4DE70ADAB771C0F84396FA98C60B11DA02ABA157298DF0A23621853BEF167443A985ADC09BEFFD51CB4D29179E2B34609EF38A49DA61F4BFC256A3DE0732D7D29754A194857B9C9E9971227AA1DD0611FBB10E44E5FF66C062D9C24ED3290529330BC317825E876929582DB0E39B9FC5EFD20CC1D4F94920EB9C534D0DA90DE70D25BC7287319CF28602B3F46633C242CAFC8905E960317E3C2FA20AB8DB06ADBAF292FC7BA2CA14EE65DF28B99CC11666B70AD33E8E1D57D63D4B89ECC615AE5747C1CA752C833D8D6DE54CD4A0350B44310555CE3BD2C615ADD27B634CDB350AF3A432CE78AACD2909A5B586F666CD87919A36DB1CBE86B3CE281DFD01CD7E1B8A18A4B415CECBFF79A5C4390A15EA77D14D6BE12BAB5A8268C3F286D0590060647CABED674443CD258F11415E866AB330A251691B61F2422A61AFE59B6B4FBDCF85ED9BA0F8E483C034089E6877FF5923698D3A0DC0EED6B9CFD32DF0839BC4EA5F6D1FCB6DD0920391E57E84745131D02D100179F4E0A68EC0A5FF6680A6F463D038B04AF63FFA13D743B995A26A743C26D387209023C91DE43DF047A16F328AC9DDC08573B38BE9EA341EA16C78EC32F3A1B36B90D95A50610F4D050EC1C33497F3F3A81A1B4C8BEF0BA84EE2FAA32DC112DAC490AF53E1749C4A0D866CAF7B893E52383B0D38065C333FB122B700D7246F7EE87D942AE3DB5C1DD77E9E76C80CC5AD63D28DFED0E229CE604673F78CD47F258FDF5BF3A3EAEC5C9BC8E482D8DBA9D268A35DA8C095A690679ED2123E8B8F5E4826FA3B199EAA5D482D4B6AA86572E387CECEB7149C8947F41D6339328A748A17F8C4AD3B0555F1E409450BA0C564F1F488BB5096EB003568D4D5EF6489897E27409547D0EE4487D30184793B0F27BD265A64BDB3EA6761569DA955620C612E718677B77D6D81B999C6298877AFE0D1D6F6F358377A8BD2402F669C64B972B3A065EF7DD4BDEFFFE17E63DB8898FA6E69166B710AAD6BA2EA9AF61E4B8C8701638D4D6E4DFFFC192AEF6BC027095C4C72D748979675BA29FAF61E75343E14E61034602E5A79CD2519796ED6A9CC4EDEA46A9B59D4A807E786B5EE46F25B0360BC8E7C12D723122CDEEF247C9776F4C99C8EBED6828AA19744B5ADF0D07D95D98B3072372388D41B0FAB1CCE2775170679575ECDCA13B22A17FE9C6605C3445F58F1A829512DAB6C528F83580C8AA53C35D605F626F5AD0B7FC1EA87D69A835E3F53A1F450FB0AF42A5772F89D92A50D10F15BDBDA409F50C0B8AB93FE8A16D029DD8BB5C480D1466735ED4D9CAF637E5ECD6C2ECB6BF3B3EFBEE7AB936D2C568E3009D156B87CACB1FB3A48A70BC91B2EC35CC9147FFB1A524E2B2F2E4E2C1B12F1C1C63768BB95CD62FEC01CBA79B9FA282DD4DF49990F27FF8EE4E2DDE2F0ACD83BC9D4BE0090192C7A799967EC4DC2D63C0835E22D4C4B366D7FDCF3A05A4B53DF780F986EF25C79B665D5C00EFF7F17C0BB6D544F9D83A7FDAC47D9C5683A656011374253C918FF6EA64749DD971B2300DD5320033E01EC591F6318CCE94CE2B81C04322EC52B624E50643B52391CCD2AB56396A2AD8E2D3CA61B80D9D4CC363B2DF7863526958CDF3497E36648406C317E58EC563E7C26149A2A3C643ADFB39A8DD92974C6D2A2A9D7B71CDF3FEBBF32BB02E7B45CF53AAEAD5E963A4AA4AF9A149A08A4EC303D5F2369977E93F54897EEAD31B06C5845D63F49D65F8E5573962241A57CCD717CE6CA8C784A11192943616EA059B51BC38429E18D0121FCBB6FBD5D909B0D89E616C66DEF6A0F165A7030BD911A1B120468329CBB006C8D37720E531CF31E878CB4AAAC137633675C3D546F5162487AB35F470C042BDEB945E0F2532BF92AA6FD53434440221ECD3533A7AA89900CB19EFE2CD872DF8B7969AF0D3B72BF31DC5DD69CA6460966F61AB17CB507964098DBA3AF122EEC3128A9BAFE1034493F372B36BD1351205E9043A67C544402D8BCE24358C8A5CE33867A00794CF7097D59C88279A11EE9C854E7E7AAE881F9828C569D208F5F33375F59E9A3818CFA38AAD0CBFBA32F9F44A8BB79DE4C40E3886457C16DA4A27953AA1E99472E35F2323F0BAA5E37DC28CBA46FEFB73B190016055ADD4D27615D748499A0E1C4B8C7EC339C1C4D95A813A85918A8D01EEB485DDCDCEA6EA3F2C2A9D85C139CD90CCB352634F9AFE836BCAC0C274E352BA2071B5269D5DE4CCDE3FF990CBA974980C7332AE1545A9C60D5D1459D3AE95C1AC065733AF14FADB440A110DD539563B8D850CD0704C52F3F7CCCB53630D776560CBD22D8FF08F5B354487A171AEC15F5F54DE9CAB668BCAC573E788D92762EF63E76087005F4AC2D02E0CAC173C11BE62ACE5DC4D3374F2F9746C9981E125FF9AB8CAE76D13039E2C54DFD708E028A619EA1ED78E6B46F06DF0D0B74BBEDD8C190C7C0CEBDE8F7A4888CC36575313478DD2CFE392E9BB7B2416955D44B7024A3BA43FBF37293B386D64746D7748895411D243FAEC50638F2AA33337D7FA018ADDAC5835A0DDFAE99AD6299DFB4CA6872C59853E3AC12FC9E3D26629C5B49CF844C87B3C4BFBE3074E3A1CE6984758C20C661084381CD6B4582D84F19C0000B5FC0DCB42B567E396031601C095D7016283EBE5F13CD8A3A374A74DDBBABD36081149F8BC242085F2F7297CC97FD3B8BAD206D8AC9707A39ECCC7963B522E08DA391A1EF12DD4D746DBDDDCC0834F88160CF189A9645567CEC2F023A571AF0DFD15DB85B744C28C000DF53B05F8F210841F6E87A04F20C777B7C0BE6182BE2E90226E5301A12532A745F2FAAA81637CF11B78CD2B99A4D18B862D6C5DBD31793FB16A2D9AAD376D4484D75AA833D0068B1D34DB74E3302480854E3B5484D8A47E39A89A2FA927BC3641EA7F8E004FDE4C2F08D40D99F1ACB47CAF6887629BF6DFE12968D297596D28CE0CF148B12E7DCB49FB94F5ADBD214C3A6CE1E249831BA9EB8A189F2CE1ABE39A7B537253E369A508A2AF2ADB9463F9B56BBBFF31D535FF997F537C6675C196E7ECBD493F652FA7CC6D9C1CA3379BFDB5AF7513C6E834054494296B91A6EE800114363D5D5D0759F41B4DECB653B9DE3E94583579EF549ED5F3FAFB12661ABC0C57A332406517ED3454EDED34B386C60F78DC976266E0EAF54FC245FB0E3EFC8016236436B599C1C97A8C5E0AC8F7836161873C71F01ED9CC25C236420F41FD8277993D3959205912FA0927B59E3DAE7377D82079447D6E41EE5AEC0DFFF79AF8F4ED47F17EE708FEA45877860D56F8CBCE65A061E8E1CA4A5FBAF0E13429A7F0ADB6F178FA449F46CC539BBC0107E3A53B1C362A04B20E6D721E7E6E1E4976A11DDC98C7614D22B53DFBB6DAE533AC9BE882021A735C30DAA4A44AED09F49A390E8CFF59BD9C30667AF21B03EC5CEBD5C2C3AA2769E8D714191A48E7DDF50B13D1560E82EFB65FCE601AE9E8C351FBA1DED80B7351314E7F9F9A784BFE3759B7E322A84E7B51F9DC5F5D9C8050CD79B27C0A4B0DD68A3C27A948AD6858E35B960D2DEA838C479CAEA83B1A912174ACB2100E55E7A14892D7A9B3711FF0B20065C1995B49E1F23464A92DD140642E3A7B1973849E64D1A3CF600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark
 %endeexec
%%EndProcSet%%EndProlog%%BeginDocumentSetupmd beginF sgdsvscT T 0 0 781 538 -30 -28 811 566 100 72 72 3 F F F F T T T F psu(; document: Report)jn0 mfod%%EndDocumentSetup%%Page: ? 1op0 0 xl1 1 pen0 0 gm(nc 0 0 781 538 6 rc)kp167 238 gm(nc 50 0 377 538 6 rc)kp1.50659 0 rmovetoF 1 setTxMode1 fsbu fc{}mark T /Helvetica-Bold /|______Helvetica-Bold 0 rfbn18 fzbu fc2 F /|______Helvetica-Bold fntbn(Coco/R)show219 122 gm11.41015 0 rmoveto14 fzbu fc2 F /|______Helvetica-Bold fntbn(A Generator for Fast Compiler Front-Ends)show271 224 gm0 fsbu fc{}mark T /Helvetica /|______Helvetica 0 rfbnbu fc2 F /|______Helvetica fntbn-0.14265 0.(H.M\232ssenb\232ck)ashow307 177 gm0.05419 0 rmoveto10 fzbu fc2 F /|______Helvetica fntbn(ETH Z\237rich, Institut f\237r Computersysteme)show323 201 gm0.17236 0 rmoveto(ETH-Zentrum, CH-8092 Z\237rich)show339 139 gm2.75952 0 rmoveto(Tel.: +41-1-254 7342, E-mail: moessenboeck@inf.ethz.ch)showF T cp%%Page: ? 2op0 0 xl1 1 pen20 400 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(2)show100 34 gm(nc 50 0 669 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn0.63578 0.(Abstract)ashow128 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.62011 0. 32 0.06201 0.(Formal compiler descriptions serve two purposes: \(1\) they can be used as a reference document which)awidthshow142 34 gm0.82427 0. 32 0.08242 0.(specifies the syntax and the semantics of a language, and \(2\) they provide a convenient notation from)awidthshow156 34 gm0.29144 0. 32 0.02914 0.(which efficient compilers can be generated. Compiler generating systems put emphasis on either the one)awidthshow170 34 gm0.05264 0. 32 0.00526 0.(or the other of these aspects. The system described in this report mainly concentrates on the second goal.)awidthshow184 34 gm1.49963 0. 32 0.14996 0.(We show that it is possible to generate compilers that are as efficient as hand-coded and carefully)awidthshow198 34 gm0.92346 0. 32 0.09234 0.(optimized production-quality compilers. Our system generates recursive descent parsers with a simple)awidthshow212 34 gm-0.01786 0.(error-handling mechanism and scanners with a special buffering scheme. Almost as important as efficiency)ashow226 34 gm-0.05258 0.(is the simplicity and adequacy of the system. Programmers are not willing to use a tool if it does not come in)ashow240 34 gm0.02899 0. 32 0.00289 0.(handy in their work, if it uses a cryptic notation or a multitude of options and special cases. The tool should)awidthshow254 34 gm-0.01171 0.(make their work easier without limiting their flexibility. We used our system to generate an Oberon compiler)ashow268 34 gm-0.03524 0.(that is even faster than the standard Oberon compiler used at ETH.)ashow324 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn0.95454 0.(Contents)ashow352 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.66255 0.(1.)ashow352 48 gm0.16035 0.(Introduction)ashow376 34 gm0.66255 0.(2.)ashow376 48 gm0.08026 0. 32 0.00802 0.(The Compiler Description Language Cocol/R)awidthshow390 48 gm0.55174 0.(2.1)ashow390 68 gm(Overall Structure)show404 48 gm0.55174 0.(2.2)ashow404 68 gm0.43624 0. 32 0.04362 0.(Scanner Specification)awidthshow418 48 gm0.55174 0.(2.3)ashow418 68 gm0.03417 0. 32 0.00341 0.(Parser Specification)awidthshow442 34 gm0.66255 0.(3.)ashow442 48 gm-0.06913 0.(Using Coco/R to Generate a Compiler)ashow456 48 gm0.55174 0.(3.1)ashow456 68 gm0.03433 0. 32 0.00343 0.(Scanner Interface)awidthshow470 48 gm0.55174 0.(3.2)ashow470 68 gm-0.07473 0.(Parser Interface)ashow484 48 gm0.55174 0.(3.3)ashow484 68 gm-0.28596 0.(Grammar Tests)ashow508 34 gm0.66255 0.(4.)ashow508 48 gm-0.01744 0.(Hints for Advanced Users of Coco/R)ashow532 34 gm0.66255 0.(5.)ashow532 48 gm0.05061 0.(Implementation)ashow546 48 gm0.55174 0.(5.1)ashow546 68 gm0.19622 0. 32 0.01962 0.(Scanner Generation)awidthshow560 48 gm0.55174 0.(5.2)ashow560 68 gm-0.04244 0.(Parser Generation)ashow574 48 gm0.55174 0.(5.3)ashow574 68 gm-0.01649 0.(Error Recovery)ashow598 34 gm0.66255 0.(6.)ashow598 48 gm0.08042 0.(Measurements)ashow622 34 gm0.66255 0.(7.)ashow622 48 gm-0.12846 0.(Summary)ashow650 34 gm-0.12419 0.(Appendix A  Cocol/R Grammar)ashow664 34 gm-0.06437 0.(Appendix B  Sample Attributed Grammar in Cocol/R)ashowF T cp%%Page: ? 3op0 0 xl1 1 pen20 261 gm(nc 746 0 781 538 6 rc)kp29 500 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(3)show63 34 gm(nc 53 0 728 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn4.40567 0. 32 0.44056 0.(1. Introduction)awidthshow91 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.49301 0. 32 0.04930 0.(Coco/R is a program that takes an augmented EBNF grammar of a language and generates a recursive)awidthshow105 34 gm-0.06611 0.(descent parser and a scanner for this language. The programmer has to supply a main module that calls the)ashow119 34 gm0.17700 0. 32 0.01770 0.(parser, as well as semantic modules that are called from within the grammar \(e.g., a symbol table handler)awidthshow133 34 gm-0.04187 0.(and a code generator\). )ashow-261 -113 xl0 0 gm(nc -96 0 0 309 6 rc)kp64 gr-66 221 -51 264 4 rc0 gr-65.5 221.5 -51.5 263.5 0 rc1 64 lw64 gr-96 221 -81 264 4 rc0 gr-95.5 221.5 -81.5 263.5 0 rc64 1 lw1 1 lw64 gr-30 176 -15 219 4 rc0 gr-29.5 176.5 -15.5 218.5 0 rc1 64 lw64 gr-30 221 -15 264 4 rc0 gr-29.5 221.5 -15.5 263.5 0 rc64 gr-30 266 -15 309 4 rc0 gr-29.5 266.5 -15.5 308.5 0 rc-55 229 gmF 1 setTxMode9 fzbu fc2 F /|______Helvetica fntbn0.10018 0.(Parser)ashow-85 233 gm-0.16621 0.(Main)ashow-19 181 gm0.08155 0.(Scanner)ashow-4 226 gm(Semantic modules)show-39 82 gm(Coco)show-16 9 gm-0.14161 0.(Compiler)ashow-5 4 gm0.14942 0.(description)ashow-30 197 gm0 gr-39 197 lin-30 287 gm-39 287 lin-39 197 gm-39 227 lin-39 257 gm-39 287 lin-39 227 gm(nc -49 0 0 309 6 rc)kp-51 227 lin(nc -96 0 0 309 6 rc)kp-56 222 -46 232 75 105 4 ar-39 257 gm(nc -49 0 0 309 6 rc)kp-51 257 lin(nc -96 0 0 309 6 rc)kp-56 252 -46 262 75 105 4 ar-30 242 gm(nc -49 0 0 309 6 rc)kp-51 242 lin(nc -96 0 0 309 6 rc)kp-56 237 -46 247 75 105 4 ar-66 242 gm(nc -79 0 0 309 6 rc)kp-81 242 lin(nc -96 0 0 309 6 rc)kp-86 237 -76 247 75 105 4 ar-66 5 gm-30 5 lin-30 35 lin-72 35 lin-72 11 lin-66 5 lin-66 11 lin-72 11 lin-60 137 gm(nc -96 0 0 195 6 rc)kp-60 197 lin(nc -96 0 0 309 6 rc)kp-65 192 -55 202 165 195 4 ar-24 137 gm(nc -96 0 0 156 6 rc)kp-24 158 lin(nc -96 0 0 309 6 rc)kp-29 153 -19 163 165 195 4 ar-24 137 gm-39 137 lin-45 137 gm-60 137 lin-39 137 gm-39 113 lin-45 137 gm-45 113 lin-42 44 gm(nc -96 0 0 66 6 rc)kp-42 68 lin(nc -96 0 0 309 6 rc)kp-47 63 -37 73 165 195 4 ar64 1 lw1 1 lw261 113 xl289 34 gm(nc 53 0 728 538 6 rc)kpF 1 setTxMode10 fzbu fc2 F /|______Helvetica fntbn0.99166 0. 32 0.09916 0.(The input language of Coco/R \(Cocol/R\) is based on )awidthshow2 fsbu fc{}mark T /Helvetica-Oblique /|______Helvetica-Oblique 0 rfbnbu fc2 F /|______Helvetica-Oblique fntbn1.83914 0. 32 0.18391 0.(attributed grammars)awidthshow0 fsbu fc2 F /|______Helvetica fntbn1.30706 0. 32 0.13070 0.(. Attributed grammars were)awidthshow303 34 gm0.64514 0. 32 0.06451 0.(introduced by )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.18249 0.(Knuth)ashow0 fsbu fc2 F /|______Helvetica fntbn0.60043 0. 32 0.06004 0.( [Knu68] as a formalism to specify the semantics of context-free languages. In their)awidthshow317 34 gm1.20880 0. 32 0.12088 0.(original form they are static descriptions. They describe dependencies between attributes of symbols)awidthshow331 34 gm0.24551 0. 32 0.02455 0.(without giving an order in which the dependencies are to be evaluated. Many compiler generators stick to)awidthshow345 34 gm0.61264 0. 32 0.06126 0.(this notation [GaGi84, KHZ82, R\212i83]. For the implementation of efficient compilers, however, it may be)awidthshow359 34 gm-0.02233 0.(better to look at attributed grammars as an algorithmic notation. The evaluation order of semantic actions is)ashow373 34 gm1.26373 0. 32 0.12637 0.(then determined by the textual order of the actions in the grammar. There are also several compiler)awidthshow387 34 gm0.07232 0. 32 0.00723 0.(generators, including Coco/R, that use this paradigm [John75, Gro88]. )awidthshow415 34 gm0.59890 0. 32 0.05989 0.(Coco/R is an improvement over an older version of this program \(Coco [ReM\23289]\). The main difference)awidthshow429 34 gm1.04827 0. 32 0.10482 0.(between Coco and Coco/R is that Coco/R produces recursive descent parsers instead of table-driven)awidthshow443 34 gm0.58059 0. 32 0.05805 0.(parsers and that it integrates the scanner description and the parser description, thus avoiding interface)awidthshow457 34 gm0.03204 0. 32 0.00320 0.(problems between the generated parts. A main nuisance of Coco was that all attributes had to be declared)awidthshow471 34 gm0.60287 0. 32 0.06028 0.(in a global scope, making it necessary to stack attribute values from time to time. This was remedied in)awidthshow485 34 gm1.03637 0. 32 0.10363 0.(Coco/R. Attributes can be declared local to productions. A similar extension of Coco, based on table-)awidthshow499 34 gm0.17333 0. 32 0.01733 0.(driven parsing, has recently been described in [DoPi90].)awidthshow527 34 gm0.72433 0. 32 0.07243 0.(The following example gives an impression of how a compiler description might look. A precise specifi-)awidthshow541 34 gm0.96527 0. 32 0.09652 0.(cation of the description language follows in Section 2. The example shows the translation of variable)awidthshow555 34 gm1.22421 0. 32 0.12242 0.(declarations. The task is to enter declared names into a symbol table and to compute addresses for)awidthshow569 34 gm-0.12216 0.(variables. One starts with a context-free EBNF grammar that is usually already at hand)ashow597 48 gm-0.02528 0.(VarDeclaration = Ident {"," Ident} ":" Type ";".)ashow625 34 gm-0.07235 0.(By simply writing down this rule, one already gets a parser that can check variable declarations syntactically.)ashow639 34 gm0.01434 0. 32 0.00143 0.(To process them semantically as well,one has to think about how variable declarations are translated. This)awidthshow653 34 gm0.37750 0. 32 0.03775 0.(requires the following considerations:)awidthshow681 34 gm(\245)show681 48 gm1.25442 0. 32 0.12544 0.(What are the semantic values of )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.37435 0.(VarDeclaration)ashow0 fsbu fc2 F /|______Helvetica fntbn0.36712 0. 32 0.03671 0.(, )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.35249 0.(Ident)ashow0 fsbu fc2 F /|______Helvetica fntbn0.70495 0. 32 0.07049 0.( and )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.44047 0.(Type)ashow0 fsbu fc2 F /|______Helvetica fntbn1.22848 0. 32 0.12284 0.(? In other words, what does the)awidthshow695 48 gm0.13107 0. 32 0.01310 0.(recognition of these symbols yield and what context information must be supplied in order to be able to)awidthshow709 48 gm0.72708 0. 32 0.07270 0.(recognize them? This leads to the so-called )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.17424 0.(attributes)ashow0 fsbu fc2 F /|______Helvetica fntbn0.56747 0. 32 0.05674 0.( of the symbols. The attribute of an )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.18843 0.(Ident)ashow0 fsbu fc2 F /|______Helvetica fntbn0.37109 0. 32 0.03710 0.( is its)awidthshow723 48 gm1.16348 0. 32 0.11634 0.(name, while the attribute of a )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.44860 0.(Type)ashow0 fsbu fc2 F /|______Helvetica fntbn1.22421 0. 32 0.12242 0.( is some node with type information. )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.38127 0.(VarDeclaration)ashow0 fsbu fc2 F /|______Helvetica fntbn1.18591 0. 32 0.11859 0.( does not)awidthshowF T cp%%Page: ? 4op0 0 xl1 1 pen20 505 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(4)show57 48 gm(nc 47 0 734 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn0.37658 0. 32 0.03765 0.(produce an attribute. Instead, it needs an attribute from its context; i.e., it needs to know the next free)awidthshow71 48 gm-0.03005 0.(address in the address space for variables. Attributes can be considered as \(input or output\) parameters)ashow85 48 gm-0.01786 0.(of syntax symbols. They are denoted as follows:)ashow113 62 gm0.14434 0. 32 0.01443 0.(Ident <name>)awidthshow127 62 gm0.51467 0. 32 0.05146 0.(Type <typ>)awidthshow141 62 gm-0.10629 0.(VarDeclaration <adr>)ashow169 34 gm(\245)show169 48 gm-0.00863 0.(The next question is: what actions are necessary to translate a construct? These actions are formulated)ashow183 48 gm0.14923 0. 32 0.01492 0.(in a general purpose programming language \(e.g., )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.04383 0.(Oberon)ashow0 fsbu fc2 F /|______Helvetica fntbn0.13732 0. 32 0.01373 0.( [Wirth89]\) and are enclosed by the symbols)awidthshow197 48 gm0.91278 0. 32 0.09127 0.("\(." and ".\)". A semantic action may appear anywhere on the right-hand side of a production and is)awidthshow211 48 gm0.17288 0. 32 0.01728 0.(executed at that point during parsing.)awidthshow239 34 gm0.23208 0. 32 0.02320 0.(These consideration lead to an attributed production:)awidthshow267 48 gm-0.13607 0.(VarDeclaration <VAR adr: LONGINT>)ashow281 170 gm-0.10592 0.(\(.)ashow281 181 gm-0.11241 0.(VAR )ashow281 207 gm-0.04214 0.(obj, obj1: SymTab.Object; typ: SymTab.Type;  n, a: LONGINT; )ashow295 181 gm-1.55661 0.(  )ashow295 207 gm-0.10670 0.(name: ARRAY 32 OF CHAR;.\))ashow309 48 gm(=)show309 62 gm0.14434 0. 32 0.01443 0.(Ident <name>)awidthshow309 170 gm-0.10592 0.(\(.)ashow309 181 gm-0.07363 0.(obj := SymTab.Find\(name\); obj.link := NIL; n := 1 .\))ashow323 62 gm-0.02774 0.({ "," Ident <name>)ashow323 170 gm-0.10592 0.(\(.)ashow323 181 gm-0.05276 0.(obj1 := SymTab.Find\(name\);  obj1.link := obj; obj := obj1; INC\(n\) .\))ashow337 62 gm(} ":")show351 62 gm0.51467 0. 32 0.05146 0.(Type <typ>)awidthshow351 170 gm-0.10592 0.(\(.)ashow351 181 gm-0.14994 0.(adr := adr + n* typ.size; a := adr;)ashow365 181 gm-0.12828 0.(WHILE obj # NIL DO DEC\(a, typ.size\); obj.adr := a; obj := obj.link END  .\))ashow379 62 gm0.44790 0.(";".)ashow407 34 gm0.18341 0. 32 0.01834 0.(Although the format is free, it is wise to shift syntactic parts to the left and semantic parts to the right. This)awidthshow421 34 gm0.54977 0. 32 0.05497 0.(gives a nice separation between syntax and semantics and makes it immediately clear what actions are)awidthshow435 34 gm1.63116 0. 32 0.16311 0.(executed upon recognition of a certain syntax symbol. Note that the production also contains local)awidthshow449 34 gm0.64071 0. 32 0.06407 0.(declarations of variables needed in the semantic actions. Besides, globally declared or imported names)awidthshow463 34 gm-0.04618 0.(can also be accessed.)ashow491 34 gm1.13647 0. 32 0.11364 0.(An attributed grammar can be viewed as a special purpose language for writing compilers \(or similar)awidthshow505 34 gm0.01312 0. 32 0.00131 0.(programs\). It is a short-hand notation for the well-known recursive descent technique. Although it is not too)awidthshow519 34 gm-0.03831 0.(hard to implement a compiler front-end by hand, a notation like the above can have advantages:)ashow547 34 gm(\245)show547 48 gm-0.02494 0.(It is easy to read. Syntax and semantics are clearly separated. Semantic actions are not buried between)ashow561 48 gm0.27191 0. 32 0.02719 0.(parsing statements.)awidthshow575 34 gm(\245)show575 48 gm1.44775 0. 32 0.14477 0.(Routine activities like getting the next token from the scanner, handling alternatives, options and)awidthshow589 48 gm-0.03407 0.(iterations, or error-handling don't have to be written down explicitly but are derived from the grammar.)ashow603 34 gm(\245)show603 48 gm1.16607 0. 32 0.11660 0.(It is faster and safer to implement a compiler in this high-level notation than in a general purpose)awidthshow617 48 gm0.00930 0. 32 0.00093 0.(programming language. During language design several alternatives of a construct can be tried out and)awidthshow631 48 gm0.30456 0. 32 0.03045 0.(their implementations can be prototyped.)awidthshow645 34 gm(\245)show645 48 gm1.79428 0. 32 0.17942 0.(Irregularities in the grammar like circular productions or violations of the LL\(1\) property can go)awidthshow659 48 gm1.01516 0. 32 0.10151 0.(undetected when the parser is implemented by hand. For a generator it is easy to check for these)awidthshow673 48 gm-0.01515 0.(irregularities.)ashow701 34 gm1.43386 0. 32 0.14338 0.(Compiler generators enable programmers who are not experienced compiler writers to process little)awidthshow715 34 gm0.42663 0. 32 0.04266 0.(languages. Examples for little languages are numerous in programming [Ben88], ranging from command)awidthshow729 34 gm-0.01757 0.(languages to descriptions of data structures on a file.)ashowF T cp%%Page: ? 5op0 0 xl1 1 pen20 267 gm(nc 746 0 781 538 6 rc)kp29 500 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(5)show64 34 gm(nc 54 0 727 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn0.38101 0. 32 0.03810 0.(The rest of this report describes the input language Cocol/R, shows how the generator can be used, and)awidthshow78 34 gm0.33096 0. 32 0.03309 0.(gives an overview of its implementation together with measurements. The appendix contains an example)awidthshow92 34 gm-0.09985 0.(of a compiler description for a small language. )ashow134 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn3.29879 0. 32 0.32987 0.(2. The Compiler Description Language Cocol/R)awidthshow162 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.34759 0. 32 0.03475 0.(A compiler description can be viewed as a module consisting of imports, declarations and grammar rules)awidthshow176 34 gm1.04309 0. 32 0.10430 0.(that describe the lexical and syntactical structure of a language as well as its translation into a target)awidthshow190 34 gm-0.02561 0.(language. The vocabulary of Cocol/R uses identifiers, strings and numbers in the usual way:)ashow218 48 gm0.05355 0. 32 0.00535 0.(ident = letter {letter|digit}.)awidthshow232 48 gm0.28442 0. 32 0.02844 0.(string = ')awidthshowbu fc{}mark T /Times-Roman /|______Times-Roman 0 rfbnbu fc2 F /|______Times-Roman fntbn0.09219 0.(")ashowbu fc2 F /|______Helvetica fntbn0.45455 0. 32 0.04545 0.(' {anyButQuote} ')awidthshowbu fc2 F /|______Times-Roman fntbn0.09219 0.(")ashowbu fc2 F /|______Helvetica fntbn0.20507 0. 32 0.02050 0.(' |\312")awidthshowbu fc2 F /|______Times-Roman fntbn(')showbu fc2 F /|______Helvetica fntbn0.54656 0. 32 0.05465 0.(" {anyButApostrophe} ")awidthshowbu fc2 F /|______Times-Roman fntbn(')showbu fc2 F /|______Helvetica fntbn0.14300 0.(".)ashow246 48 gm-0.00881 0.(number = digit {digit}.)ashow274 34 gm-0.04475 0.(Upper case letters are distinct from lower case letters. Strings must not cross line borders. Keywords are)ashow302 48 gm9 fzbu fc2 F /|______Helvetica fntbn-0.31477 0.(ANY  CASE  CHARACTERS  CHR  COMMENTS  COMPILER  CONTEXT  END  FROM  IGNORE)ashow316 48 gm-0.27471 0.(NESTED  PRAGMAS  PRODUCTIONS  SYNC  TO  TOKENS  WEAK)ashow344 34 gm10 fzbu fc2 F /|______Helvetica fntbn-0.02384 0.(The following metacharacters are used to form EBNF expressions:)ashow372 48 gm-0.75373 0.(\(   \) )ashow372 85 gm0.78842 0. 32 0.07884 0.(for grouping)awidthshow386 48 gm-0.76187 0.({   }  )ashow386 85 gm(for iterations)show400 48 gm-0.60379 0.([   ]   )ashow400 85 gm0.66131 0. 32 0.06613 0.(for options)awidthshow414 48 gm-0.50367 0.(< >  )ashow414 85 gm0.19058 0. 32 0.01905 0.(for attributes)awidthshow428 48 gm-0.51292 0.(\(.   .\)  )ashow428 85 gm-0.08522 0.(for semantic parts)ashow442 48 gm-0.43704 0.(= . | + -)ashow442 85 gm(as explained below)show470 34 gm-0.04801 0.(Comments are enclosed in "\(*" and "*\)" and may be nested. The semantic parts may contain declarations or)ashow484 34 gm0.65582 0. 32 0.06558 0.(statements in a general purpose programming language. The language actually used is implementation)awidthshow498 34 gm0.60363 0. 32 0.06036 0.(dependent. This implementation uses Oberon.)awidthshow540 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn3.80172 0. 32 0.38017 0.(2.1 Overall Structure)awidthshow568 34 gm1 64 lw0 fsbu fc2 F /|______Helvetica fntbn-0.02685 0.(A compiler description is made up of the following parts)ashow-582 -48 xl-1 0 gm(nc -1 0 0 184 6 rc)kp0 gr-1 183 lin64 1 lw1 1 lw582 48 xl596 48 gm(nc 54 0 727 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn-0.13613 0.(Cocol = )ashow596 96 gm0.49041 0. 32 0.04904 0.("COMPILER" ident)awidthshow610 96 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.09194 0.(arbitraryText)ashow624 96 gm0 fsbu fc2 F /|______Helvetica fntbn0.10981 0.(ScannerSpecification)ashow638 96 gm0.04869 0.(ParserSpecification)ashow652 96 gm1 64 lw0.24475 0. 32 0.02447 0.("END" ident "." .)awidthshow-666 -48 xl-1 0 gm(nc -1 0 0 184 6 rc)kp0 gr-1 183 lin64 1 lw1 1 lw666 48 xl694 34 gm(nc 54 0 727 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn-0.03588 0.(The name after the keyword COMPILER is the )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.04170 0.(grammar name)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.03562 0.( and must match the name after the keyword)ashow708 34 gm-0.06817 0.(END. The grammar name also denotes the topmost nonterminal \(the start symbol\). After the grammar name)ashow722 34 gm0.99746 0. 32 0.09974 0.(arbitrary Oberon text may follow that is not checked by Coco/R. It usually contains imports of Oberon)awidthshowF T cp%%Page: ? 6op0 0 xl1 1 pen20 505 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(6)show56 34 gm(nc 46 0 733 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn0.17242 0. 32 0.01724 0.(modules and declarations of global objects \(constants, types, variables, or procedures\) that are needed in)awidthshow70 34 gm1.16577 0. 32 0.11657 0.(the semantic actions later on. The remaining parts of the compiler description specify the lexical and)awidthshow84 34 gm0.10314 0. 32 0.01031 0.(syntactical structure of the language to be processed.)awidthshow126 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn4.28924 0. 32 0.42892 0.(2.2 Scanner Specification)awidthshow154 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.44021 0. 32 0.04402 0.(A scanner has to read source text, skip meaningless characters, and recognize tokens which have to be)awidthshow168 34 gm0.56121 0. 32 0.05612 0.(passed to the parser. Tokens may be classified as )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.12603 0.(literals)ashow0 fsbu fc2 F /|______Helvetica fntbn0.31051 0. 32 0.03105 0.( and )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.91949 0. 32 0.09194 0.(token classes)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.59890 0. 32 0.05989 0.(. Literals \(e.g., "END", ":=",)awidthshow182 34 gm0.07263 0. 32 0.00726 0.(etc.\) are written as strings and denote themselves. They are introduced right in the productions and do not)awidthshow196 34 gm0.79849 0. 32 0.07984 0.(have to be declared. Token classes \(e.g., identifiers or numbers\) have a certain structure that must be)awidthshow210 34 gm-0.05377 0.(declared by a regular expression in EBNF. There are usually many different instances of a token class \(e.g.,)ashow224 34 gm1 64 lw-0.03555 0.(many different identifiers\) which are all recognized as the same token.)ashow-238 -48 xl-1 0 gm(nc -1 0 0 322 6 rc)kp0 gr-1 321 lin64 1 lw1 1 lw238 48 xl252 48 gm(nc 46 0 733 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn0.47332 0. 32 0.04733 0.(ScannerSpecification =)awidthshow266 62 gm-0.02459 0.({ "CHARACTERS" {SetDecl})ashow280 62 gm0.04089 0. 32 0.00408 0.(| "TOKENS" {TokenDecl})awidthshow294 62 gm-0.12774 0.(| "PRAGMAS" {PragmaDecl})ashow308 62 gm-0.05862 0.(| CommentDecl)ashow322 62 gm-0.10565 0.(| VariousDecl)ashow336 62 gm1 64 lw-0.11819 0.(}.)ashow-350 -48 xl-1 0 gm(nc -1 0 0 322 6 rc)kp0 gr-1 321 lin64 1 lw1 1 lw350 48 xl378 34 gm(nc 46 0 733 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn-0.06657 0.(A scanner specification consists of 5 optional parts that may be written in arbitrary order.)ashow406 34 gm3 fsbu fc{}mark T /Helvetica-BoldOblique /|______Helvetica-BoldOblique 0 rfbnbu fc2 F /|______Helvetica-BoldOblique fntbn2.07443 0. 32 0.20744 0.(Character sets)awidthshow0 fsbu fc2 F /|______Helvetica fntbn1.16348 0. 32 0.11634 0.(. This section allows the declaration of names for character sets like letters or digits.)awidthshow420 34 gm1 64 lw0.02410 0. 32 0.00241 0.(These names may be used in the other sections of the scanner specification.)awidthshow-434 -48 xl-1 0 gm(nc -1 0 0 253 6 rc)kp0 gr-1 252 lin64 1 lw1 1 lw434 48 xl448 48 gm(nc 46 0 733 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn0.12756 0. 32 0.01275 0.(SetDecl )awidthshow448 96 gm0.31677 0. 32 0.03167 0.(= ident "=" Set.)awidthshow462 48 gm0.16494 0. 32 0.01649 0.(Set )awidthshow462 96 gm-0.06071 0.(= BasicSet { \("+"|"-"\) BasicSet}.)ashow476 48 gm-0.02923 0.(BasicSet )ashow476 96 gm1 64 lw-0.09523 0.(= ident | string | "CHR" "\(" number "\)" | "ANY".)ashow-490 -48 xl-1 0 gm(nc -1 0 0 253 6 rc)kp0 gr-1 252 lin64 1 lw1 1 lw490 48 xl518 34 gm(nc 46 0 733 538 6 rc)kpF 1 setTxMode2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.11491 0.(SetDecl)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.10437 0.( associates a name with a character set. Basic character sets are denoted as)ashow532 48 gm0.11129 0.(string)ashow532 113 gm-0.07873 0.(a set consisting of all characters in the string)ashow546 48 gm0.33131 0.(ident)ashow546 113 gm-0.03991 0.(the previously declared character set with this name)ashow560 48 gm-0.30645 0.(CHR\(i\))ashow560 113 gm-0.07650 0.(a character set consisting of a single element with ordinal value i)ashow574 48 gm-0.27951 0.(ANY)ashow574 113 gm-0.09797 0.(the set of all characters)ashow602 34 gm-0.07463 0.(Character sets may be formed from basic sets by the operators)ashow616 48 gm(+)show616 62 gm0.79376 0. 32 0.07937 0.(set union)awidthshow630 48 gm(-)show630 62 gm0.86318 0. 32 0.08631 0.(set difference)awidthshow658 34 gm0.01512 0.(Examples)ashow672 48 gm1.19995 0. 32 0.11999 0.(digit = "0123456789".)awidthshow672 198 gm-0.05085 0.(the set of all digits)ashow686 48 gm0.14694 0. 32 0.01469 0.(hexdigit = digit + "ABCDEF".)awidthshow686 198 gm-0.05987 0.(the set of all hexadecimal digits)ashow700 48 gm-0.07260 0.(eol = CHR\(13\).)ashow700 198 gm0.10818 0. 32 0.01081 0.(end-of-line character)awidthshow714 48 gm-0.09838 0.(noDigit = ANY - digit.)ashow714 198 gm-0.10163 0.(Any character that is not a digit)ashowF T cp%%Page: ? 7op0 0 xl1 1 pen20 332 gm(nc 746 0 781 538 6 rc)kp29 500 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(7)show60 34 gm(nc 50 0 709 538 6 rc)kp3 fs10 fzbu fc2 F /|______Helvetica-BoldOblique fntbn0.09577 0.(Tokens)ashow0 fsbu fc2 F /|______Helvetica fntbn0.26153 0. 32 0.02615 0.(. A token is a terminal symbol for the parser but a syntactically structured symbol for the scanner.)awidthshow74 34 gm1 64 lw-0.03108 0.(This structure has to be described by a regular expression in EBNF.)ashow-88 -48 xl-1 0 gm(nc -1 0 0 361 6 rc)kp0 gr-1 360 lin64 1 lw1 1 lw88 48 xl102 48 gm(nc 50 0 709 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn0.23071 0. 32 0.02307 0.(TokenDecl )awidthshow102 113 gm(=)show102 122 gm0.50643 0. 32 0.05064 0.(Symbol ["=" TokenExpr "."].)awidthshow116 48 gm0.46264 0. 32 0.04626 0.(TokenExpr )awidthshow116 113 gm(=)show116 122 gm0.01586 0. 32 0.00158 0.(TokenTerm {"|" TokenTerm}.)awidthshow130 48 gm0.05966 0. 32 0.00596 0.(TokenTerm )awidthshow130 113 gm(=)show130 122 gm0.07522 0. 32 0.00752 0.(TokenFactor {TokenFactor} ["CONTEXT" "\(" TokenExpr "\)"].)awidthshow144 48 gm0.04928 0. 32 0.00492 0.(TokenFactor )awidthshow144 113 gm(=)show144 122 gm-0.02296 0.(Symbol | "\(" TokenExpr "\)" |  "[" TokenExpr "]" | "{" TokenExpr "}".)ashow158 48 gm0.13296 0.(Symbol)ashow158 113 gm-0.61819 0.(= )ashow158 122 gm1 64 lw-0.00360 0.(ident | string.)ashow-172 -48 xl-1 0 gm(nc -1 0 0 361 6 rc)kp0 gr-1 360 lin64 1 lw1 1 lw172 48 xl200 34 gm(nc 50 0 709 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn0.75866 0. 32 0.07586 0.(Tokens may be declared in any order. A token declaration defines a symbol together with its structure.)awidthshow214 34 gm0.60821 0. 32 0.06082 0.(Usually the symbol on the left-hand side of the declaration is an identifier. It is declared to stand for the)awidthshow228 34 gm0.15899 0. 32 0.01589 0.(structure described on the right-hand side of the declaration. \(For special purposes the symbol on the left-)awidthshow242 34 gm-0.05882 0.(hand side may also be a string, in which case no right-hand side may be specified; see Section 4.\) )ashow270 34 gm1.81488 0. 32 0.18148 0.(The right-hand side of a token declaration specifies the structure of the token by a regular EBNF)awidthshow284 34 gm1.91879 0. 32 0.19187 0.(expression. This expression may contain literals denoting themselves \(e.g., "END"\) and names of)awidthshow298 34 gm0.99502 0. 32 0.09950 0.(character sets \(e.g., letter\) denoting an arbitrary character from this set. It must )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.28222 0.(not)ashow0 fsbu fc2 F /|______Helvetica fntbn1.04522 0. 32 0.10452 0.( contain names of)awidthshow312 34 gm2.23892 0. 32 0.22389 0.(previously declared tokens. The CONTEXT phrase in a )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.68029 0.(TokenTerm)ashow0 fsbu fc2 F /|______Helvetica fntbn1.69082 0. 32 0.16908 0.( means that the term is only)awidthshow326 34 gm0.56701 0. 32 0.05670 0.(recognized when its right-hand context in the input stream is the )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.18768 0.(TokenExpr)ashow0 fsbu fc2 F /|______Helvetica fntbn0.53573 0. 32 0.05357 0.( specified in brackets. If the)awidthshow340 34 gm-0.01773 0.(right-hand side of a declaration is missing, no scanner is generated. This gives the programmer the chance)ashow354 34 gm-0.00309 0.(to provide a hand-written scanner \(see Section 4\).)ashow382 34 gm0.01512 0.(Examples)ashow396 48 gm0.36468 0. 32 0.03646 0.(ident )awidthshow396 91 gm-0.07148 0.(= letter {letter | digit}.)ashow410 48 gm-0.36083 0.(real )ashow410 91 gm-0.00495 0.(= digit {digit} "." {digit} ["E" ["+"|"-"] digit {digit}].)ashow424 48 gm0.20629 0. 32 0.02062 0.(number )awidthshow424 91 gm-0.00973 0.(= digit {digit} | digit {digit}\312CONTEXT \(".."\).)ashow438 48 gm-0.15190 0.(and )ashow438 91 gm-0.04066 0.(= "&" | "AND".)ashow466 34 gm0.89508 0. 32 0.08950 0.(The CONTEXT phrase in the above example allows a distinction between reals \(e.g., 1.23\) and range)awidthshow480 34 gm0.01541 0. 32 0.00154 0.(constructs \(e.g., 1..2\) that could otherwise not be scanned with a single character lookahead.)awidthshow508 34 gm9 fzbu fc2 F /|______Helvetica fntbn1.13372 0. 32 0.11337 0.(Note: The scanner exports two variables, )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.33349 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn0.55206 0. 32 0.05520 0.( and )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.27597 0.(len)ashow0 fsbu fc2 F /|______Helvetica fntbn0.94192 0. 32 0.09419 0.(, which are the source position and the length of the most)awidthshow522 34 gm0.92330 0. 32 0.09233 0.(recently recognized token. It also exports a procedure )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.31657 0.(GetName)ashow0 fsbu fc2 F /|______Helvetica fntbn0.17237 0.(\()ashowbu fc{}mark F /Symbol /|______Symbol 0 rfbnbu fc2 F /|______Symbol fntbn0.31224 0.(\257)ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.27830 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn0.23986 0. 32 0.02398 0.(, )awidthshowbu fc2 F /|______Symbol fntbn0.31224 0.(\257)ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.23030 0.(len)ashow0 fsbu fc2 F /|______Helvetica fntbn0.23986 0. 32 0.02398 0.(, )awidthshowbu fc2 F /|______Symbol fntbn0.31224 0.(\255)ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.25616 0.(sourceText)ashow0 fsbu fc2 F /|______Helvetica fntbn0.72982 0. 32 0.07298 0.(\) which can be used to)awidthshow536 34 gm0.10360 0. 32 0.01036 0.(obtain the source text of the token at position )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.03807 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn0.09811 0. 32 0.00981 0.( having the length )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.03150 0.(len)ashow0 fsbu fc2 F /|______Helvetica fntbn0.10833 0. 32 0.01083 0.(. See also Section 3.)awidthshow578 34 gm3 fs10 fzbu fc2 F /|______Helvetica-BoldOblique fntbn0.10624 0.(Pragmas)ashow0 fsbu fc2 F /|______Helvetica fntbn0.28060 0. 32 0.02806 0.(. A pragma is a token that may occur anywhere in the input stream \(e.g., end-of-line symbols or)awidthshow592 34 gm0.09094 0. 32 0.00909 0.(compiler options\). It would be too cumbersome to handle the many places in which they could occur in the)awidthshow606 34 gm0.64666 0. 32 0.06466 0.(grammar. Therefore a special mechanism is provided to process pragmas without including them in the)awidthshow620 34 gm0.47821 0. 32 0.04782 0.(productions. Pragmas are declared like tokens, but they may have an associated semantic action that is)awidthshow634 34 gm1 64 lw0.29449 0. 32 0.02944 0.(executed whenever they are recognized by the scanner.)awidthshow-648 -48 xl-1 0 gm(nc -1 0 0 301 6 rc)kp0 gr-1 300 lin64 1 lw1 1 lw648 48 xl662 48 gm(nc 50 0 709 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn-0.17782 0.(PragmaDecl )ashow662 108 gm0.49835 0. 32 0.04983 0.(= TokenDecl [SemAction].)awidthshow676 48 gm0.46264 0. 32 0.04626 0.(SemAction )awidthshow676 108 gm1 64 lw-0.05186 0.(= "\(." )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.06367 0.(arbitraryText)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.05537 0.( ".\)".)ashow-690 -48 xl-1 0 gm(nc -1 0 0 301 6 rc)kp0 gr-1 300 lin64 1 lw1 1 lwF T cp%%Page: ? 8op0 0 xl1 1 pen20 206 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(8)show64 34 gm(nc 54 0 727 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn0.01770 0.(Example)ashow78 48 gm-0.01319 0.(option = "$" {letter} . )ashow78 170 gm-0.44213 0.(\(. )ashow78 181 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.01193 0.(Scanner)ashow0 fsbu fc2 F /|______Helvetica fntbn0.01217 0.(.GetName\()ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.01193 0.(Scanner)ashow0 fsbu fc2 F /|______Helvetica fntbn0.03433 0. 32 0.00343 0.(.pos, )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.01193 0.(Scanner)ashow0 fsbu fc2 F /|______Helvetica fntbn0.02563 0. 32 0.00256 0.(.len, str\); i := 1;)awidthshow92 181 gm-0.08807 0.(WHILE i < )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.09747 0.(Scanner)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.10351 0.(.len DO)ashow106 193 gm-0.16601 0.(IF str[i] = "A" THEN \311)ashow120 193 gm-0.09941 0.(ELSIF str[i] = "B" THEN \311)ashow134 193 gm0.03778 0.(END;)ashow148 193 gm-0.41827 0.(INC\(i\))ashow162 181 gm-0.29519 0.(END .\) )ashow204 34 gm3 fsbu fc2 F /|______Helvetica-BoldOblique fntbn0.47216 0.(Comments)ashow0 fsbu fc2 F /|______Helvetica fntbn1.31088 0. 32 0.13108 0.(.  Comments are difficult \(nested comments are even impossible\) to specify with regular)awidthshow218 34 gm-0.00166 0.(expressions. This makes it necessary to have a special construct to express their structure. Comments are)ashow232 34 gm0.59814 0. 32 0.05981 0.(declared by specifying their opening and their closing brackets. It is possible to declare several kinds of)awidthshow246 34 gm1 64 lw-0.01480 0.(comments. Comment brackets must not be longer than 2 characters.)ashow-260 -48 xl-1 0 gm(nc -1 0 0 367 6 rc)kp0 gr-1 366 lin64 1 lw1 1 lw260 48 xl274 48 gm(nc 54 0 727 538 6 rc)kp1 64 lwF 1 setTxModebu fc2 F /|______Helvetica fntbn0.20202 0. 32 0.02020 0.(CommentDecl = "COMMENTS" "FROM" TokenExpr "TO" TokenExpr ["NESTED"].)awidthshow-288 -48 xl-1 0 gm(nc -1 0 0 367 6 rc)kp0 gr-1 366 lin64 1 lw1 1 lw288 48 xl316 34 gm(nc 54 0 727 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn0.01512 0.(Examples)ashow330 48 gm-0.08508 0.(COMMENTS FROM "\(*" TO "*\)" NESTED)ashow344 48 gm-0.11860 0.(COMMENTS FROM "--" TO eol)ashow386 34 gm1 64 lw3 fsbu fc2 F /|______Helvetica-BoldOblique fntbn0.08929 0.(Various)ashow0 fsbu fc2 F /|______Helvetica fntbn0.33050 0. 32 0.03305 0.(. The following options serve to parameterize the generated scanner.)awidthshow-400 -48 xl-1 0 gm(nc -1 0 0 181 6 rc)kp0 gr-1 180 lin64 1 lw1 1 lw400 48 xl414 48 gm(nc 54 0 727 538 6 rc)kp1 64 lwF 1 setTxModebu fc2 F /|______Helvetica fntbn-0.06849 0.(VariousDecl = "IGNORE" \("CASE" | Set\).)ashow-428 -48 xl-1 0 gm(nc -1 0 0 181 6 rc)kp0 gr-1 180 lin64 1 lw1 1 lw428 48 xl456 34 gm(nc 54 0 727 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn-0.00175 0.(IGNORE CASE specifies that lower case letters are treated like upper case letters in names.  IGNORE Set)ashow470 34 gm-0.01240 0.(specifies the set of meaningless characters that are to be skipped by the scanner \(e.g., tabulators and eol\).)ashow484 34 gm-0.02615 0.(Blank is meaningless by default.)ashow526 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn3.99993 0. 32 0.39999 0.(2.3 Parser Specification)awidthshow554 34 gm0 fsbu fc2 F /|______Helvetica fntbn1.02783 0. 32 0.10278 0.(The parser specification is the main part of the compiler description. It contains the productions of an)awidthshow568 34 gm0.43395 0. 32 0.04339 0.(attributed grammar specifying the syntax of the language to be recognized as well as its translation. The)awidthshow582 34 gm0.03601 0. 32 0.00360 0.(productions may be given in any order. References to yet undeclared nonterminals are allowed. Any name)awidthshow596 34 gm0.92514 0. 32 0.09251 0.(that is not declared as a terminal token is considered to be a nonterminal. There must be exactly one)awidthshow610 34 gm1 64 lw-0.03601 0.(production for every nonterminal. There must be a production for the start symbol \(the grammar name\).)ashow-624 -48 xl-1 0 gm(nc -1 0 0 358 6 rc)kp0 gr-1 357 lin64 1 lw1 1 lw624 48 xl638 48 gm(nc 54 0 727 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn0.03417 0. 32 0.00341 0.(ParserSpecification )awidthshow638 142 gm(=)show638 153 gm0.27618 0. 32 0.02761 0.("PRODUCTIONS" {Production}.)awidthshow652 48 gm0.71563 0. 32 0.07156 0.(Production )awidthshow652 142 gm(=)show652 153 gm0.19561 0. 32 0.01956 0.(ident [FormalAttributes] [LocalDecl] "=" Expression "." .)awidthshow666 48 gm0.04467 0.(FormalAttributes)ashow666 142 gm-0.61819 0.(= )ashow666 153 gm-0.01379 0.("<" )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.01515 0.(arbitraryText)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.01623 0.( ">".)ashow680 48 gm0.01322 0.(LocalDecl)ashow680 142 gm(=)show680 153 gm-0.02990 0.("\(." )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.04035 0.(arbitraryText)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.03509 0.( ".\)".)ashow694 48 gm0.13296 0.(Symbol)ashow694 142 gm(=)show694 153 gm1 64 lw-0.00360 0.(ident | string.)ashow-708 -48 xl-1 0 gm(nc -1 0 0 358 6 rc)kp0 gr-1 357 lin64 1 lw1 1 lwF T cp%%Page: ? 9op0 0 xl1 1 pen20 210 gm(nc 746 0 781 538 6 rc)kp29 500 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(9)show57 34 gm(nc 47 0 734 538 6 rc)kp3 fs10 fzbu fc2 F /|______Helvetica-BoldOblique fntbn0.17208 0.(Productions)ashow0 fsbu fc2 F /|______Helvetica fntbn0.52062 0. 32 0.05206 0.(. A production may be considered as a procedure that parses a nonterminal. It has its own)awidthshow71 34 gm0.44586 0. 32 0.04458 0.(scope for attributes and local objects and is made up of a left-hand side and a right-hand side which are)awidthshow85 34 gm0.90667 0. 32 0.09066 0.(separated by an equal sign. The left-hand side specifies the name of the nonterminal together with its)awidthshow99 34 gm0.58822 0. 32 0.05882 0.(formal attributes and local declarations. The right-hand side consists of a context-free EBNF expression)awidthshow113 34 gm-0.01129 0.(that specifies the structure of the nonterminal as well as its translation. The formal attributes are written like)ashow127 34 gm0.68359 0. 32 0.06835 0.(formal parameters in Oberon. They are enclosed in angle brackets. In analogy to input parameters and)awidthshow141 34 gm0.19622 0. 32 0.01962 0.(output parameters \(variable parameters\) we use the terms input attributes and output attributes. The local)awidthshow155 34 gm-0.01489 0.(declarations are arbitrary Oberon declarations enclosed in "\(." and ".\)". A production constitutes a scope for)ashow169 34 gm0.06271 0. 32 0.00627 0.(its formal attributes and its locally declared objects. Terminals and nonterminals, globally declared objects,)awidthshow183 34 gm-0.00746 0.(and imported modules are visible in any production.)ashow211 34 gm0.01770 0.(Example)ashow225 48 gm-0.01081 0.(Expression <VAR x: Item>)ashow225 227 gm-0.12969 0.(\(. VAR y: Item; operator: INTEGER; .\))ashow239 48 gm-0.39062 0.(= \311  .)ashow267 34 gm3 fsbu fc2 F /|______Helvetica-BoldOblique fntbn0.57594 0.(Expressions)ashow0 fsbu fc2 F /|______Helvetica fntbn1.84921 0. 32 0.18492 0.(. An EBNF expression defines the context-free structure of some part of the source)awidthshow281 34 gm0.99731 0. 32 0.09973 0.(language together with attributes and semantic actions that specify the translation of this part into the)awidthshow295 34 gm1 64 lw0.29937 0. 32 0.02993 0.(target language.)awidthshow-309 -48 xl-1 0 gm(nc -1 0 0 358 6 rc)kp0 gr-1 357 lin64 1 lw1 1 lw309 48 xl323 48 gm(nc 47 0 734 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn0.38421 0. 32 0.03842 0.(Expression )awidthshow323 142 gm(=)show323 153 gm-0.15715 0.(Term {"|" Term}.)ashow337 48 gm-0.27529 0.(Term )ashow337 142 gm(=)show337 153 gm-0.12672 0.(Factor {Factor}.)ashow351 48 gm-0.06649 0.(Factor)ashow351 142 gm(=)show351 153 gm0.68481 0. 32 0.06848 0.(["WEAK"] Symbol [Attributes])awidthshow365 142 gm(|)show365 153 gm0.20718 0.(SemAction)ashow379 142 gm(|)show379 153 gm-0.08740 0.("ANY" )ashow393 142 gm(|)show393 153 gm0.02436 0.("SYNC")ashow407 142 gm(|)show407 153 gm-0.04248 0.("\(" Expression "\)"  |  "[" Expression "]"  |  "{" Expression "}".)ashow421 48 gm0.19674 0.(Attributes)ashow421 142 gm-0.61819 0.(= )ashow421 153 gm-0.01379 0.("<" )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.01515 0.(arbitraryText)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.01623 0.( ">".)ashow435 48 gm0.20718 0.(SemAction)ashow435 142 gm(=)show435 153 gm-0.02990 0.("\(." )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.04035 0.(arbitraryText)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.03509 0.( ".\)".)ashow449 48 gm0.13296 0.(Symbol)ashow449 142 gm(=)show449 153 gm1 64 lw-0.00360 0.(ident | string.)ashow-463 -48 xl-1 0 gm(nc -1 0 0 358 6 rc)kp0 gr-1 357 lin64 1 lw1 1 lw463 48 xl491 34 gm(nc 47 0 734 538 6 rc)kpF 1 setTxModebu fc2 F /|______Helvetica fntbn0.30166 0. 32 0.03016 0.(Nonterminals may have attributes. They are written like actual parameters in Oberon and are enclosed in)awidthshow505 34 gm-0.00680 0.(angle brackets. If a nonterminal has formal attributes, every occurrence of this nonterminal must have a list)ashow519 34 gm-0.00680 0.(of actual attributes that correspond to the formal attributes according to the parameter compatibility rules of)ashow533 34 gm0.60333 0. 32 0.06033 0.(Oberon. The conformance, however, is only checked when the generated parser module is compiled. A)awidthshow547 34 gm-0.01588 0.(semantic action is an arbitrary sequence of Oberon statements enclosed in "\(." and ".\)".)ashow575 34 gm0.85784 0. 32 0.08578 0.(The symbol ANY denotes any terminal that is not an alternative of this ANY symbol. It can be used to)awidthshow589 34 gm0.08193 0. 32 0.00819 0.(conveniently parse structures that contain arbitrary text. For example, the translation of a Cocol/R attribute)awidthshow603 34 gm-0.08476 0.(list looks as follows:)ashow631 48 gm-0.01863 0.(Attributes <VAR pos, len: LONGINT> =)ashow645 62 gm0.53022 0.("<")ashow645 142 gm-0.04251 0.(\(. pos := Scanner.pos + 1 .\))ashow659 62 gm-0.30964 0.({ANY})ashow673 62 gm0.53022 0.(">")ashow673 142 gm-0.06352 0.(\(. len := Scanner.pos - pos .\) .)ashow701 34 gm0.03234 0. 32 0.00323 0.(In this example the closing angle bracket is an implicit alternative of the ANY symbol in curly brackets. The)awidthshow715 34 gm0.16845 0. 32 0.01684 0.(meaning is that ANY matches any terminal except ">". )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.05068 0.(Scanner.pos)ashow0 fsbu fc2 F /|______Helvetica fntbn0.14007 0. 32 0.01400 0.( is the source text position of the most)awidthshow729 34 gm0.06134 0. 32 0.00613 0.(recently recognized terminal. It is exported by the generated scanner \(see Section 3\).)awidthshowF T cp%%Page: ? 10op0 0 xl1 1 pen20 412 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(10)show59 34 gm(nc 49 0 680 538 6 rc)kp3 fs10 fzbu fc2 F /|______Helvetica-BoldOblique fntbn0.13023 0.(Error-handling)ashow0 fsbu fc2 F /|______Helvetica fntbn0.41915 0. 32 0.04191 0.(. The programmer has to give some hints in order to allow Coco/R to generate good and)awidthshow73 34 gm1.06613 0. 32 0.10661 0.(efficient error-handling. First, )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn1.59698 0. 32 0.15969 0.(synchronization points)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.80795 0. 32 0.08079 0.( have to be specified. A synchronization point is a)awidthshow87 34 gm1.08688 0. 32 0.10868 0.(location in the grammar where especially safe terminals are expected that are hardly ever missing or)awidthshow101 34 gm0.32455 0. 32 0.03245 0.(mistyped. When the generated parser reaches such a point, it adjusts the input to the next symbol that is)awidthshow115 34 gm0.23025 0. 32 0.02302 0.(expected at this point. In most languages good candidates for synchronization points are the beginning of)awidthshow129 34 gm1.48040 0. 32 0.14804 0.(a statement \(where IF, WHILE, etc. are expected\), the beginning of a declaration sequence \(where)awidthshow143 34 gm1.78939 0. 32 0.17893 0.(CONST, VAR, etc. are expected\) and the beginning of a type \(where RECORD, ARRAY, etc. are)awidthshow157 34 gm0.78140 0. 32 0.07814 0.(expected\). The end-of-file symbol is always among the synchronization symbols which guarantees that)awidthshow171 34 gm0.59951 0. 32 0.05995 0.(synchronization terminates at least at the end of the source text. A synchronization point is specified by)awidthshow185 34 gm-0.04495 0.(the symbol SYNC.)ashow213 34 gm0.70373 0. 32 0.07037 0.(Error-handling can further be improved by specifying which terminals are "weak" in a certain context. A)awidthshow227 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.11657 0. 32 0.01165 0.(weak terminal)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.07080 0. 32 0.00708 0.( is a symbol that is often mistyped or missing, such as the semicolon between statements. A)awidthshow241 34 gm0.57525 0. 32 0.05752 0.(weak terminal is denoted by preceding it with the keyword WEAK. When the generated parser does not)awidthshow255 34 gm0.26306 0. 32 0.02630 0.(find a terminal specified as weak, it adjusts the input to the next symbol that is either a legal successor of)awidthshow269 34 gm0.10681 0. 32 0.01068 0.(the weak symbol or a symbol expected at any synchronization point \(symbols expected at synchronization)awidthshow283 34 gm0.03601 0. 32 0.00360 0.(points are considered to be very "strong", so that it makes sense that they never be skipped\).)awidthshow311 34 gm0.01770 0.(Example)ashow325 48 gm0.84762 0. 32 0.08476 0.(StatementSeq )awidthshow325 119 gm0.15625 0. 32 0.01562 0.(= Statement {WEAK ";" Statement}.)awidthshow339 48 gm-0.12156 0.(Declaration )ashow339 119 gm-0.19483 0.(= SYNC \("CONST" \311 | "TYPE" \311 | "VAR" \311 | \311\).)ashow381 34 gm3 fsbu fc2 F /|______Helvetica-BoldOblique fntbn2.53768 0. 32 0.25376 0.(LL\(1\) requirements)awidthshow0 fsbu fc2 F /|______Helvetica fntbn1.46850 0. 32 0.14685 0.(. Recursive descent parsing requires that the grammar of the parsed language)awidthshow395 34 gm0.01220 0. 32 0.00122 0.(satisfies the LL\(1\) property. This means that at any point in the grammar the parser must be able to decide)awidthshow409 34 gm0.27557 0. 32 0.02755 0.(on the basis of a single lookahead symbol which of several possible alternatives have to be selected. For)awidthshow423 34 gm0.19577 0. 32 0.01957 0.(example, the following production is not LL\(1\):)awidthshow451 48 gm0.34362 0. 32 0.03436 0.(Statement )awidthshow451 102 gm(=)show451 113 gm0.64926 0. 32 0.06492 0.(ident ":=" Expression)awidthshow465 102 gm(|)show465 113 gm0.46524 0. 32 0.04652 0.(ident ["\(" ExpressionList "\)"].)awidthshow493 34 gm1.08657 0. 32 0.10865 0.(Both alternatives start with the symbol )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.27523 0.(ident)ashow0 fsbu fc2 F /|______Helvetica fntbn1.10260 0. 32 0.11026 0.( and the parser cannot distinguish between them when it)awidthshow507 34 gm1.83364 0. 32 0.18336 0.(comes to a statement and )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.50601 0.(ident)ashow0 fsbu fc2 F /|______Helvetica fntbn1.90460 0. 32 0.19046 0.( is the next input symbol. However, the production can easily be)awidthshow521 34 gm0.30853 0. 32 0.03085 0.(transformed into)awidthshow549 48 gm-0.01583 0.(Statement = ident \( ":=" Expression  |  ["\(" ExpressionList "\)"] \).)ashow577 34 gm-0.07530 0.(where all alternatives start with distinct symbols. There are LL\(1\) conflicts that are not as easy to detect as in)ashow591 34 gm0.11795 0. 32 0.01179 0.(the above example. For a programmer, it can be hard to find them if he has no tool to check the grammar.)awidthshow605 34 gm0.87448 0. 32 0.08744 0.(The result would be a parser that in some situations selects a wrong alternative. Coco/R checks if the)awidthshow619 34 gm0.34759 0. 32 0.03475 0.(grammar satisfies the LL\(1\) property and gives appropriate error messages that show how to correct any)awidthshow633 34 gm0.05494 0.(violations.)ashowF T cp%%Page: ? 11op0 0 xl1 1 pen20 79 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(11)show64 34 gm(nc 54 0 727 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn2.63519 0. 32 0.26351 0.(3. Using Coco/R to Generate a Compiler)awidthshow92 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.33432 0. 32 0.03343 0.(The attributed grammar is the central document of a compiler implementation with Coco/R. A user has to)awidthshow106 34 gm-0.07031 0.(perform the following tasks in order to write a compiler: )ashow134 48 gm-0.05784 0.(1. )ashow134 62 gm-0.14274 0.(Write an attributed grammar; )ashow148 48 gm-0.05784 0.(2. )ashow148 62 gm-0.07896 0.(Write semantic modules if necessary \(import them in the attributed grammar\); )ashow162 48 gm-0.05784 0.(3. )ashow162 62 gm-0.09533 0.(Use Coco/R to generate a scanner and a parser from the attributed grammar; )ashow176 48 gm-0.05784 0.(4. )ashow176 62 gm-0.14849 0.(Write a main module that calls the parser. )ashow204 34 gm0.05172 0. 32 0.00517 0.(The command)awidthshow232 48 gm-0.03492 0.(Coco.Compile )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.04330 0.(name)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.02107 0.( [ "/" {)ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.02566 0.(letter)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.03082 0.(} ])ashow260 34 gm0.69732 0. 32 0.06973 0.(translates the compiler description in file )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.25105 0.(name)ashow0 fsbu fc2 F /|______Helvetica fntbn0.61813 0. 32 0.06181 0.( \(with the grammar name )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.31239 0.(G)ashow0 fsbu fc2 F /|______Helvetica fntbn0.65505 0. 32 0.06550 0.(, say\) into a scanner module)awidthshow274 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn(G)show0 fsbu fc2 F /|______Helvetica fntbn-0.02575 0.(S.Mod and a parser module )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn(G)show0 fsbu fc2 F /|______Helvetica fntbn-0.02487 0.(P.Mod. The following options may be specified)ashow302 48 gm(S)show302 62 gm-0.02915 0.(prints the set of start and successor symbols for every nonterminal)ashow316 48 gm(X)show316 62 gm-0.07540 0.(prints a cross-reference list of all terminals and nonterminals)ashow358 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn4.10675 0. 32 0.41067 0.(3.1 Scanner Interface)awidthshow386 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.12054 0.(DEFINITION )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.17352 0.(G)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.10484 0.(S;  \(*generated scanner*\))ashow400 62 gm-0.12867 0.(IMPORT Files;)ashow414 62 gm0.22053 0.(VAR)ashow428 76 gm-0.04351 0.(src: Files.File;)ashow428 224 gm0.03646 0. 32 0.00364 0.(\(*source file; to be opened by the caller*\))awidthshow442 76 gm-0.07446 0.(pos: LONGINT;)ashow442 224 gm0.17059 0. 32 0.01705 0.(\(*source file position of current token*\))awidthshow456 76 gm-0.06800 0.(line, col, len: INTEGER;)ashow456 224 gm0.16784 0. 32 0.01678 0.(\(*line, column, and length of current token*\))awidthshow470 76 gm-0.08749 0.(Error: PROCEDURE \(n: INTEGER; pos: LONGINT\);  \(*install error message procedure here*\))ashow484 62 gm0.17730 0. 32 0.01773 0.(PROCEDURE Reset;)awidthshow498 62 gm-0.12507 0.(PROCEDURE Get\(VAR sym: INTEGER\);)ashow512 62 gm-0.12226 0.(PROCEDURE GetName\(pos: LONGINT; len: INTEGER; VAR name: ARRAY OF CHAR\);)ashow526 48 gm-0.16174 0.(END )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.21067 0.(G)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.25590 0.(S.)ashow554 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn(Reset)show0 fsbu fc2 F /|______Helvetica fntbn0.02883 0. 32 0.00288 0.( is called by the parser to initialize the scanner. Note that the main module is responsible to open the)awidthshow568 34 gm0.43380 0. 32 0.04338 0.(source file )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.12757 0.(src)ashow0 fsbu fc2 F /|______Helvetica fntbn0.40512 0. 32 0.04051 0.( prior to calling the parser. The parser then calls )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.15426 0.(Get)ashow0 fsbu fc2 F /|______Helvetica fntbn0.44448 0. 32 0.04444 0.( repeatedly to get the next token from)awidthshow582 34 gm0.44189 0. 32 0.04418 0.(the source text. Information about the most recently recognized token can be found in the variables )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.14027 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn(,)show596 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.28717 0.(line)ashow0 fsbu fc2 F /|______Helvetica fntbn0.34194 0. 32 0.03419 0.(, )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.31449 0.(col)ashow0 fsbu fc2 F /|______Helvetica fntbn0.71029 0. 32 0.07102 0.(, and )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.32826 0.(len)ashow0 fsbu fc2 F /|______Helvetica fntbn1.17736 0. 32 0.11773 0.(. The procedure )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.45126 0.(GetName)ashow0 fsbu fc2 F /|______Helvetica fntbn0.24569 0.(\()ashow9 fzbu fc2 F /|______Symbol fntbn0.40057 0.(\257)ashow2 fs10 fzbu fc2 F /|______Helvetica-Oblique fntbn0.39671 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn0.20513 0.(,)ashow9 fzbu fc2 F /|______Symbol fntbn0.40057 0.(\257)ashow2 fs10 fzbu fc2 F /|______Helvetica-Oblique fntbn0.84991 0. 32 0.08499 0.( len)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.34194 0. 32 0.03419 0.(, )awidthshow9 fzbu fc2 F /|______Symbol fntbn0.40057 0.(\255)ashow2 fs10 fzbu fc2 F /|______Helvetica-Oblique fntbn0.46157 0.(name)ashow0 fsbu fc2 F /|______Helvetica fntbn0.95214 0. 32 0.09521 0.(\) can be used to obtain the text of the)awidthshow610 34 gm0.17974 0. 32 0.01797 0.(token at position )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.06132 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn0.14160 0. 32 0.01416 0.( with length )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.05073 0.(len)ashow0 fsbu fc2 F /|______Helvetica fntbn(.)show638 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.27221 0. 32 0.02722 0.(Error messages)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.14755 0. 32 0.01475 0.(. For every syntax error the parser calls the procedure variable )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.04115 0.(Error)ashow0 fsbu fc2 F /|______Helvetica fntbn0.14663 0. 32 0.01466 0.( with an error number)awidthshow652 34 gm-0.04382 0.(and an error position as parameters. The user can install any procedure that prints a message or that saves)ashow666 34 gm0.36758 0. 32 0.03675 0.(the error information for later output. )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.10032 0.(Error)ashow0 fsbu fc2 F /|______Helvetica fntbn0.34378 0. 32 0.03437 0.( can also be used to report semantic errors. \(Make sure to use)awidthshow680 34 gm0.10345 0. 32 0.01034 0.(semantic error numbers that do not interfere with syntax error numbers; e.g., start semantic error numbers)awidthshow694 34 gm0.21545 0. 32 0.02154 0.(at 200.\) The error numbers together with an explanatory text are appended to the generated parser in the)awidthshow708 34 gm0.23315 0. 32 0.02331 0.(following form:)awidthshowF T cp%%Page: ? 12op0 0 xl1 1 pen20 99 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(12)show57 48 gm(nc 47 0 734 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn0.02822 0. 32 0.00282 0.(|  0: Msg\("EOF expected"\))awidthshow71 48 gm0.16082 0. 32 0.01608 0.(|  1: Msg\("ident expected"\))awidthshow85 48 gm0.04364 0. 32 0.00436 0.(|  2: Msg\("string expected"\))awidthshow99 48 gm0.12619 0. 32 0.01261 0.(|  3: Msg\("number expected"\))awidthshow113 48 gm(\311)show141 34 gm-0.02680 0.(This text can be copied to a procedure that prints textual error messages.)ashow183 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn3.78311 0. 32 0.37831 0.(3.2 Parser Interface)awidthshow211 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.14956 0.(DEFINITION )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.21530 0.(G)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.12704 0.(P;  \(*generated parser*\))ashow225 62 gm-0.03713 0.(PROCEDURE Parse;)ashow239 48 gm-0.16174 0.(END )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.21067 0.(G)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.25590 0.(P.)ashow267 34 gm0.47058 0. 32 0.04705 0.(The main program simply has to open the source file and call )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.16307 0.(Parse)ashow0 fsbu fc2 F /|______Helvetica fntbn0.46035 0. 32 0.04603 0.( in order to start the compilation. An)awidthshow281 34 gm-0.14614 0.(example of a simple main program is:)ashow309 48 gm0.62988 0. 32 0.06298 0.(Texts.OpenScanner\(s, Oberon.Par.text, Oberon.Par.pos\); Texts.Scan\(s\);)awidthshow323 48 gm-0.16676 0.(IF s.class = Texts.Name THEN)ashow337 62 gm-0.05755 0.(GS.src := Files.Old\(s.s\);)ashow351 62 gm-0.01737 0.(GS.Error := )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.01921 0.(own error message procedure)ashow0 fsbu fc2 F /|______Helvetica fntbn(;)show365 62 gm-0.20217 0.(IF GS.src # NIL THEN GP.Parse END;)ashow379 48 gm-0.05427 0.(END)ashow421 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn2.77236 0. 32 0.27723 0.(3.3 Grammar Tests)awidthshow449 34 gm0 fsbu fc2 F /|______Helvetica fntbn1.58843 0. 32 0.15884 0.(Coco/R performs several tests to check if the grammar is well-formed. If one of the following error)awidthshow463 34 gm(messages is produced, no compiler parts are generated.)show491 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.00708 0.(No production for X)ashow505 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.00283 0.(The nonterminal X has been used, but there is no  production for it.)ashow519 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.01446 0.(X cannot be reached)ashow533 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.04469 0.(There is a production for nonterminal X, but X cannot be derived from the start symbol.)ashow547 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.04403 0.(X cannot be derived to terminals)ashow561 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.10134 0.(For example, if there is a production X = "\(" X "\)".)ashow575 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.48934 0.(X --> Y, Y --> X)ashow589 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.12486 0.(X and Y are nonterminals with circular derivations.)ashow603 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn(Tokens X and Y cannot be distinguished)show617 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.07893 0.(The terminal symbols X and Y are declared to have the same structure, e.g.,)ashow631 62 gm0.02563 0. 32 0.00256 0.(integer = digit {digit}.)awidthshow645 62 gm-0.05805 0.(real = digit {digit} ["." {digit}].)ashow659 48 gm-0.10908 0.(In this example, a digit string can be recognized as an integer or as a real.)ashow687 34 gm0.89248 0. 32 0.08924 0.(The following messages are warnings. They may indicate an error but they may also describe desired)awidthshow701 34 gm0.21835 0. 32 0.02183 0.(effects. The generated compiler parts are valid. If an LL\(1\) error is reported for a construct X one must be)awidthshow715 34 gm-0.06115 0.(aware that the generated parser will choose the first of several possible alternatives for X.)ashowF T cp%%Page: ? 13op0 0 xl1 1 pen20 424 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(13)show59 34 gm(nc 49 0 708 538 6 rc)kp2 fs10 fzbu fc2 F /|______Helvetica-Oblique fntbn(X deletable)show73 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.07884 0.(X can be derived to the empty string, e.g., X = {Y}.)ashow87 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.12348 0.(LL\(1\) error in X: Y is start of more than one alternative)ashow101 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.05706 0.(Several alternatives in the production of X start with the terminal Y, e.g.,)ashow115 62 gm0.09506 0. 32 0.00950 0.(Statement = ident ":=" Expression | ident [ActualParameters].)awidthshow129 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.07868 0.(LL\(1\) error in X: Y is start and successor of deletable structure)ashow143 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.03291 0.(Deletable structures are [\311] and {\311}, e.g.,)ashow157 62 gm0.42221 0. 32 0.04222 0.(qualident = [ident "."] ident.)awidthshow171 62 gm0.31921 0. 32 0.03192 0.(Statement = "IF" Expression "THEN" Statement ["ELSE" Statement].)awidthshow185 48 gm0.64086 0. 32 0.06408 0.(The ELSE at the start of the else-part may also be a successor of a statement. This LL\(1\) conflict is)awidthshow199 48 gm0.31845 0. 32 0.03184 0.(known under the name "dangling else".)awidthshow241 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn2.57080 0. 32 0.25708 0.(4. Hints for Advanced Users of Coco/R)awidthshow283 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.02209 0.(Providing a Hand-Written Scanner)ashow311 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.21392 0. 32 0.02139 0.(Scanning is a time-consuming task. The scanner generated by Coco/R is optimized, but it is implemented)awidthshow325 34 gm0.94192 0. 32 0.09419 0.(as a deterministic finite automaton, which introduces some overhead. A manual implementation of the)awidthshow339 34 gm-0.03724 0.(scanner is slightly more efficient. For time-critical applications a programmer may want to generate a parser)ashow353 34 gm-0.05758 0.(but provide a hand-written scanner. This can be done by declaring all terminal symbols \(including literals\) as)ashow367 34 gm0.22964 0. 32 0.02296 0.(tokens but without defining their structure by an EBNF expression, e.g.,)awidthshow395 48 gm0.17678 0.(TOKENS)ashow409 62 gm0.33131 0.(ident)ashow423 62 gm0.22164 0.(number)ashow437 62 gm("IF")show451 62 gm(\311)show479 34 gm0.22506 0. 32 0.02250 0.(If a named token is declared without structure, no scanner is generated. Tokens are assigned numbers in)awidthshow493 34 gm0.68923 0. 32 0.06892 0.(the order of their declaration; i.e., the first token gets the number 1, the second the number 2, etc. The)awidthshow507 34 gm0.70434 0. 32 0.07043 0.(number 0 is reserved for the end-of-file symbol. The hand-written scanner has to return token numbers)awidthshow521 34 gm0.06805 0. 32 0.00680 0.(according to this convention. It must have the interface described in Section 3.)awidthshow563 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.02461 0.(Tailoring the Generated Compiler Parts to One's Needs)ashow591 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.29739 0. 32 0.02973 0.(Using a generator usually increases productivity while at the same time flexibility is decreased. There are)awidthshow605 34 gm0.54306 0. 32 0.05430 0.(always special cases that can be handled more efficiently in a hand-written implementation. A good tool)awidthshow619 34 gm0.54550 0. 32 0.05455 0.(handles routine matters in a standard way but gives the user the chance to change them if he wants to.)awidthshow633 34 gm-0.02359 0.(Coco/R generates the scanner and the parser from source texts \(so-called frames\) stored under the names)ashow647 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.29768 0.(Scanner.FRM)ashow0 fsbu fc2 F /|______Helvetica fntbn0.47225 0. 32 0.04722 0.( and )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.28608 0.(Parser.FRM)ashow0 fsbu fc2 F /|______Helvetica fntbn0.91293 0. 32 0.09129 0.(. It does so by inserting grammar-specific parts into these frames. The)awidthshow661 34 gm0.93780 0. 32 0.09378 0.(programmer may edit the frames and may therefore change any of the internally used algorithms. For)awidthshow675 34 gm-0.00823 0.(example, he can Implement a different buffering scheme for input characters.)ashowF T cp%%Page: ? 14op0 0 xl1 1 pen20 374 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(14)show60 34 gm(nc 50 0 681 538 6 rc)kp2 fs10 fzbu fc2 F /|______Helvetica-Oblique fntbn0.50750 0. 32 0.05075 0.(Accessing the Lookahead Token)awidthshow88 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.77850 0. 32 0.07785 0.(Section 3 specified the interface of the generated scanner. This interface is not complete. Actually, the)awidthshow102 34 gm0.08941 0. 32 0.00894 0.(scanner also exports information about the lookahead token:)awidthshow130 48 gm0.03814 0. 32 0.00381 0.(nextPos: LONGINT;)awidthshow130 227 gm0.17379 0. 32 0.01737 0.(\(*source file position of the lookahead token*\))awidthshow144 48 gm0.21270 0. 32 0.02127 0.(nextLine, nextCol: INTEGER;)awidthshow144 227 gm0.08026 0. 32 0.00802 0.(\(*line and column number of the lookahead token*\))awidthshow172 34 gm0.37078 0. 32 0.03707 0.(These variables refer to the most recently )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.12118 0.(scanned)ashow0 fsbu fc2 F /|______Helvetica fntbn0.37521 0. 32 0.03752 0.( token \(the lookahead token\), while the variables )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.12059 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn(,)show186 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn(line)show0 fsbu fc2 F /|______Helvetica fntbn( and )show2 fsbu fc2 F /|______Helvetica-Oblique fntbn(col)show0 fsbu fc2 F /|______Helvetica fntbn-0.00486 0.( refer to the most recently )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn(parsed)show0 fsbu fc2 F /|______Helvetica fntbn( token.)show228 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.02769 0.(Controlling the Parser by Semantic Information)ashow256 34 gm0 fsbu fc2 F /|______Helvetica fntbn-0.00219 0.(Ideally, syntax analysis should be independent of semantic analysis \(symbol table handling, type checking,)ashow270 34 gm0.05203 0. 32 0.00520 0.(etc.\). Some languages like Ada and C, however, have constructs that can only be distinguished if one also)awidthshow284 34 gm0.75500 0. 32 0.07550 0.(considers semantic information, e.g., the type of the parsed symbols. Even Oberon has constructs that)awidthshow298 34 gm-0.03598 0.(cannot be parsed by looking at their syntax alone. For example, a designator is defined in Oberon as)ashow326 48 gm-0.05940 0.(Designator = Qualident {"." ident | "^" | "[" ExprList "]" | "\(" Qualident "\)" }.)ashow354 34 gm-0.07766 0.(where x\(T\) means a type guard \(i.e., x is asserted to be of type T\). A designator may be used in a statement)ashow382 48 gm-0.09426 0.(Statement = \311 | Designator ["\(" ExprList "\)"] | \311  .)ashow410 34 gm1.90902 0. 32 0.19090 0.(Here x\(T\) can be interpreted as a designator x \(a procedure name\) and a parameter T. The two)awidthshow424 34 gm0.68054 0. 32 0.06805 0.(interpretations of x\(T\) can only be distinguished by looking at the type of x. If it is a procedure then the)awidthshow438 34 gm-0.03605 0.(opening bracket is the start of a parameter list, otherwise the bracket belongs to a type guard.)ashow466 34 gm0.75408 0. 32 0.07540 0.(Cocol/R allows control of the parser from within semantic actions to a certain degree. A designator, for)awidthshow480 34 gm-0.01066 0.(example, can be processed in the following way:)ashow508 48 gm-0.07012 0.(Designator <VAR x: Item> =)ashow522 62 gm0.34149 0. 32 0.03414 0.(Qualident <x>)awidthshow536 62 gm-0.55903 0.({ \311)ashow550 62 gm(|)show550 198 gm-0.10592 0.(\(.)ashow550 210 gm-0.12097 0.(IF )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.13952 0.(x is procedure)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.18528 0.( THEN RETURN END .\))ashow564 76 gm0.06820 0. 32 0.00682 0.("\(" Qualident <y> "\)")awidthshow564 198 gm-0.44213 0.(\(. )ashow564 210 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.02212 0. 32 0.00221 0.(process type guard)awidthshow0 fsbu fc2 F /|______Helvetica fntbn( .\))show578 62 gm-0.44824 0.(} .)ashow606 34 gm0.80352 0. 32 0.08035 0.(When an opening bracket is seen after a )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.25152 0.(Qualident)ashow0 fsbu fc2 F /|______Helvetica fntbn0.89080 0. 32 0.08908 0.(, the alternative starting with an opening bracket is)awidthshow620 34 gm0.01144 0. 32 0.00114 0.(selected. The first semantic action of this alternative checks for the type of x. If x is a procedure, the parser)awidthshow634 34 gm0.32333 0. 32 0.03233 0.(returns from the production and continues in the Statement production.)awidthshowF T cp%%Page: ? 15op0 0 xl1 1 pen20 352 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(15)show67 34 gm(nc 57 0 725 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn4.61700 0. 32 0.46170 0.(5. Implementation)awidthshow95 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.76904 0. 32 0.07690 0.(Coco/R was written in Oberon on a Ceres workstation. There is also a Modula-2 version for Macintosh)awidthshow109 34 gm-0.02037 0.(computers. A preliminary version of Coco/R was implemented as a master's thesis \([Senn89]\). Coco/R was)ashow123 34 gm0.03356 0. 32 0.00335 0.(used for its own implementation. Like any compiler, it consists of a scanner \(CRS\), a parser \(CRP\), a table)awidthshow137 34 gm0.18997 0. 32 0.01899 0.(handler \(CRT\), and two  modules for output generation, one for the scanner \(CRA\) and one for the parser)awidthshow151 34 gm0.04028 0. 32 0.00402 0.(\(CRX\). During parsing the scanner description is transformed into a non-deterministic finite automaton and)awidthshow165 34 gm0.14129 0. 32 0.01412 0.(the attributed grammar is transformed into a graph. These data structures are used for grammar tests and)awidthshow179 34 gm1 64 lw0.20996 0. 32 0.02099 0.(for the generation of the two source modules.)awidthshow-300 -198 xl0 0 gm(nc -103 0 0 113 6 rc)kp0 gr-102.5 58.5 -90.5 86.5 0 rc-94 62 gmF 1 setTxMode9 fzbu fc2 F /|______Helvetica fntbn(Coco)show0 gr-12.5 0.5 -0.5 25.5 0 rc-4 4 gmF 1 setTxMode-0.49874 0.(CRS)ashow0 gr-72.5 60.5 -60.5 85.5 0 rc-64 64 gmF 1 setTxMode-0.49874 0.(CRP)ashow0 gr-12.5 60.5 -0.5 84.5 0 rc-4 64 gmF 1 setTxMode-0.74606 0.(CRT)ashow0 gr-42.5 87.5 -30.5 112.5 0 rc-34 91 gmF 1 setTxMode-0.49874 0.(CRA)ashow0 gr-42.5 33.5 -30.5 58.5 0 rc-34 37 gmF 1 setTxMode-0.49874 0.(CRX)ashow-12 72 gm(nc -58 0 0 113 6 rc)kp0 gr-60 72 lin(nc -103 0 0 113 6 rc)kp-65 67 -55 77 75 105 4 ar-48 45 gm-43 45 lin-48 45 gm-48 66 lin-48 102 gm-43 102 lin-48 102 gm-48 78 lin(nc -58 0 0 113 6 rc)kp-60 78 lin(nc -103 0 0 113 6 rc)kp-65 73 -55 83 75 105 4 ar-48 66 gm(nc -58 0 0 113 6 rc)kp-60 66 lin(nc -103 0 0 113 6 rc)kp-65 61 -55 71 75 105 4 ar-18 66 gm-13 66 lin-18 66 gm-18 45 lin(nc -28 0 0 113 6 rc)kp-30 45 lin(nc -103 0 0 113 6 rc)kp-35 40 -25 50 75 105 4 ar-18 78 gm-13 78 lin-18 78 gm-18 99 lin(nc -28 0 0 113 6 rc)kp-30 99 lin(nc -103 0 0 113 6 rc)kp-35 94 -25 104 75 105 4 ar-13 12 gm-78 12 lin-18 12 gm-18 39 lin(nc -28 0 0 113 6 rc)kp-30 39 lin(nc -103 0 0 113 6 rc)kp-35 34 -25 44 75 105 4 ar-51 12 gm-51 60 lin(nc -58 0 0 113 6 rc)kp-60 60 lin(nc -103 0 0 113 6 rc)kp-65 55 -55 65 75 105 4 ar-73 72 gm(nc -88 0 0 113 6 rc)kp-90 72 lin(nc -103 0 0 113 6 rc)kp-95 67 -85 77 75 105 4 ar-78 12 gm-78 66 lin(nc -88 0 0 113 6 rc)kp-90 66 lin(nc -103 0 0 113 6 rc)kp-95 61 -85 71 75 105 4 ar64 1 lw1 1 lw300 198 xl342 34 gm(nc 57 0 725 538 6 rc)kpF 1 setTxMode1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn4.22378 0. 32 0.42237 0.(5.1 Scanner Generation)awidthshow370 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.36285 0. 32 0.03628 0.(During parsing of the compiler description, the token declarations are translated into a syntax graph from)awidthshow384 34 gm1.63909 0. 32 0.16390 0.(which a non-deterministic finite automaton is generated. In a second step, this automaton is made)awidthshow398 34 gm0.63552 0. 32 0.06355 0.(deterministic. The algorithms for the manipulation of the automaton are described in [M\232ss86]. Figure 1)awidthshow412 34 gm1 64 lw0.40191 0. 32 0.04019 0.(sketches this process.)awidthshow-683 -85 xl0 0 gm(nc -253 0 0 367 6 rc)kp64 gr-127 183 0 367 4 rc0 gr-126.5 183.5 -0.5 366.5 0 rc64 gr-127 0 0 184 4 rc0 gr-126.5 0.5 -0.5 183.5 0 rc(nc -82 94 -70 109 6 rc)kp64 gr-82 91 -70 109 4 ov0 gr-81.5 91.5 -70.5 108.5 0 ov(nc -85 283 -73 298 6 rc)kp64 gr-85 280 -73 298 4 ov0 gr-84.5 280.5 -73.5 297.5 0 ov(nc -42 84 -27 96 6 rc)kp64 gr-45 84 -27 96 4 ov0 gr-44.5 84.5 -27.5 95.5 0 ov(nc -43 273 -28 285 6 rc)kp64 gr-46 273 -28 285 4 ov0 gr-45.5 273.5 -28.5 284.5 0 ov(nc -253 0 0 367 6 rc)kp64 gr-253 0 -126 184 4 rc0 gr-252.5 0.5 -126.5 183.5 0 rc64 gr-253 183 -126 367 4 rc0 gr-252.5 183.5 -126.5 366.5 0 rc-212 10 gmF 1 setTxMode9 fzbu fc2 F /|______Helvetica fntbn-0.33288 0.(CHARACTERS)ashow-201 10 gm-0.09483 0.(   digit = "0123456789".)ashow-190 10 gm-0.04913 0.(   octdigit = "01234567".)ashow-168 10 gm-0.20079 0.(TOKENS)ashow-157 10 gm-0.06816 0.(   decimal = digit {digit}.)ashow-146 10 gm0.03097 0. 32 0.00309 0.(   octal = octdigit {octdigit} "B".)awidthshow-200 295 gm0.12463 0.(digit)ashow-200 250 gm0.12463 0.(digit)ashow-158 250 gm0.21356 0.(octdigit)ashow-158 301 gm0.21356 0.(octdigit)ashow-137 306 gm-0.19628 0.("B")ashow-200 199 gm(decimal :)show-239 52 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.36727 0. 32 0.03672 0.(regular expression)awidthshow-239 247 gm0.70709 0. 32 0.07070 0.(syntax graph)awidthshow-113 31 gm0.41229 0. 32 0.04122 0.(non-deterministic automaton)awidthshow-113 226 gm0.46539 0. 32 0.04653 0.(deterministic automaton)awidthshow-158 199 gm0 fsbu fc2 F /|______Helvetica fntbn0.62179 0. 32 0.06217 0.(octal :)awidthshow-203 270 gm(nc -253 0 0 289 6 rc)kp0 gr-203 291 lin(nc -253 0 0 367 6 rc)kp-208 286 -198 296 165 195 4 ar-203 315 gm-203 324 lin-215 324 lin-215 279 lin(nc -253 0 -205 367 6 rc)kp-203 279 lin(nc -253 0 0 367 6 rc)kp-208 274 -198 284 255 285 4 ar-197 303 gm(nc -253 0 -190 367 6 rc)kp-188 303 lin(nc -253 0 0 367 6 rc)kp-193 298 -183 308 255 285 4 ar-180 301 gmF 1 setTxModebu fc2 F /|______Symbol fntbn(e)show-161 282 gm(nc -253 0 0 295 6 rc)kp0 gr-161 297 lin(nc -253 0 0 367 6 rc)kp-166 292 -156 302 165 195 4 ar-161 333 gm-161 345 lin-173 345 lin-173 285 lin(nc -253 0 -163 367 6 rc)kp-161 285 lin(nc -253 0 0 367 6 rc)kp-166 280 -156 290 255 285 4 ar-155 312 gm(nc -253 0 -148 367 6 rc)kp-146 312 lin(nc -253 0 0 367 6 rc)kp-151 307 -141 317 255 285 4 ar64 gr-82 30 -69 43 4 ov0 gr-81.5 30.5 -69.5 42.5 0 ov64 gr-85 219 -72 232 4 ov0 gr-84.5 219.5 -72.5 231.5 0 ov64 1 lw1 1 lw64 gr-82 84 -69 97 4 ov0 gr-81.5 84.5 -69.5 96.5 0 ov64 gr-85 273 -72 286 4 ov0 gr-84.5 273.5 -72.5 285.5 0 ov1 64 lw64 gr-52 84 -39 97 4 ov0 gr-51.5 84.5 -39.5 96.5 0 ov64 1 lw1 1 lw64 gr-52 126 -39 139 4 ov0 gr-51.5 126.5 -39.5 138.5 0 ov64 gr-55 315 -42 328 4 ov0 gr-54.5 315.5 -42.5 327.5 0 ov1 64 lw-72 34 gmF 1 setTxModebu fc2 F /|______Helvetica fntbn(1)show-75 223 gm(1)show-77 52 gm0.12463 0.(digit)ashow-80 241 gm({8, 9})show-62 280 gm({8, 9})show-47 105 gm(B)show-49 298 gm(B)show-47 43 gm0.21356 0.(octdigit)ashow-50 232 gm0.21356 0.(octdigit)ashow-18 76 gm0.21356 0.(octdigit)ashow-19 265 gm0.21356 0.(octdigit)ashow-72 110 gm0.12463 0.(digit)ashow-75 299 gm0.12463 0.(digit)ashow-72 88 gm(2)show-75 277 gm(2)show-42 88 gm(3)show-42 130 gm(4)show-45 319 gm(4)show-76 42 gm(nc -253 0 0 82 6 rc)kp0 gr-76 84 lin(nc -253 0 0 367 6 rc)kp-81 79 -71 89 165 195 4 ar-79 231 gm(nc -253 0 0 271 6 rc)kp-79 273 lin(nc -253 0 0 367 6 rc)kp-84 268 -74 278 165 195 4 ar-46 36 gm(nc -253 0 0 82 6 rc)kp-46 84 lin(nc -253 0 0 367 6 rc)kp-51 79 -41 89 165 195 4 ar-49 225 gm(nc -253 0 0 262 6 rc)kp-49 264 lin(nc -253 0 0 367 6 rc)kp-54 259 -44 269 165 195 4 ar-70 36 gm-46 36 lin-73 225 gm-49 225 lin-46 96 gm(nc -253 0 0 124 6 rc)kp-46 126 lin(nc -253 0 0 367 6 rc)kp-51 121 -41 131 165 195 4 ar-49 291 gm(nc -253 0 0 313 6 rc)kp-49 315 lin(nc -253 0 0 367 6 rc)kp-54 310 -44 320 165 195 4 ar-81 96 gm(nc -253 96 0 367 6 rc)kp-80 94 lin(nc -253 0 0 367 6 rc)kp-85 89 -75 99 319 349 4 ar-84 285 gm(nc -253 285 0 367 6 rc)kp-83 283 lin(nc -253 0 0 367 6 rc)kp-88 278 -78 288 319 349 4 ar-39 84 gm(nc -40 0 0 367 6 rc)kp-42 86 lin(nc -253 0 0 367 6 rc)kp-47 81 -37 91 109 139 4 ar-40 273 gm(nc -41 0 0 367 6 rc)kp-43 275 lin(nc -253 0 0 367 6 rc)kp-48 270 -38 280 109 139 4 ar64 1 lw1 1 lw64 gr-55 265 -42 293 23.5 23.5 4 rr0 gr-54.5 265.5 -42.5 292.5 23.5 23.5 0 rr1 64 lw-45 268 gmF 1 setTxMode0.66101 0. 32 0.06610 0.([2, 3])awidthshow-55 279 gm(nc -71 0 0 367 6 rc)kp0 gr-73 279 lin(nc -253 0 0 367 6 rc)kp-78 274 -68 284 75 105 4 ar64 1 lw1 1 lw2 2 pen-62 146 gm(nc -253 0 0 188 6 rc)kp32 gr-62 194 lin(nc -253 0 0 367 6 rc)kp-76 180 -46 210 165 195 4 ar-182 146 gm(nc -253 0 0 188 6 rc)kp-182 194 lin(nc -253 0 0 367 6 rc)kp-196 180 -166 210 165 195 4 ar-140 197 gm(nc -253 0 -113 367 6 rc)kp-107 164 lin(nc -253 0 0 367 6 rc)kp-121 150 -91 180 300 330 4 ar683 85 xl1 1 pen706 105 gm(nc 57 0 725 538 6 rc)kp2.73217 0 rmovetoF 1 setTxMode1 fsbu fc2 F /|______Helvetica-Bold fntbn(Fig. 1)show0 fsbu fc2 F /|______Helvetica fntbn(   Transformation of regular expressions into a deterministic finite automaton)showF T cp%%Page: ? 16op0 0 xl1 1 pen20 437 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(16)show54 34 gm(nc 44 0 690 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn0.09826 0. 32 0.00982 0.(The automaton is not generated directly from the regular expressions but from a syntax graph. This allows)awidthshow68 34 gm0.25466 0. 32 0.02546 0.(making it more deterministic from the beginning, thus simplifying the later algorithms. Figure 1 shows that)awidthshow82 34 gm1.46942 0. 32 0.14694 0.(tokens may have very similar structures, differing only in their last characters. These structures are)awidthshow96 34 gm0.91079 0. 32 0.09107 0.(automatically stripped of any disambiguity. The programmer does not have to take care of making the)awidthshow110 34 gm0.16586 0. 32 0.01658 0.(beginnings of tokens distinct. Even very complicated structures can be processed like the various kinds of)awidthshow124 34 gm1 64 lw-0.03179 0.(numeric constants in Modula-2 \(Figure 2; final states are denoted by bold circles\):)ashow-391 -48 xl0 0 gm(nc -249 0 0 389 6 rc)kp64 grpr-184 168 pl-178 174 pl-175 174 pl-172 171 pl-172 168 pl-178 162 pl4 ep0 grpr-184 168 pl-178 174 pl-175 174 pl-172 171 pl-172 168 pl-178 162 pl0 ep(nc -49 345 -40 357 6 rc)kp64 gr-49 342 -40 357 4 ov0 gr-48.5 342.5 -40.5 356.5 0 ov(nc -249 0 0 389 6 rc)kp64 grpr-187 234 pl-196 243 pl-199 243 pl-202 240 pl-202 237 pl-193 228 pl4 ep0 grpr-187 234 pl-196 243 pl-199 243 pl-202 240 pl-202 237 pl-193 228 pl0 ep64 grpr-142 225 pl-151 216 pl-151 213 pl-147 209 pl-145 209 pl-136 218 pl4 ep0 grpr-142 225 pl-151 216 pl-151 213 pl-147 209 pl-145 209 pl-136 218 pl0 ep-236 4 gmF 1 setTxMode9 fzbu fc2 F /|______Helvetica fntbn-0.03268 0.(integer =)ashow-225 4 gm-0.06776 0.(   digit {digit})ashow-214 4 gm-0.10772 0.(|  digit {digit} CONTEXT \(".."\))ashow-203 4 gm-0.07946 0.(|  digit {hexdigit} "H")ashow-192 4 gm0.11291 0. 32 0.01129 0.(|  octdigit {octdigit} "B".)awidthshow-170 4 gm-0.05148 0.(char =)ashow-159 4 gm0.01174 0. 32 0.00117 0.(   octdigit {octdigit} "C".)awidthshow-137 4 gm-0.15097 0.(real =)ashow-126 4 gm-0.05261 0.(   digit {digit} "." {digit})ashow-115 4 gm-0.00845 0.(   ["E" ["+"|"-"] digit [digit]].)ashow64 gr-245 153 -229 169 4 ov0 gr-244.5 153.5 -229.5 168.5 0 ov64 1 lw1 1 lw64 gr-193 153 -177 169 4 ov0 gr-192.5 153.5 -177.5 168.5 0 ov64 gr-193 219 -177 235 4 ov0 gr-192.5 219.5 -177.5 234.5 0 ov1 64 lw64 gr-142 219 -126 235 4 ov0 gr-141.5 219.5 -126.5 234.5 0 ov64 1 lw1 1 lw64 gr-142 270 -126 286 4 ov0 gr-141.5 270.5 -126.5 285.5 0 ov64 gr-52 287 -36 303 4 ov0 gr-51.5 287.5 -36.5 302.5 0 ov64 gr-52 330 -36 346 4 ov0 gr-51.5 330.5 -36.5 345.5 0 ov1 64 lw64 gr-94 330 -78 346 4 ov0 gr-93.5 330.5 -78.5 345.5 0 ov64 1 lw1 1 lw64 gr-136 330 -120 346 4 ov0 gr-135.5 330.5 -120.5 345.5 0 ov64 gr-178 330 -162 346 4 ov0 gr-177.5 330.5 -162.5 345.5 0 ov1 64 lw64 gr-136 372 -120 388 4 ov0 gr-135.5 372.5 -120.5 387.5 0 ov64 1 lw1 1 lw64 gr-16 287 0 303 4 ov0 gr-15.5 287.5 -0.5 302.5 0 ov64 gr-82 219 -66 235 4 ov0 gr-81.5 219.5 -66.5 234.5 0 ov64 gr-112 186 -96 202 4 ov0 gr-111.5 186.5 -96.5 201.5 0 ov1 64 lw-211 163 gmF 1 setTxMode0.21356 0.(octdigit)ashow-152 190 gm0.14173 0.(hexdigit)ashow-86 195 gm0.14173 0.(hexdigit)ashow-119 181 gm0.14173 0.(hexdigit)ashow-74 163 gm(C)show-107 163 gm(B)show-134 244 gm(H)show-162 268 gm(H)show-74 244 gm(H)show-105 244 gm(H)show-65 307 gm(E)show-59 339 gm(E)show-44 306 gm0.12463 0.(digit)ashow-101 339 gm0.12463 0.(digit)ashow-143 339 gm0.12463 0.(digit)ashow-88 355 gm-0.05267 0.({+, -})ashow-129 351 gm0.12463 0.(digit)ashow-41 358 gm0.12463 0.(digit)ashow-26 288 gm1 fs12 fzbu fc2 F /|______Helvetica-Bold fntbn(.)show-45 165 gm(.)show-140 297 gm(.)show-56 163 gm0 fs9 fzbu fc2 F /|______Helvetica fntbn(H)show-167 174 gm0.21356 0.(octdigit)ashow-202 239 gm0.12463 0.(digit)ashow-234 159 gm(1)show-182 159 gm(2)show-182 225 gm(3)show-131 224 gm(4)show-131 276 gm(5)show-71 225 gm(7)show-101 192 gm(6)show-41 293 gm(8)show-5 293 gm(9)show-41 333 gm(10)show-83 333 gm(11)show-125 333 gm(12)show-125 375 gm(13)show-167 333 gm(14)show-187 179 gm0.12037 0.({8,9})ashow-135 162 gm0.06074 0.({A,D,E,F})ashow-160 229 gm0.08068 0.({A,B,C})ashow-149 229 gm({D,E,F})show-240 185 gm0.12037 0.({8,9})ashow-186 168 gm(nc -249 0 0 217 6 rc)kp0 gr-186 219 lin(nc -249 0 0 389 6 rc)kp-191 214 -181 224 165 195 4 ar-178 227 gm(nc -249 0 -144 389 6 rc)kp-142 227 lin(nc -249 0 0 389 6 rc)kp-147 222 -137 232 255 285 4 ar-139 215 gm(nc -249 0 -138 389 6 rc)kp-136 218 lin(nc -249 0 0 389 6 rc)kp-141 213 -131 223 210 240 4 ar-178 160 gm-43 160 lin-133 160 gm(nc -249 0 0 217 6 rc)kp-133 219 lin(nc -249 0 0 389 6 rc)kp-138 214 -128 224 165 195 4 ar-74 160 gm(nc -249 0 0 217 6 rc)kp-74 219 lin(nc -249 0 0 389 6 rc)kp-79 214 -69 224 165 195 4 ar-82 227 gm(nc -125 0 0 389 6 rc)kp-127 227 lin(nc -249 0 0 389 6 rc)kp-132 222 -122 232 75 105 4 ar-55 160 gm-55 277 lin-134 234 gm(nc -249 0 0 268 6 rc)kp-134 270 lin(nc -249 0 0 389 6 rc)kp-139 265 -129 275 165 195 4 ar-55 277 gm(nc -125 0 0 389 6 rc)kp-127 277 lin(nc -249 0 0 389 6 rc)kp-132 272 -122 282 75 105 4 ar-74 234 gm(nc -249 0 0 274 6 rc)kp-74 276 lin(nc -249 0 0 389 6 rc)kp-79 271 -69 281 165 195 4 ar-184 234 gm-184 277 lin(nc -249 0 -144 389 6 rc)kp-142 277 lin(nc -249 0 0 389 6 rc)kp-147 272 -137 282 255 285 4 ar-196 231 gm(nc -249 0 -195 389 6 rc)kp-193 228 lin(nc -249 0 0 389 6 rc)kp-198 223 -188 233 300 330 4 ar-43 160 gm(nc -249 0 0 284 6 rc)kp-43 286 lin(nc -249 0 0 389 6 rc)kp-48 281 -38 291 165 195 4 ar-186 234 gm-186 294 lin(nc -249 0 -55 389 6 rc)kp-53 294 lin(nc -249 0 0 389 6 rc)kp-58 289 -48 299 255 285 4 ar-37 294 gm(nc -249 0 -19 389 6 rc)kp-17 294 lin(nc -249 0 0 389 6 rc)kp-22 289 -12 299 255 285 4 ar-43 302 gm(nc -249 0 0 328 6 rc)kp-43 330 lin(nc -249 0 0 389 6 rc)kp-48 325 -38 335 165 195 4 ar-52 337 gm(nc -77 0 0 389 6 rc)kp-79 337 lin(nc -249 0 0 389 6 rc)kp-84 332 -74 342 75 105 4 ar-52 300 gm(nc -80 0 0 389 6 rc)kp-82 330 lin(nc -249 0 0 389 6 rc)kp-87 325 -77 335 120 150 4 ar-94 337 gm(nc -119 0 0 389 6 rc)kp-121 337 lin(nc -249 0 0 389 6 rc)kp-126 332 -116 342 75 105 4 ar-136 337 gm(nc -161 0 0 389 6 rc)kp-163 337 lin(nc -249 0 0 389 6 rc)kp-168 332 -158 342 75 105 4 ar-128 372 gm(nc -249 347 0 389 6 rc)kp-128 345 lin(nc -249 0 0 389 6 rc)kp-133 340 -123 350 345 375 4 ar-86 345 gm-86 379 lin(nc -119 0 0 389 6 rc)kp-121 379 lin(nc -249 0 0 389 6 rc)kp-126 374 -116 384 75 105 4 ar-175 165 gm(nc -176 0 0 389 6 rc)kp-178 162 lin(nc -249 0 0 389 6 rc)kp-183 157 -173 167 30 60 4 ar-230 160 gm(nc -249 0 -196 389 6 rc)kp-194 160 lin(nc -249 0 0 389 6 rc)kp-199 155 -189 165 255 285 4 ar-238 168 gm-238 225 lin(nc -249 0 -195 389 6 rc)kp-193 225 lin(nc -249 0 0 389 6 rc)kp-198 220 -188 230 255 285 4 ar-105 160 gm(nc -249 0 0 183 6 rc)kp-105 185 lin(nc -249 0 0 389 6 rc)kp-110 180 -100 190 165 195 4 ar-109 201 gm(nc -125 0 0 389 6 rc)kp-127 219 lin(nc -249 0 0 389 6 rc)kp-132 214 -122 224 120 150 4 ar-105 201 gm(nc -249 0 0 274 6 rc)kp-105 276 lin(nc -249 0 0 389 6 rc)kp-110 271 -100 281 165 195 4 ar-49 348 gm(nc -249 347 0 389 6 rc)kp-49 345 lin(nc -249 0 0 389 6 rc)kp-54 340 -44 350 345 375 4 ar64 1 lw1 1 lw391 48 xl419 48 gm(nc 44 0 690 538 6 rc)kpF 1 setTxMode1 fsbu fc2 F /|______Helvetica-Bold fntbn0.05722 0.(Fig.2)ashow0 fsbu fc2 F /|______Helvetica fntbn0.19714 0. 32 0.01971 0.(   Automaton for the various kinds of numeric constants in Modula-2)awidthshow447 34 gm10 fzbu fc2 F /|______Helvetica fntbn0.32257 0. 32 0.03225 0.(If speed is important, a finite automaton is not the best possible implementation of a scanner. It would be)awidthshow461 34 gm1.67327 0. 32 0.16732 0.(more efficient to implement the recognition of tokens as ordinary procedures like in a hand-written)awidthshow475 34 gm0.82321 0. 32 0.08232 0.(scanner. However, if one looks at the Figure 2, one can imagine that it is not easy to generate such a)awidthshow489 34 gm1.36077 0. 32 0.13607 0.(scanner automatically. On the other hand, an automaton is space-efficient. Therefore we decided to)awidthshow503 34 gm0.72937 0. 32 0.07293 0.(generate the scanner as an automaton. To make it as efficient as possible, the automaton is not table-)awidthshow517 34 gm0.14190 0. 32 0.01419 0.(driven but implemented in code. For the token declarations)awidthshow545 48 gm0.05355 0. 32 0.00535 0.(ident = letter {letter|digit}.)awidthshow559 48 gm-0.00881 0.(number = digit {digit}.)ashow587 34 gm0.08255 0. 32 0.00825 0.(and the occurrence of the literals "IF", "THEN", "END", "<", and "<=" in the productions of the grammar the)awidthshow601 34 gm0.36727 0. 32 0.03672 0.(automaton of Figure 3 is generated. The textual representation of token classes like )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.09194 0.(ident)ashow0 fsbu fc2 F /|______Helvetica fntbn0.12771 0. 32 0.01277 0.( or )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.11981 0.(number)ashow0 fsbu fc2 F /|______Helvetica fntbn0.30822 0. 32 0.03082 0.( can)awidthshow615 34 gm2.55218 0. 32 0.25521 0.(be obtained via the procedure )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.92396 0.(GetName)ashow0 fsbu fc2 F /|______Helvetica fntbn0.50308 0.(\()ashow9 fzbu fc2 F /|______Symbol fntbn0.82017 0.(\257)ashow2 fs10 fzbu fc2 F /|______Helvetica-Oblique fntbn0.81227 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn0.70007 0. 32 0.07000 0.(, )awidthshow9 fzbu fc2 F /|______Symbol fntbn0.82017 0.(\257)ashow2 fs10 fzbu fc2 F /|______Helvetica-Oblique fntbn0.67213 0.(len)ashow0 fsbu fc2 F /|______Helvetica fntbn0.70007 0. 32 0.07000 0.(, )awidthshow9 fzbu fc2 F /|______Symbol fntbn0.82017 0.(\255)ashow2 fs10 fzbu fc2 F /|______Helvetica-Oblique fntbn0.74761 0.(sourceText)ashow0 fsbu fc2 F /|______Helvetica fntbn1.94961 0. 32 0.19496 0.(\) where )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.81227 0.(pos)ashow0 fsbu fc2 F /|______Helvetica fntbn1.34460 0. 32 0.13446 0.( and )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.67213 0.(len)ashow0 fsbu fc2 F /|______Helvetica fntbn1.89819 0. 32 0.18981 0.( are the)awidthshow629 34 gm1.78665 0. 32 0.17866 0.(position and length of the token in the source file. Note, that keywords cannot be handled by the)awidthshow643 34 gm-0.02296 0.(automaton since they have the same structure as identifiers. This fact is taken into account by Coco/R: Any)ashow657 34 gm0.49087 0. 32 0.04908 0.(literal that matches a declared token is stored in a literal list. Later, when an identifier is recognized, it is)awidthshow671 34 gm0.42648 0. 32 0.04264 0.(checked whether it is a literal \()awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.13656 0.(CheckLiteral)ashow0 fsbu fc2 F /|______Helvetica fntbn0.49011 0. 32 0.04901 0.(\), and if so, the literal's token number is returned. Comments)awidthshow685 34 gm-0.00424 0.(are not handled by the automaton. They are recognized by a special procedure.)ashowF T cp%%Page: ? 17op0 0 xl1 1 pen20 386 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kp1 64 lwF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(17)show-285 -34 xl0 0 gm(nc -229 118 -220 130 6 rc)kp64 gr-229 115 -220 130 4 ov0 gr-228.5 115.5 -220.5 129.5 0 ov(nc -199 118 -190 130 6 rc)kp64 gr-199 115 -190 130 4 ov0 gr-198.5 115.5 -190.5 129.5 0 ov64 1 lw1 1 lw(nc -235 0 0 443 6 rc)kp64 gr-232 103 -216 119 4 ov0 gr-231.5 103.5 -216.5 118.5 0 ov64 gr-202 103 -186 119 4 ov0 gr-201.5 103.5 -186.5 118.5 0 ov64 gr-172 115 -156 131 4 ov0 gr-171.5 115.5 -156.5 130.5 0 ov1 64 lw64 gr-172 79 -156 95 4 ov0 gr-171.5 79.5 -156.5 94.5 0 ov64 gr-232 46 -216 62 4 ov0 gr-231.5 46.5 -216.5 61.5 0 ov-224 134 gmF 1 setTxModebu fc2 F /|______Helvetica fntbn0.20007 0.(letter)ashow-213 134 gm0.12463 0.(digit)ashow-191 134 gm0.12463 0.(digit)ashow-226 68 gm0.20007 0.(letter)ashow-226 212 gm-0.04966 0.(Get\(VAR sym: INTEGER\))ashow-4 212 gm-0.07183 0.(END Get;)ashow-196 68 gm0.12463 0.(digit)ashow-166 65 gm(<)show-166 98 gm(=)show-220 52 gm(0)show-220 107 gm(1)show-190 107 gm(2)show-160 83 gm(3)show-148 49 gm(\311)show-160 119 gm(4)show-215 221 gm(\311)show-204 221 gm0.40817 0. 32 0.04081 0.(state := startState[ch]; pos := chPos; len := 0;)awidthshow-193 221 gm(LOOP)show-182 221 gm-0.07853 0.(   NextCh; INC\(len\);)ashow-171 221 gm-0.13423 0.(   CASE state OF)ashow-160 221 gm-0.15074 0.(     1: IF \(ch>="A"\) & \(ch<="Z"\) OR \(ch>="a"\) & \(ch<="z"\) )ashow-149 221 gm-0.18882 0.(         OR \(ch>="0"\) & \(ch<="9"\) THEN state := 1)ashow-138 221 gm-0.13345 0.(         ELSE sym := ident; CheckLiteral; RETURN)ashow-127 221 gm-0.50016 0.(         END)ashow-116 221 gm-0.13627 0.(   | 2: IF \(ch>="0"\) & \(ch<="9"\) THEN state := 2)ashow-105 221 gm-0.24304 0.(         ELSE sym := number; RETURN)ashow-94 221 gm-0.50016 0.(         END)ashow-83 221 gm-0.17680 0.(   | 3: IF ch = "=" THEN state := 4)ashow-72 221 gm-0.21798 0.(         ELSE sym := lss; RETURN)ashow-61 221 gm-0.50016 0.(         END)ashow-50 221 gm-0.20364 0.(   | 4: sym := leq; RETURN)ashow-39 221 gm-0.50047 0.(   \311)ashow-28 221 gm-0.49977 0.(   END)ashow-17 221 gm-0.49874 0.(END)ashow-224 61 gm(nc -235 0 0 100 6 rc)kp0 gr-224 102 lin(nc -235 0 0 443 6 rc)kp-229 97 -219 107 165 195 4 ar-194 54 gm(nc -235 0 0 100 6 rc)kp-194 102 lin(nc -235 0 0 443 6 rc)kp-199 97 -189 107 165 195 4 ar-164 54 gm(nc -235 0 0 76 6 rc)kp-164 78 lin(nc -235 0 0 443 6 rc)kp-169 73 -159 83 165 195 4 ar-164 94 gm(nc -235 0 0 112 6 rc)kp-164 114 lin(nc -235 0 0 443 6 rc)kp-169 109 -159 119 165 195 4 ar-221 120 gm(nc -235 119 0 443 6 rc)kp-222 117 lin(nc -235 0 0 443 6 rc)kp-227 112 -217 122 3 33 4 ar-191 120 gm(nc -235 119 0 443 6 rc)kp-192 117 lin(nc -235 0 0 443 6 rc)kp-197 112 -187 122 3 33 4 ar-217 54 gm-157 54 lin64 1 lw1 1 lw285 34 xl299 85 gm(nc 50 0 598 538 6 rc)kpF 1 setTxMode1 fsbu fc2 F /|______Helvetica-Bold fntbn0.27206 0. 32 0.02720 0.(Fig. 3)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.27496 0. 32 0.02749 0.(   Implementation of an automaton)awidthshow327 34 gm10 fzbu fc2 F /|______Helvetica fntbn0.70480 0. 32 0.07048 0.(The most time-consuming task in scanning is reading the source text. The scanner can be speeded up)awidthshow341 34 gm0.30303 0. 32 0.03030 0.(significantly if reading can be made faster. To read a text character by character is usually slower than to)awidthshow355 34 gm-0.04710 0.(read it in blocks that correspond to disk sectors. With the large memories available today, it is even possible)ashow369 34 gm0.68328 0. 32 0.06832 0.(to read the whole source text into memory at once. In the Oberon system this is more than three times)awidthshow383 34 gm0.56579 0. 32 0.05657 0.(faster than reading it character by character. Even large Oberon programs rarely exceed 40 kilobytes in)awidthshow397 34 gm0.45913 0. 32 0.04591 0.(source code. With several megabytes of memory available, this "waste" of 40 kilobytes seems justified if)awidthshow411 34 gm-0.04696 0.(scanning speed can be improved so drastically \(the overall run time of the compiler is improved by 30%\).)ashow439 34 gm0.79376 0. 32 0.07937 0.(Having the whole source text in memory has yet another advantage: the source text can be used as a)awidthshow453 34 gm0.15472 0. 32 0.01547 0.(name list. The text of token classes, like identifiers, no longer has to be copied to a separate name list but)awidthshow467 34 gm0.22033 0. 32 0.02203 0.(can remain where it is. One simply has to remember its position and its length. This idea is in accordance)awidthshow481 34 gm1.16485 0. 32 0.11648 0.(with the principle that during scanning every input character should be "touched" as little as possible)awidthshow495 34 gm0.11026 0.([Waite86].)ashow523 34 gm1.11862 0. 32 0.11186 0.(Another advantage of this technique is that it permits the backup of the input pointer to any previous)awidthshow537 34 gm0.30258 0. 32 0.03025 0.(position. This is useful for handling tokens with CONTEXT phrases in Cocol/R. To recognize such tokens)awidthshow551 34 gm0.76873 0. 32 0.07687 0.(the right-hand context has to be analyzed, too. After the token and its context have been scanned, the)awidthshow565 34 gm-0.02268 0.(input pointer is simply decreased by the length of the CONTEXT phrase, so that this text will be read by the)ashow579 34 gm-0.04434 0.(scanner again.)ashowF T cp%%Page: ? 18op0 0 xl1 1 pen20 99 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(18)show60 34 gm(nc 50 0 720 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn3.91159 0. 32 0.39115 0.(5.2 Parser Generation)awidthshow88 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.58898 0. 32 0.05889 0.(The productions of the attributed grammar are translated into procedures of a recursive descent parser.)awidthshow102 34 gm0.48248 0. 32 0.04824 0.(However, it is not possible to generate the parser on the fly while the grammar is analyzed since certain)awidthshow116 34 gm0.32974 0. 32 0.03297 0.(sets of terminal symbols are required at various locations in the parsing procedures. These sets can only)awidthshow130 34 gm0.01449 0. 32 0.00144 0.(be computed when the whole grammar is known. Therefore, the productions are first translated into syntax)awidthshow144 34 gm0.77209 0. 32 0.07720 0.(graphs, then the symbol sets are computed, and finally the parsing procedures are generated from the)awidthshow158 34 gm-0.02291 0.(graphs. The syntax graphs are also used for grammar tests \(completeness, redundancy, LL\(1\) property\).)ashow186 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn1.25549 0. 32 0.12554 0.(Syntax graphs)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.71319 0. 32 0.07131 0.(. A node is generated for every symbol in the grammar and for every semantic action. A)awidthshow200 34 gm0.09628 0. 32 0.00962 0.(sequence of symbols and actions is translated into a sequence of nodes. A semantic action node contains)awidthshow214 34 gm1.60842 0. 32 0.16084 0.(the position and the length of the action in the source text. Alternatives, options and iterations are)awidthshow228 34 gm1 64 lw0.08285 0. 32 0.00828 0.(modelled by special nodes of the following form)awidthshow-311 -48 xl0 0 gm(nc -65 0 0 385 6 rc)kp64 gr-38 9 -25 40 4 rc0 gr-37.5 9.5 -25.5 39.5 0 rc64 gr-38 210 -25 241 4 rc0 gr-37.5 210.5 -25.5 240.5 0 rc64 gr-26 9 -13 40 4 rc0 gr-25.5 9.5 -13.5 39.5 0 rc64 gr-14 9 -1 40 4 rc0 gr-13.5 9.5 -1.5 39.5 0 rc64 gr-26 210 -13 241 4 rc0 gr-25.5 210.5 -13.5 240.5 0 rc-29 58 gmF 1 setTxMode9 fzbu fc2 F /|______Helvetica fntbn1.18652 0. 32 0.11865 0.(to successor)awidthshow-29 259 gm1.18652 0. 32 0.11865 0.(to successor)awidthshow-56 208 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.16485 0.(option,)ashow-45 208 gm0.12458 0.(iteration)ashow-47 4 gm0.14933 0.(alternative)ashow-16 58 gm0 fsbu fc2 F /|______Helvetica fntbn0.29449 0. 32 0.02944 0.(to start node of alternative)awidthshow-4 58 gm0.29708 0. 32 0.02970 0.(to next branch)awidthshow-16 259 gm0.24398 0. 32 0.02439 0.(to start node of inner structure)awidthshow-32 33 gm(nc -65 0 0 49 6 rc)kp0 gr-32 51 lin(nc -65 0 0 385 6 rc)kp-37 46 -27 56 165 195 4 ar-32 234 gm(nc -65 0 0 250 6 rc)kp-32 252 lin(nc -65 0 0 385 6 rc)kp-37 247 -27 257 165 195 4 ar-20 33 gm(nc -65 0 0 49 6 rc)kp-20 51 lin(nc -65 0 0 385 6 rc)kp-25 46 -15 56 165 195 4 ar-8 33 gm(nc -65 0 0 49 6 rc)kp-8 51 lin(nc -65 0 0 385 6 rc)kp-13 46 -3 56 165 195 4 ar-20 234 gm(nc -65 0 0 250 6 rc)kp-20 252 lin(nc -65 0 0 385 6 rc)kp-25 247 -15 257 165 195 4 ar64 1 lw1 1 lw311 48 xl339 34 gm(nc 50 0 720 538 6 rc)kpF 1 setTxMode10 fzbu fc2 F /|______Helvetica fntbn0.30441 0. 32 0.03044 0.(A production like)awidthshow367 48 gm-0.02561 0.(Expression <VAR x: OGT.Item>)ashow367 204 gm-0.10592 0.(\(.)ashow367 215 gm-0.14468 0.(VAR y: OGT.Item; op: INTEGER .\))ashow381 48 gm(=)show381 62 gm-0.02314 0.(SimExpr <x>)ashow395 62 gm([)show395 76 gm0.68832 0. 32 0.06883 0.(Relop <op>)awidthshow395 204 gm-0.10592 0.(\(.)ashow395 215 gm-0.09780 0.(IF x.typ.form = Bool THEN OGE.MOp\(op, x\) END .\))ashow409 76 gm-0.02314 0.(SimExpr <y>)ashow409 204 gm-0.10592 0.(\(.)ashow409 215 gm-0.06182 0.(OGE.Op\(op, x, y\) .\))ashow423 62 gm(|)show423 76 gm-0.07380 0.("IN" SimExpr <y>)ashow423 204 gm-0.10592 0.(\(.)ashow423 215 gm-0.17417 0.(OGE.In\(x, y\) .\))ashow437 62 gm(|)show437 76 gm-0.08154 0.("IS" )ashow437 204 gm-0.10592 0.(\(.)ashow437 215 gm-0.12344 0.(IF x.mode >= Typ THEN err\(112\) END .\))ashow451 76 gm0.44128 0. 32 0.04412 0.(qualident <y>)awidthshow451 204 gm-0.10592 0.(\(.)ashow451 215 gm-0.09649 0.(IF y.mode = Typ THEN OGE.TypTest\(x, y\) ELSE err\(52\) END .\))ashow465 62 gm0.44335 0.(].)ashow493 34 gm1 64 lw-0.01289 0.(is translated into the following graph)ashow-673 -48 xl-153 161 gm(nc -162 0 0 370 6 rc)kp2 fs9 fzbu fc2 F /|______Helvetica-Oblique fntbn0.24656 0.(opt)ashow-114 182 gm0.24949 0.(alt)ashow-75 182 gm0.24949 0.(alt)ashow-36 182 gm0.24949 0.(alt)ashow-137 88 gm0 fsbu fc2 F /|______Helvetica fntbn(SimExpr)show-138 4 gm0.16578 0.(Expression)ashow-138 55 gmbu fc2 F /|______Symbol fntbn(\336)show-93 295 gmbu fc2 F /|______Helvetica fntbn(SimExpr)show-57 244 gm(SimExpr)show-18 280 gm0.06072 0.(qualident)ashow-93 217 gm-0.12539 0.(RelOp)ashow-93 259 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn(sem)show-18 244 gm(sem)show-93 349 gm(sem)show-57 298 gm(sem)show-18 334 gm(sem)show-57 217 gm0 fsbu fc2 F /|______Helvetica fntbn(IN)show-18 217 gm0.49656 0.(IS)ashow-142 129 gm(nc -162 0 0 148 6 rc)kp0 gr-142 150 lin(nc -162 0 0 370 6 rc)kp-147 145 -137 155 165 195 4 ar-97 243 gm(nc -162 0 0 253 6 rc)kp-97 255 lin(nc -162 0 0 370 6 rc)kp-102 250 -92 260 165 195 4 ar-97 279 gm(nc -162 0 0 289 6 rc)kp-97 291 lin(nc -162 0 0 370 6 rc)kp-102 286 -92 296 165 195 4 ar-22 264 gm(nc -162 0 0 274 6 rc)kp-22 276 lin(nc -162 0 0 370 6 rc)kp-27 271 -17 281 165 195 4 ar-61 228 gm(nc -162 0 0 238 6 rc)kp-61 240 lin(nc -162 0 0 370 6 rc)kp-66 235 -56 245 165 195 4 ar-22 228 gm(nc -162 0 0 238 6 rc)kp-22 240 lin(nc -162 0 0 370 6 rc)kp-27 235 -17 245 165 195 4 ar-97 333 gm(nc -162 0 0 343 6 rc)kp-97 345 lin(nc -162 0 0 370 6 rc)kp-102 340 -92 350 165 195 4 ar-61 282 gm(nc -162 0 0 292 6 rc)kp-61 294 lin(nc -162 0 0 370 6 rc)kp-66 289 -56 299 165 195 4 ar-22 318 gm(nc -162 0 0 328 6 rc)kp-22 330 lin(nc -162 0 0 370 6 rc)kp-27 325 -17 335 165 195 4 ar64 gr-148 153 -138 181 4 rc0 gr-147.5 153.5 -138.5 180.5 0 rc64 gr-112 165 -102 193 4 rc0 gr-111.5 165.5 -102.5 192.5 0 rc64 gr-73 165 -63 193 4 rc0 gr-72.5 165.5 -63.5 192.5 0 rc64 gr-34 165 -24 193 4 rc0 gr-33.5 165.5 -24.5 192.5 0 rc64 gr-139 153 -129 181 4 rc0 gr-138.5 153.5 -129.5 180.5 0 rc64 gr-103 165 -93 193 4 rc0 gr-102.5 165.5 -93.5 192.5 0 rc64 gr-64 165 -54 193 4 rc0 gr-63.5 165.5 -54.5 192.5 0 rc64 gr-25 165 -15 193 4 rc0 gr-24.5 165.5 -15.5 192.5 0 rc64 gr-94 165 -84 193 4 rc0 gr-93.5 165.5 -84.5 192.5 0 rc64 gr-55 165 -45 193 4 rc0 gr-54.5 165.5 -45.5 192.5 0 rc64 gr-16 165 -6 193 4 rc0 gr-15.5 165.5 -6.5 192.5 0 rc-143 174 gm-143 186 lin-107 186 gm-107 198 lin-68 186 gm-68 198 lin-29 186 gm-29 198 lin-146 186 gm-140 186 lin-110 198 gm-104 198 lin-71 198 gm-65 198 lin-32 198 gm-26 198 lin-133 167 gm(nc -162 0 -117 370 6 rc)kp-115 167 lin(nc -162 0 0 370 6 rc)kp-120 162 -110 172 255 285 4 ar-88 179 gm(nc -162 0 -78 370 6 rc)kp-76 179 lin(nc -162 0 0 370 6 rc)kp-81 174 -71 184 255 285 4 ar-49 179 gm(nc -162 0 -39 370 6 rc)kp-37 179 lin(nc -162 0 0 370 6 rc)kp-42 174 -32 184 255 285 4 ar-98 186 gm(nc -162 0 0 208 6 rc)kp-98 210 lin(nc -162 0 0 370 6 rc)kp-103 205 -93 215 165 195 4 ar-59 186 gm(nc -162 0 0 208 6 rc)kp-59 210 lin(nc -162 0 0 370 6 rc)kp-64 205 -54 215 165 195 4 ar-20 186 gm(nc -162 0 0 208 6 rc)kp-20 210 lin(nc -162 0 0 370 6 rc)kp-25 205 -15 215 165 195 4 ar-10 179 gm-1 179 lin-1 176 gm-1 182 lin64 1 lw1 1 lw673 48 xl687 48 gm(nc 50 0 720 538 6 rc)kpF 1 setTxMode1 fsbu fc2 F /|______Helvetica-Bold fntbn0.29739 0. 32 0.02973 0.(Fig. 4)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.31021 0. 32 0.03102 0.(  Syntax graph for the generation of parsing procedures)awidthshowF T cp%%Page: ? 19op0 0 xl1 1 pen20 297 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(19)show60 34 gm(nc 50 0 723 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn0.62149 0. 32 0.06214 0.(Note that this kind of graphs is different from the syntax graphs used for scanner generation \(Figure 1\).)awidthshow74 34 gm0.12710 0. 32 0.01271 0.(Alternatives, options and iterations are represented by special nodes. This makes the graphs better suited)awidthshow88 34 gm1.12411 0. 32 0.11241 0.(for the generation of recursive descent parsers. Having the graphs and the symbol sets, it is easy to)awidthshow102 34 gm0.66116 0. 32 0.06611 0.(generate parsing procedures. A sequence of nodes is translated into a sequence of parsing constructs.)awidthshow116 34 gm0.52078 0. 32 0.05207 0.(Semantic actions are simply copied from the source text without modification. The following table shows)awidthshow130 34 gm-0.07427 0.(that every grammar item can be replaced mechanically by the equivalent parsing item.)ashow158 159 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.24090 0.(grammar item)ashow158 255 gm-0.04055 0.(parsing item)ashow172 48 gm0 fsbu fc2 F /|______Helvetica fntbn-0.16595 0.(terminal )ashow172 159 gm(t)show172 255 gm0.12496 0.(Expect\(t\))ashow186 48 gm(nonterminal )show186 159 gm-0.05879 0.(nt <a, b>)ashow186 255 gm-0.09533 0.(nt\(a, b\))ashow200 48 gm-0.08222 0.(semantic action )ashow200 159 gm-0.07397 0.(\(. )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.12690 0.(anyText)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.11096 0.( .\))ashow200 255 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.07272 0.(anyText)ashow228 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.04623 0. 32 0.00462 0.(Terminals are recognized by the procedure)awidthshow256 48 gm-0.05937 0.(PROCEDURE Expect\(s: INTEGER\);)ashow270 48 gm-0.21556 0.(BEGIN IF sym = s THEN Get ELSE Error\(s\) END)ashow284 48 gm0.38421 0. 32 0.03842 0.(END Expect;)awidthshow312 34 gm1.18621 0. 32 0.11862 0.(The procedure )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.31959 0.(Get)ashow0 fsbu fc2 F /|______Helvetica fntbn0.92086 0. 32 0.09208 0.( requests the next input token from the scanner and stores it in the global variable)awidthshow326 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.10906 0.(sym)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.07380 0.(. It is also responsible for filtering out pragmas.)ashow354 48 gm-0.04278 0.(PROCEDURE Get;)ashow368 48 gm-0.27894 0.(BEGIN)ashow382 62 gm0.17639 0. 32 0.01763 0.(LOOP Scanner.Get\(sym\);)awidthshow396 76 gm-0.15687 0.(IF )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.20170 0.(sym is pragma)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.22036 0.( THEN )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.17684 0.(Handle it)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.23970 0.( ELSE EXIT END)ashow410 62 gm-0.05427 0.(END)ashow424 48 gm-0.11152 0.(END Get;)ashow452 34 gm0.69152 0. 32 0.06915 0.(Alternatives, options and iterations are translated into control structures. Whenever possible, redundant)awidthshow466 34 gm-0.00337 0.(checks are eliminated. The following procedure is generated from the graph in Figure 4.)ashow494 48 gm-0.05545 0.(PROCEDURE Expression \(VAR x: OGT.Item\);)ashow508 62 gm-0.11546 0.(VAR y: OGT.Item; op: INTEGER;)ashow522 48 gm-0.37878 0.(BEGIN )ashow536 62 gm-0.02070 0.(SimExpr\(x\);)ashow550 62 gm-0.11595 0.(IF sym IN {eql, neq, lss, leq, gtr, geq, in, is} THEN)ashow564 76 gm-0.11177 0.(IF sym IN {eql, neq, lss, leq, gtr, geq} THEN)ashow578 91 gm-0.05162 0.(Relop\(op\); IF x.typ.form = Bool THEN OGE.MOp\(op, x\) END;)ashow592 91 gm-0.03546 0.(SimExpr\(y\); OGE.Op\(op, x, y\);)ashow606 76 gm-0.17007 0.(ELSIF sym = in THEN)ashow620 91 gm-0.10313 0.(Get; SimExpr\(y\); OGE.In\(x, y\);)ashow634 76 gm0.47702 0.(ELSE)ashow648 91 gm-0.10284 0.(Get; IF x.mode >= Typ THEN err\(112\) END;)ashow662 91 gm-0.06053 0.(qualident\(y\); IF y.mode = Typ THEN OGE.TypTest\(x, y\) ELSE err\(52\) END;)ashow676 76 gm-0.05427 0.(END)ashow690 62 gm-0.05427 0.(END)ashow704 48 gm0.36727 0. 32 0.03672 0.(END Expression;)awidthshowF T cp%%Page: ? 20op0 0 xl1 1 pen20 125 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(20)show65 34 gm(nc 55 0 727 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn1.61132 0. 32 0.16113 0.(A more interesting example is the following production, which also contains iterations. \(For brevity,)awidthshow79 34 gm-0.03660 0.(semantic actions are not shown.\))ashow107 48 gm-0.12524 0.(FormalParameters = "\(" [ FormPar { ";" FormPar} ] "\)"   [":" qualident]. )ashow135 34 gm1 64 lw0.08804 0. 32 0.00880 0.(The corresponding syntax graph is)awidthshow-274 -48 xl-112 158 gm(nc -121 0 0 384 6 rc)kp2 fs9 fzbu fc2 F /|______Helvetica-Oblique fntbn0.24656 0.(opt)ashow-112 305 gm0.24656 0.(opt)ashow-56 227 gm0.16804 0.(iter)ashow-99 118 gm0 fsbu fc2 F /|______Helvetica fntbn(\()show-99 208 gm(\))show-45 163 gm-0.16525 0.(FormPar)ashow-4 265 gm-0.16525 0.(FormPar)ashow-61 343 gm0.06072 0.(qualident)ashow-6 232 gm(;)show-63 310 gm(:)show-100 4 gm-0.03280 0.(FormalParameters)ashow-100 85 gmbu fc2 F /|______Symbol fntbn(\336)show-102 126 gm(nc -121 0 0 145 6 rc)kp0 gr-102 147 lin(nc -121 0 0 384 6 rc)kp-107 142 -97 152 165 195 4 ar-102 216 gm(nc -121 0 0 292 6 rc)kp-102 294 lin(nc -121 0 0 384 6 rc)kp-107 289 -97 299 165 195 4 ar-48 201 gm(nc -121 0 0 211 6 rc)kp-48 213 lin(nc -121 0 0 384 6 rc)kp-53 208 -43 218 165 195 4 ar-9 243 gm(nc -121 0 0 253 6 rc)kp-9 255 lin(nc -121 0 0 384 6 rc)kp-14 250 -4 260 165 195 4 ar-66 321 gm(nc -121 0 0 331 6 rc)kp-66 333 lin(nc -121 0 0 384 6 rc)kp-71 328 -61 338 165 195 4 ar64 gr-107 150 -97 178 4 rc0 gr-106.5 150.5 -97.5 177.5 0 rc64 gr-107 297 -97 325 4 rc0 gr-106.5 297.5 -97.5 324.5 0 rc64 gr-53 219 -43 247 4 rc0 gr-52.5 219.5 -43.5 246.5 0 rc64 gr-98 150 -88 178 4 rc0 gr-97.5 150.5 -88.5 177.5 0 rc64 gr-98 297 -88 325 4 rc0 gr-97.5 297.5 -88.5 324.5 0 rc64 gr-44 219 -34 247 4 rc0 gr-43.5 219.5 -34.5 246.5 0 rc-102 318 gm-102 330 lin-48 240 gmF 32<AAAAAAAAAAAAAAAA>pat-48 252 lin-105 330 gm0 gr-99 330 lin-92 164 gm(nc -121 0 -58 384 6 rc)kp-56 164 lin(nc -121 0 0 384 6 rc)kp-61 159 -51 169 255 285 4 ar-92 311 gm(nc -121 0 -76 384 6 rc)kp-74 311 lin(nc -121 0 0 384 6 rc)kp-79 306 -69 316 255 285 4 ar-38 233 gm(nc -121 0 -22 384 6 rc)kp-20 233 lin(nc -121 0 0 384 6 rc)kp-25 228 -15 238 255 285 4 ar-102 171 gm(nc -121 0 0 193 6 rc)kp-102 195 lin(nc -121 0 0 384 6 rc)kp-107 190 -97 200 165 195 4 ar-8 303 gm32 gr-8 315 linF 32<FF00FF00FF00FF00>pat-41 315 lin(nc -121 251 0 384 6 rc)kpF 32<AAAAAAAAAAAAAAAA>pat-41 249 lin(nc -121 0 0 384 6 rc)kp-46 244 -36 254 345 375 4 ar-74 252 gmF 32<FF00FF00FF00FF00>pat-48 252 lin-74 252 gmF 32<AAAAAAAAAAAAAAAA>pat-74 207 lin(nc -90 0 0 384 6 rc)kpF 32<FF00FF00FF00FF00>pat-92 207 lin(nc -121 0 0 384 6 rc)kp-97 202 -87 212 75 105 4 ar64 1 lw1 1 lw274 48 xl288 34 gm(nc 55 0 727 538 6 rc)kpF 1 setTxMode10 fzbu fc2 F /|______Helvetica fntbn0.24398 0. 32 0.02439 0.(Dotted arrows denote pointers to the successors of inner structures. They help in the computation of start)awidthshow302 34 gm0.04760 0. 32 0.00476 0.(and successor sets. The graph is translated into the following procedure:)awidthshow330 48 gm-0.08494 0.(PROCEDURE FormalParameters;)ashow344 48 gm-0.27894 0.(BEGIN)ashow358 62 gm0.08129 0.(Expect\(leftpar\);)ashow372 62 gm-0.24386 0.(IF sym IN {ident, var} THEN)ashow386 76 gm-0.09397 0.(FormPar;)ashow400 76 gm-0.15408 0.(WHILE sym = semicolon DO Get; FormPar END)ashow414 62 gm0.03778 0.(END;)ashow428 62 gm0.06941 0.(Expect\(rightpar\);)ashow442 62 gm-0.11325 0.(IF sym = colon THEN Get; qualident END)ashow456 48 gm-0.12164 0.(END FormalParameters;)ashow498 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn3.53759 0. 32 0.35375 0.(5.3 Error Recovery)awidthshow526 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.37948 0. 32 0.03794 0.(Good and efficient error recovery is difficult in recursive descent parsers since little information about the)awidthshow540 34 gm-0.09342 0.(parsing process is available when an error occurs. What has to be done in case of an error:)ashow568 34 gm0.66255 0.(1.)ashow568 48 gm-0.02464 0.(Find all symbols with which parsing can be resumed at a certain location in the grammar reachable from)ashow582 48 gm-0.02687 0.(the error location \(recovery symbols\).)ashow596 34 gm0.66255 0.(2.)ashow596 48 gm-0.01962 0.(Skip the input up to the first symbol that is in the recovery set.)ashow610 34 gm0.66255 0.(3.)ashow610 48 gm-0.01808 0.(Drive the parser to the location where the recovery symbol can be recognized. )ashow624 34 gm0.66255 0.(4.)ashow624 48 gm0.01892 0. 32 0.00189 0.(Resume parsing from there.)awidthshow652 34 gm0.68267 0. 32 0.06826 0.(In recursive descent parsers, information about the parsing location and about the expected symbols is)awidthshow666 34 gm0.53787 0. 32 0.05378 0.(only implicitly contained in the parser code \(and in the procedure call stack\) and cannot be exploited for)awidthshow680 34 gm0.35415 0. 32 0.03541 0.(error recovery.  One method to overcome this is to compute the recovery set dynamically during parsing.)awidthshow694 34 gm0.24993 0. 32 0.02499 0.(Then, when an error occurs, the recovery symbols are already known and all that one has to do is to skip)awidthshow708 34 gm1.62490 0. 32 0.16249 0.(erroneous input and to "unroll" the procedure stack up to a legal continuation point [Wirth76]. This)awidthshow722 34 gm0.21347 0. 32 0.02134 0.(technique, although systematically applicable, slows down error-free parsing and inflates the parser code.)awidthshowF T cp%%Page: ? 21op0 0 xl1 1 pen20 505 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(21)show56 34 gm(nc 46 0 713 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn1.53854 0. 32 0.15385 0.(Another technique has therefore been suggested in [Wirth86]. Recovery takes place only at certain)awidthshow70 34 gm0.21148 0. 32 0.02114 0.(synchronization points in the grammar. Errors at other points are reported but cause no recovery. Parsing)awidthshow84 34 gm0.32363 0. 32 0.03236 0.(simply continues up to the next synchronization point where the grammar and the input are synchronized)awidthshow98 34 gm0.47531 0. 32 0.04753 0.(again. This requires the designer of the grammar to specify synchronization points explicitly \320 not a very)awidthshow112 34 gm-0.01246 0.(difficult task if one thinks for a moment. The advantage is that no recovery sets have to be computed at run)ashow126 34 gm-0.13258 0.(time. This makes the parser small and fast.)ashow154 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn2.76977 0. 32 0.27697 0.(Synchronization points)awidthshow0 fsbu fc2 F /|______Helvetica fntbn1.51718 0. 32 0.15171 0.(. In Cocol/R a synchronization point is specified by the keyword SYNC \(see)awidthshow168 34 gm-0.04789 0.(Section 2.3\). A good synchronization point is a location in the grammar where particularly safe symbols \(like)ashow182 34 gm0.39718 0. 32 0.03971 0.(keywords\) are expected and that is often visited by the parser. Typical candidates are the beginning of a)awidthshow196 34 gm0.32516 0. 32 0.03251 0.(statement, the beginning of a declaration or the beginning of a structured type. A synchronization point is)awidthshow210 34 gm0.12664 0. 32 0.01266 0.(translated into a loop that skips all symbols not expected at this point \(except end-of-file\). The set of these)awidthshow224 34 gm-0.00193 0.(symbols can be precomputed at parser generation time. The following example shows two synchronization)ashow238 34 gm0.11245 0. 32 0.01124 0.(points and their counterparts in the generated parser.)awidthshow266 45 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.25784 0.(production)ashow266 215 gm0.57189 0. 32 0.05718 0.(generated parsing procedure)awidthshow288 45 gm0 fsbu fc2 F /|______Helvetica fntbn-0.09054 0.(Declarations =)ashow302 57 gm-0.25939 0.(SYNC)ashow302 215 gm-0.06390 0.(WHILE ~\(sym IN {const, type, var, proc, begin, end, eof}\) DO)ashow316 227 gm-0.12832 0.(Error\(\311\); Get)ashow330 215 gm0.03778 0.(END;)ashow344 57 gm-0.94821 0.({  )ashow344 215 gm-0.14295 0.(WHILE sym IN {const, type, var, proc} DO)ashow358 68 gm-0.01783 0.(\( "CONST" {ConstDecl ";"})ashow358 227 gm-0.21191 0.(IF sym = const THEN Get; \311 )ashow372 68 gm-0.04234 0.(| "TYPE" {TypeDecl ";"})ashow372 227 gm-0.13441 0.(ELSIF sym = type THEN Get; \311)ashow386 68 gm-0.08518 0.(| "VAR" {VarDecl ";"})ashow386 227 gm-0.21615 0.(ELSIF sym = var THEN Get; \311)ashow400 68 gm-0.10333 0.(| ProcDecl)ashow400 227 gm0.49942 0. 32 0.04994 0.(ELSE ProcDecl)awidthshow414 68 gm(\))show414 227 gm0.03778 0.(END;)ashow428 57 gm-1.55661 0.(  )ashow428 68 gm-0.25939 0.(SYNC)ashow428 227 gm-0.06390 0.(WHILE ~\(sym IN {const, type, var, proc, begin, end, eof}\) DO)ashow442 238 gm-0.12832 0.(Error\(\311\); Get)ashow456 227 gm-0.05427 0.(END)ashow470 57 gm-0.11819 0.(}.)ashow470 215 gm-0.05427 0.(END)ashow498 34 gm1.13723 0. 32 0.11372 0.(To avoid spurious error messages, an error is only reported when a certain amount of text has been)awidthshow512 34 gm-0.05123 0.(correctly parsed since the last error.)ashow540 34 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn2.03826 0. 32 0.20382 0.(Weak symbols)awidthshow0 fsbu fc2 F /|______Helvetica fntbn1.25778 0. 32 0.12577 0.(. The knowledge of synchronization points is already sufficient to recover from errors.)awidthshow554 34 gm-0.01696 0.(However, recovery can be improved if the parser also knows about "weak" symbols that are often mistyped)ashow568 34 gm-0.03468 0.(or missing \(like semicolon\). These symbols are marked in the grammar by the keyword WEAK \(see Section)ashow582 34 gm0.50109 0. 32 0.05010 0.(2.3\). If the parser tries to recognize a weak symbol and finds it missing, it reports an error and skips the)awidthshow596 34 gm0.54061 0. 32 0.05406 0.(input until a legal successor of the symbol is found \(or a symbol that is expected at any synchronization)awidthshow610 34 gm1.30371 0. 32 0.13037 0.(point; this is a useful heuristic that avoids skipping safe symbols\). The following example shows the)awidthshow624 34 gm-0.10389 0.(translation of a weak symbol.)ashow652 227 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.47882 0. 32 0.04788 0.(generated parsing code)awidthshow666 48 gm0 fsbu fc2 F /|______Helvetica fntbn0.40634 0. 32 0.04063 0.(Statement =)awidthshow680 62 gm0.36468 0. 32 0.03646 0.(ident )awidthshow680 227 gm0.17887 0.(Expect\(ident\);)ashow694 62 gm0.09552 0. 32 0.00955 0.(WEAK ":=" )awidthshow694 227 gm-0.02549 0.(Weak\(becomes, {)ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.02210 0.(start symbols of Expression)ashow0 fsbu fc2 F /|______Helvetica fntbn(}\);)show708 62 gm0.47164 0. 32 0.04716 0.(Expression .)awidthshow708 227 gm0.17187 0.(Expression)ashowF T cp%%Page: ? 22op0 0 xl1 1 pen20 278 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(22)show66 34 gm(nc 56 0 726 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn-0.02357 0.(The procedure )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.03109 0.(Weak)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.02272 0.( is implemented as follows)ashow94 48 gm-0.03283 0.(PROCEDURE Weak\(s: INTEGER; expected: Set\);)ashow108 48 gm-0.27894 0.(BEGIN)ashow122 62 gm-0.29327 0.(IF sym = s THEN Get)ashow136 62 gm0.46615 0. 32 0.04661 0.(ELSE )awidthshow151 76 gm-0.23730 0.(Error\(s\); WHILE sym )ashowbu fc2 F /|______Symbol fntbn(\317)show151 174 gmbu fc2 F /|______Helvetica fntbn0.05462 0. 32 0.00546 0.( expected )awidthshowbu fc2 F /|______Symbol fntbn(\310)show151 229 gmbu fc2 F /|______Helvetica fntbn( {)show2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.03208 0.(symbols expected at synchronization points)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.04058 0.(} DO Get END)ashow165 62 gm-0.05427 0.(END)ashow179 48 gm-0.15269 0.(END Weak;)ashow207 34 gm1.39160 0. 32 0.13916 0.(Weak symbols give the parser another chance to synchronize in case of an error. Again, the set of)awidthshow221 34 gm-0.00755 0.(expected symbols can be precomputed at parser generation time and cause no run time overhead in error-)ashow235 34 gm0.19805 0. 32 0.01980 0.(free parsing.)awidthshow263 34 gm0.50964 0. 32 0.05096 0.(When an iteration starts with a weak symbol, this symbol is called a )awidthshow2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.96069 0. 32 0.09606 0.(weak separator)awidthshow0 fsbu fc2 F /|______Helvetica fntbn0.42388 0. 32 0.04238 0.( and is handled in a)awidthshow277 34 gm0.44479 0. 32 0.04447 0.(special way. If it cannot be recognized, the input is skipped until a symbol that is contained in one of the)awidthshow291 34 gm0.27008 0. 32 0.02700 0.(following three sets is found:)awidthshow320 48 gmbu fc2 F /|______Symbol fntbn(a)show320 62 gmbu fc2 F /|______Helvetica fntbn-0.09547 0.(symbols that may follow the weak separator)ashow335 48 gmbu fc2 F /|______Symbol fntbn(b)show335 62 gmbu fc2 F /|______Helvetica fntbn-0.05908 0.(symbols that may follow the iteration)ashow350 48 gmbu fc2 F /|______Symbol fntbn(g)show350 62 gmbu fc2 F /|______Helvetica fntbn0.13229 0. 32 0.01322 0.(symbols expected at any synchronization point \(including eof\))awidthshow378 34 gm-0.06004 0.(The following example shows the translation of a weak separator)ashow406 227 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.57189 0. 32 0.05718 0.(generated parsing procedure)awidthshow420 48 gm0 fsbu fc2 F /|______Helvetica fntbn1.11831 0. 32 0.11183 0.(StatSequence =)awidthshow434 62 gm0.07147 0.(Stat)ashow434 227 gm0.10903 0.(Stat;)ashow449 62 gm-0.05657 0.({ WEAK ";" Stat}.)ashow449 227 gm-0.03753 0.(WHILE WeakSep\(semicolon, )ashowbu fc2 F /|______Symbol fntbn(a)show449 365 gmbu fc2 F /|______Helvetica fntbn-0.26284 0.(, )ashowbu fc2 F /|______Symbol fntbn(b)show449 376 gmbu fc2 F /|______Helvetica fntbn-0.21281 0.(\) DO Stat END)ashow478 34 gm0.17623 0. 32 0.01762 0.(In this example, )awidthshowbu fc2 F /|______Symbol fntbn(a)show478 115 gmbu fc2 F /|______Helvetica fntbn0.62271 0. 32 0.06227 0.( is the set of start symbols of a statement \(ident, IF, WHILE, etc.\) and )awidthshowbu fc2 F /|______Symbol fntbn(b)show478 444 gmbu fc2 F /|______Helvetica fntbn1.33895 0. 32 0.13389 0.( is the set of)awidthshow492 34 gm0.30502 0. 32 0.03050 0.(successors of a statement sequence \(END, ELSE, UNTIL, etc.\). Both sets can be precomputed at parser)awidthshow506 34 gm-0.00468 0.(generation time. )ashow2 fsbu fc2 F /|______Helvetica-Oblique fntbn(WeakSep)show0 fsbu fc2 F /|______Helvetica fntbn-0.00491 0.( is implemented as follows:)ashow534 48 gm-0.00592 0.(PROCEDURE WeakSep\(s: INTEGER; sySucc, iterSucc: Set\): BOOLEAN;)ashow548 48 gm-0.27894 0.(BEGIN)ashow562 62 gm-0.24145 0.(IF sym = s THEN Get; RETURN TRUE)ashow577 62 gm-0.24598 0.(ELSIF sym )ashowbu fc2 F /|______Symbol fntbn(\316)show577 119 gmbu fc2 F /|______Helvetica fntbn-0.06834 0.( iterSucc THEN RETURN FALSE)ashow592 62 gm-0.16822 0.(ELSE Error\(s\); WHILE sym )ashowbu fc2 F /|______Symbol fntbn(\317)show592 189 gmbu fc2 F /|______Helvetica fntbn-0.15206 0.( sySucc )ashowbu fc2 F /|______Symbol fntbn(\310)show592 234 gmbu fc2 F /|______Helvetica fntbn-0.11381 0.( iterSucc )ashowbu fc2 F /|______Symbol fntbn(\310)show592 283 gmbu fc2 F /|______Helvetica fntbn-0.15223 0.( )ashowbu fc2 F /|______Symbol fntbn-0.22514 0.(g)ashowbu fc2 F /|______Helvetica fntbn-0.30187 0.(  DO Get END;)ashow607 76 gm-0.30075 0.(RETURN sym )ashowbu fc2 F /|______Symbol fntbn(\316)show607 146 gmbu fc2 F /|______Helvetica fntbn-0.06329 0.( sySucc  \(*TRUE means "s inserted"*\))ashow621 62 gm-0.05427 0.(END)ashow635 48 gm(END WeakSep;)show664 34 gm-0.04249 0.(The observant reader may have noticed that the set )ashowbu fc2 F /|______Symbol fntbn(b)show664 270 gmbu fc2 F /|______Helvetica fntbn0.20858 0. 32 0.02085 0.( contains the successors of a statement sequence in)awidthshow678 34 gm1.64077 0. 32 0.16407 0.(any possible context. This set may be too large. If the statement sequence occurs within a repeat)awidthshow692 34 gm-0.02770 0.(statement, only UNTIL is a legal successor, but not END or ELSE. We accept this fault, since it allows us to)ashow707 34 gm0.79818 0. 32 0.07981 0.(precompute the set )awidthshowbu fc2 F /|______Symbol fntbn(b)show707 133 gmbu fc2 F /|______Helvetica fntbn0.49346 0. 32 0.04934 0.( at parser generation time. The occurrence of END or ELSE is very unlikely in this)awidthshow721 34 gm-0.00930 0.(context and can only lead to incorrect synchronization, causing the parser to synchronize again.)ashowF T cp%%Page: ? 23op0 0 xl1 1 pen20 456 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(23)show69 34 gm(nc 45 0 706 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn1.56097 0. 32 0.15609 0.(The following example demonstrates that our method yields good error recovery. We generated an)awidthshow83 34 gm1.98425 0. 32 0.19842 0.(Oberon compiler and compiled the following erroneous program taken from [Wirth86]. The parser)awidthshow97 34 gm0.09552 0. 32 0.00955 0.(recovered surprisingly well.)awidthshow123 71 gmbu fc{}mark T /Courier /|______Courier 0 rfbn8.33332 fzbu fc2 F /|______Courier fntbn(MODULE Error;)show133 71 gm(CONST M := 10, N = 100  X = 10;)show143 48 gm(***)show143 71 gm(        ^ "=" expected)show153 48 gm(***)show153 71 gm(             ^ ";" expected)show163 48 gm(***)show163 71 gm(                        ^ ";" expected)show173 71 gm(VAR , a, b, c;)show183 48 gm(***)show183 71 gm(    ^ unexpected symbol in Block)show203 71 gm(PROCEDURE P;)show213 71 gm(BEGIN)show223 71 gm(  s := 0; a = 5 * \(b - 1 END;)show233 48 gm(***)show233 71 gm(            ^ error in Stat)show243 48 gm(***)show243 71 gm(                     ^ error in Stat)show253 48 gm(***)show253 71 gm0.00152 0. 32 0.00015 0.(                            ^ ident expected)awidthshow273 71 gm(BEGIN)show283 71 gm(  > a > b;)show293 48 gm(***)show293 71 gm(  ^ unexpected symbol in Stat)show303 48 gm(***)show303 71 gm(      ^ error in Stat)show313 71 gm(  WHILE a DO)show323 71 gm(    BEGIN > b; - c := 0;)show333 48 gm(***)show333 71 gm(    ^ unexpected symbol in Stat)show343 48 gm(***)show343 71 gm(          ^ unexpected symbol in Stat)show353 48 gm(***)show353 71 gm0.00228 0. 32 0.00022 0.(               ^ unexpected symbol in Stat)awidthshow363 71 gm(    WHILE a > 0 BEGIN)show373 48 gm(***)show373 71 gm(                ^ "DO" expected)show383 71 gm(      IF ODD a c := c * - b;)show393 48 gm(***)show393 71 gm(             ^ error in Factor)show403 48 gm(***)show403 71 gm(               ^ error in Stat)show413 48 gm(***)show413 71 gm0.00167 0. 32 0.00016 0.(                        ^ error in Factor)awidthshow423 71 gm(      b := 2 * b a := a / 2)show433 48 gm(***)show433 71 gm(                 ^ error in Factor)show443 71 gm(    END;)show453 71 gm(    P := 0; P; 666;)show463 48 gm(***)show463 71 gm0.00228 0. 32 0.00022 0.(               ^ unexpected symbol in Stat)awidthshow473 71 gm(  END .)show483 48 gm(***)show483 71 gm(      ^ ";" expected)show493 48 gm(***)show493 71 gm(       ^ "END" expected)show519 34 gm10 fzbu fc2 F /|______Helvetica fntbn-0.01786 0.(The error messages are kept short and simple. This is due to our conviction that experienced programmers)ashow533 34 gm0.09002 0. 32 0.00900 0.(do not need a detailed explanation of what actions the parser performed in order to recover from the error.)awidthshow547 34 gm-0.07328 0.(In almost all cases it is sufficient to point to the error location and to give a rough hint.)ashow575 34 gm0.30853 0. 32 0.03085 0.(The proposed error recovery technique is cheap. It costs only a check at every synchronization point and)awidthshow589 34 gm0.23818 0. 32 0.02381 0.(therefore does not slow down error-free parsing. The code for error handling makes up 10% of the parser)awidthshow603 34 gm0.03356 0. 32 0.00335 0.(code \(without semantic actions\).)awidthshow631 48 gm-0.02465 0.(Oberon parser without error handling  )ashow631 249 gm1.04125 0. 32 0.10412 0.(3019 Bytes)awidthshow631 306 gm0.55191 0. 32 0.05519 0.(\(object code\))awidthshow645 48 gm-0.01197 0.(Error handling procedures \(fixed size\) )ashow645 255 gm0.85403 0. 32 0.08540 0.(248 Bytes)awidthshow659 48 gm0.03997 0. 32 0.00399 0.(Synchronization points, weak symbols )awidthshow659 261 gm0.64498 0. 32 0.06449 0.(81 Bytes)awidthshowF T cp%%Page: ? 24op0 0 xl1 1 pen20 301 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(24)show64 34 gm(nc 54 0 727 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn4.94964 0. 32 0.49496 0.(6. Measurements)awidthshow92 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.43884 0. 32 0.04388 0.(We compared an Oberon compiler generated by Coco/R with a manually implemented Oberon compiler.)awidthshow106 34 gm0.15670 0. 32 0.01567 0.(The back-end modules of both compilers are the same. Only the scanner and the parser are different. We)awidthshow120 34 gm0.03555 0. 32 0.00355 0.(measured the time to compile a 867-line Oberon program \(7169 tokens or 24254 characters\) on a Ceres-2)awidthshow134 34 gm-0.01515 0.(workstation with a NS32532 processor running at 25 MHz.)ashow162 48 gm-0.06185 0.(Original compiler)ashow162 165 gm0.47897 0. 32 0.04789 0.(3.9 sec)awidthshow176 48 gm0.07843 0. 32 0.00784 0.(Generated compiler)awidthshow176 165 gm0.47897 0. 32 0.04789 0.(3.0 sec)awidthshow204 34 gm0.10498 0. 32 0.01049 0.(The generated compiler is 23 % faster than the original compiler. This is due to the fact that the generated)awidthshow218 34 gm0.19653 0. 32 0.01965 0.(compiler reads the source text into main memory at once, while the original compiler reads it character by)awidthshow232 34 gm0.73272 0. 32 0.07327 0.(character. Without this improvement the generated compiler is about 10% slower than the original one.)awidthshow246 34 gm-0.00640 0.(Scanning and parsing contribute to the overall run time of the generated compiler in the following way:)ashow274 48 gm0.18791 0.(Scanning)ashow274 188 gm0.70999 0. 32 0.07099 0.(0.61 sec)awidthshow274 261 gm0.16494 0. 32 0.01649 0.(20 %)awidthshow288 48 gm0.01766 0.(Parsing)ashow288 188 gm0.70999 0. 32 0.07099 0.(0.12 sec)awidthshow288 267 gm-0.11329 0.(4 %)ashow316 34 gm-0.02523 0.(This gives a compilation speed of)ashow344 48 gm0.18791 0.(Scanning)ashow344 169 gm0.44189 0. 32 0.04418 0.(11 625  tokens/sec)awidthshow358 48 gm0.01766 0.(Parsing)ashow358 169 gm0.44189 0. 32 0.04418 0.(51 127  tokens/sec)awidthshow372 48 gm0.10086 0. 32 0.01008 0.(Total compilation speed)awidthshow372 175 gm0.35552 0. 32 0.03555 0.(2 395  tokens/sec)awidthshow400 34 gm0.03906 0. 32 0.00390 0.(Comparing the object code of the two compilers yields the following measures:)awidthshow428 156 gm-0.06185 0.(Original compiler)ashow428 266 gm0.07843 0. 32 0.00784 0.(Generated compiler)awidthshow442 48 gm0.12763 0.(Scanner)ashow442 167 gm0.39993 0. 32 0.03999 0.(3 672 Bytes)awidthshow442 286 gm0.39993 0. 32 0.03999 0.(3 944 Bytes)awidthshow442 385 gm-0.02217 0.(+ 7%)ashow456 48 gm-0.08868 0.(Parser)ashow456 161 gm0.52917 0. 32 0.05291 0.(11 740 Bytes)awidthshow456 280 gm0.52917 0. 32 0.05291 0.(12 236 Bytes)awidthshow456 385 gm-0.02217 0.(+ 4%)ashow470 48 gm-0.07237 0.(\(incl. semantic actions\))ashow512 34 gm1 fsbu fc2 F /|______Helvetica-Bold fntbn3.32656 0. 32 0.33265 0.(7. Summary)awidthshow540 34 gm0 fsbu fc2 F /|______Helvetica fntbn1.57119 0. 32 0.15711 0.(Attributed grammars, when regarded as an algorithmic notation, are a special purpose language to)awidthshow554 34 gm0.23330 0. 32 0.02333 0.(describe translation processes. They serve three purposes:)awidthshow582 34 gm(\245)show582 45 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.43962 0.(Specification)ashow0 fsbu fc2 F /|______Helvetica fntbn1.56982 0. 32 0.15698 0.(. A translator can be specified and designed this way before it is implemented in a)awidthshow596 45 gm0.28656 0. 32 0.02865 0.(conventional programming language.)awidthshow610 34 gm(\245)show610 45 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn0.08145 0.(Documentation)ashow0 fsbu fc2 F /|______Helvetica fntbn0.27984 0. 32 0.02798 0.(. An attributed grammar is a concise documentation of a translation process. It contains)awidthshow624 45 gm-0.06274 0.(the same information as the program that implements the translator but in more compact form.)ashow638 34 gm(\245)show638 45 gm2 fsbu fc2 F /|______Helvetica-Oblique fntbn-0.00648 0.(Implementation)ashow0 fsbu fc2 F /|______Helvetica fntbn-0.00572 0.(. If a tool like Coco/R is available, an attributed grammar is already the implementation of)ashow652 45 gm-0.00859 0.(the translator.)ashow680 34 gm-0.02790 0.(Attributed grammars can be used to specify all kinds of programs that process a single stream of structured)ashow694 34 gm0.17501 0. 32 0.01750 0.(input data. They can be applied not only to proper compilers but also to compiler-like programs like cross-)awidthshow708 34 gm1.15875 0. 32 0.11587 0.(reference generators, pretty printers or complexity analyzers and even to tasks that do not fall in the)awidthshow722 34 gm0.08132 0. 32 0.00813 0.(traditional scope of compiler construction, like the processing of data files that describe pictures, formatted)awidthshowF T cp%%Page: ? 25op0 0 xl1 1 pen20 505 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(25)show56 34 gm(nc 46 0 159 538 6 rc)kp10 fzbu fc2 F /|______Helvetica fntbn-0.02478 0.(text or database information.)ashow84 34 gm0.29708 0. 32 0.02970 0.(Among the advantages of using a tool like Coco/R are a fast and safe implementation of translators, high)awidthshow98 34 gm0.58059 0. 32 0.05805 0.(flexibility in experimenting with a language design, and a translator description that is more concise and)awidthshow112 34 gm0.64208 0. 32 0.06420 0.(more readable than an implementation in a conventional programming language. The effort to learn the)awidthshow126 34 gm0.73089 0. 32 0.07308 0.(description language is small, since semantic parts are written in a familiar programming language and)awidthshow140 34 gm0.38848 0. 32 0.03884 0.(syntactic parts are based on the well-known formalism of EBNF grammars. The translators generated by)awidthshow154 34 gm0.10986 0. 32 0.01098 0.(Coco/R are fast enough to compete with production-quality compilers.)awidthshowF T cp%%Page: ? 26op0 0 xl1 1 pen20 344 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(26)show60 34 gm(nc 50 0 583 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn1.96319 0. 32 0.19631 0.(Appendix A   Cocol/R Grammar)awidthshow102 34 gm0 fsbu fc2 F /|______Helvetica fntbn-0.06701 0.(Cocol )ashow102 113 gm-0.61819 0.(= )ashow102 125 gm0.49041 0. 32 0.04904 0.("COMPILER" ident)awidthshow116 34 gm-0.93397 0.(      )ashow116 125 gm-0.46589 0.({ ANY })ashow130 34 gm-0.93397 0.(      )ashow130 125 gm-0.19964 0.({ Declaration })ashow144 34 gm-0.93397 0.(      )ashow144 125 gm("PRODUCTIONS")show158 34 gm-0.93397 0.(      )ashow158 125 gm0.21514 0. 32 0.02151 0.({ ident [Attributes] [SemText] "=" Expression "."} )awidthshow172 34 gm-0.93397 0.(      )ashow172 125 gm0.54412 0. 32 0.05441 0.("END" ident ".".)awidthshow186 34 gm-0.12156 0.(Declaration )ashow186 113 gm-0.61819 0.(= )ashow186 125 gm-0.07426 0.( "CHARACTERS" { SetDecl })ashow200 34 gm-1.03775 0.(    )ashow200 113 gm(|)show200 125 gm-0.12507 0.("TOKENS"     { TokenDecl })ashow214 34 gm-1.03775 0.(    )ashow214 113 gm-1.37599 0.(| )ashow214 125 gm-0.20979 0.("PRAGMAS"    { PragmaDecl })ashow228 34 gm-1.03775 0.(    )ashow228 113 gm-1.37599 0.(| )ashow228 125 gm0.32089 0. 32 0.03208 0.("COMMENTS" "FROM" TokenExpr "TO" TokenExpr ["NESTED"])awidthshow242 34 gm-1.03775 0.(    )ashow242 113 gm-1.37599 0.(| )ashow242 125 gm-0.11203 0.("IGNORE" \( "CASE" | Set \).)ashow270 34 gm0.12756 0. 32 0.01275 0.(SetDecl )awidthshow270 113 gm(=)show270 125 gm0.50796 0. 32 0.05079 0.(ident "=" Set ".".)awidthshow284 34 gm0.16494 0. 32 0.01649 0.(Set )awidthshow284 113 gm-0.61819 0.(= )ashow284 125 gm-0.07481 0.(SimSet { "+" SimSet | "-" SimSet }.)ashow298 34 gm(SimSet )show298 113 gm(=)show298 125 gm-0.08566 0.(ident | string | "CHR" "\(" number "\)" | "ANY".)ashow326 34 gm0.23071 0. 32 0.02307 0.(TokenDecl )awidthshow326 113 gm(=)show326 125 gm0.50643 0. 32 0.05064 0.(Symbol ["=" TokenExpr "."].)awidthshow340 34 gm0.46264 0. 32 0.04626 0.(TokenExpr )awidthshow340 113 gm(=)show340 125 gm-0.05503 0.(TokenTerm { "|" TokenTerm }.)ashow354 34 gm0.05966 0. 32 0.00596 0.(TokenTerm )awidthshow354 113 gm-0.61819 0.(= )ashow354 125 gm-0.02670 0.(TokenFactor { TokenFactor} [ "CONTEXT" "\(" TokenExpr "\)" ].)ashow368 34 gm0.08819 0.(TokenFactor)ashow368 113 gm(=)show368 125 gm-0.07270 0.(\( Symbol |  "\(" TokenExpr "\)" |  "[" TokenExpr "]" |  "{" TokenExpr "}" \).)ashow396 34 gm-0.11114 0.(PragmaDecl)ashow396 113 gm(=)show396 125 gm0.72433 0. 32 0.07243 0.(TokenDecl [SemText].)awidthshow424 34 gm0.38421 0. 32 0.03842 0.(Expression )awidthshow424 113 gm-0.61819 0.(= )ashow424 125 gm-0.23023 0.(Term { "|" Term }.)ashow438 34 gm-0.27529 0.(Term )ashow438 113 gm-0.61819 0.(= )ashow438 125 gm-0.16748 0.(Factor { Factor}.)ashow452 34 gm-0.18513 0.(Factor )ashow452 113 gm-0.69828 0.(=  )ashow452 125 gm-0.94216 0.( \( )ashow452 136 gm0.68481 0. 32 0.06848 0.(["WEAK"] Symbol [Attributes])awidthshow466 34 gm-1.16746 0.(   )ashow466 113 gm-1.37599 0.(| )ashow466 125 gm0.16622 0.(SemText)ashow480 34 gm-1.16746 0.(   )ashow480 113 gm-1.37599 0.(| )ashow480 125 gm0.08535 0.("ANY")ashow494 34 gm-1.16746 0.(   )ashow494 113 gm-1.37599 0.(| )ashow494 125 gm0.02436 0.("SYNC")ashow508 34 gm-1.16746 0.(   )ashow508 113 gm-1.37599 0.(| )ashow508 125 gm-0.05809 0.("\(" Expression "\)"  |  "[" Expression "]"  |  "{" Expression "}" )ashow522 34 gm-1.16746 0.(   )ashow522 113 gm-0.10592 0.(\).)ashow536 34 gm-0.01892 0.(Symbol )ashow536 113 gm-0.61819 0.(= )ashow536 125 gm-0.05526 0.( ident | string.)ashow550 34 gm0.49621 0. 32 0.04962 0.(Attributes )awidthshow550 113 gm-0.61819 0.(= )ashow550 125 gm-0.13394 0.("<" { ANY } ">".)ashow564 34 gm0.12908 0. 32 0.01290 0.(SemText )awidthshow564 113 gm-0.61819 0.(= )ashow564 125 gm-0.14949 0.("\(." { ANY } ".\)".)ashowF T cp%%Page: ? 27op0 0 xl1 1 pen20 190 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(27)show60 34 gm(nc 50 0 647 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn2.23236 0. 32 0.22323 0.(Appendix B   Sample Attributed Grammar in Cocol/R)awidthshow88 34 gm0 fsbu fc2 F /|______Helvetica fntbn-0.07089 0.(The following attributed grammar describes a compiler for a simple programming language. It uses a symbol)ashow102 34 gm-0.01292 0.(table handler \(TL\) and a code generator \(TC\) that generates code for a stack machine. These two modules)ashow116 34 gm0.95993 0. 32 0.09599 0.(are not described further. The purpose of this grammar is to give a coherent example of an attributed)awidthshow130 34 gm-0.00700 0.(grammar. It is not necessary for the reader to understand the translation process in all details, although the)ashow144 34 gm-0.11770 0.(semantic actions in this grammar are rather similar to actions contained in any compiler.)ashow181 34 gm9 fzbu fc2 F /|______Helvetica fntbn-0.07723 0.(COMPILER Taste)ashow203 34 gm0.05401 0. 32 0.00540 0.(\(*-------------------------------------- imports and global declarations -----------------------------------------*\))awidthshow214 34 gm-0.02015 0.(IMPORT TL \(*table handler*\), TC \(*code generator*\);)ashow236 34 gm-0.37390 0.(CONST)ashow247 34 gm-1.00094 0.(  )ashow247 45 gm-0.04061 0.(plus = 0; minus = 1; times = 2; slash = 3; equ = 4; lss = 5; gtr = 6; \(*operators*\))ashow258 34 gm-1.00094 0.(  )ashow258 45 gm-0.02056 0.(undef = 0; int = 1; bool = 2;  \(*types*\))ashow269 34 gm-1.00094 0.(  )ashow269 45 gm0.12619 0. 32 0.01261 0.(vars = 0; procs = 1;  \(*object kinds*\))awidthshow280 34 gm-1.00094 0.(  )ashow280 45 gm-0.10723 0.(ADD = 0; SUB = 1; MUL = 2; DIVI = 3; EQU = 4; LSS = 5; GTR = 6; \(*machine instructions*\))ashow291 34 gm-1.00094 0.(  )ashow291 45 gm-0.17697 0.(LOAD = 7; LIT = 8; STO = 9; CALL = 10; RET = 11; RES = 12;)ashow302 34 gm-1.00094 0.(  )ashow302 45 gm-0.16517 0.(JMP = 13; FJMP = 14; HALTc = 15; NEG = 16; READ = 17; WRITE = 18;)ashow324 34 gm-0.16882 0.(TYPE)ashow335 45 gm-0.27214 0.(Name = ARRAY 32 OF CHAR;)ashow357 34 gm-0.13371 0.(PROCEDURE Err\(nr: INTEGER\);)ashow368 34 gm-0.01593 0.(BEGIN TasteS.Error\(100 + nr, TasteS.pos\) END Err;)ashow390 34 gm-0.13150 0.(PROCEDURE StringToVal\(s: ARRAY OF CHAR; VAR val: INTEGER\);)ashow401 45 gm-0.10726 0.(VAR i: INTEGER;)ashow412 34 gm(BEGIN)show423 34 gm-1.00094 0.(  )ashow423 45 gm0.10910 0. 32 0.01091 0.(val:=0; i := 0;)awidthshow434 34 gm-1.00094 0.(  )ashow434 45 gm-0.10832 0.(WHILE s[i] # 0X DO val := 10 * val + ORD\(s[i]\) - ORD\("0"\); INC\(i\) END)ashow445 34 gm-0.06695 0.(END StringToVal;)ashow456 34 gm-1.00094 0.(  )ashow478 34 gm0.23269 0. 32 0.02326 0.(\(*------------------------------------------ scanner specification ---------------------------------------------------*\))awidthshow489 34 gm-0.33288 0.(CHARACTERS)ashow500 34 gm-1.00094 0.(  )ashow500 45 gm-0.01837 0.(letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".)ashow511 34 gm-1.00094 0.(  )ashow511 45 gm-0.03399 0.(digit = "0123456789".)ashow522 34 gm-1.00094 0.(  )ashow522 45 gm-0.17297 0.(eol = CHR\(13\).)ashow533 34 gm( )show533 45 gm-0.17304 0.( tab = CHR\(9\).)ashow555 34 gm-0.20079 0.(TOKENS)ashow566 34 gm-1.00094 0.(  )ashow566 45 gm0.04730 0. 32 0.00473 0.(ident = letter {letter | digit}.)awidthshow577 34 gm-1.00094 0.(  )ashow577 45 gm-0.05546 0.(number  = digit {digit}.)ashow599 34 gm-0.11776 0.(IGNORE eol + tab)ashow621 34 gm-0.25779 0.(COMMENTS FROM "\(*" TO "*\)" NESTED)ashowF T cp%%Page: ? 28op0 0 xl1 1 pen20 192 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(28)show58 34 gm(nc 50 0 700 538 6 rc)kp0.18325 0. 32 0.01832 0.(\(*------------------------------------------------------- parser specification ----------------------------------------------------------*\))awidthshow69 34 gm-0.24917 0.(PRODUCTIONS)ashow91 34 gm-0.43476 0.(Taste                                  )ashow91 181 gm(\(. )show91 193 gm-0.04698 0.(VAR name, progName: Name; obj: TL.Object; .\))ashow102 34 gm-0.75639 0.(= )ashow102 45 gm-0.26518 0.("PROGRAM" )ashow113 45 gm-0.18923 0.(Ident<progName> ";"        )ashow113 181 gm(\(. )show113 193 gm-0.01104 0.(TC.progStart := TC.pc .\))ashow124 34 gm-1.00094 0.(  )ashow124 45 gm0.16357 0.(Body)ashow135 34 gm-1.00094 0.(  )ashow135 45 gm-0.31744 0.(Ident<name> "."                      )ashow135 181 gm(\(. )show135 193 gm-0.14088 0.(IF name # progName THEN Err\(0\) END; TC.Emit\(HALTc\) .\).)ashow146 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow157 34 gm-0.44804 0.(Body                                   )ashow157 181 gm-0.00836 0.(\(. VAR name, name1; Name; fix, type: INTEGER; obj: TL.Object; .\))ashow168 34 gm-0.50721 0.(=                                      )ashow168 181 gm-0.01840 0.(\(. TL.EnterScope;   fix := TC.pc + 1; TC.Emit2\(JMP,0\) .\))ashow179 34 gm-1.00094 0.(  )ashow179 45 gm-0.50630 0.({ )ashow179 57 gm-0.27862 0.("VAR" )ashow190 34 gm-0.66729 0.(    )ashow190 57 gm-0.29806 0.({  Ident<name> ":"                  )ashow190 181 gm-0.03773 0.(\(. obj := TL.NewObj\(name, vars\) .\))ashow201 34 gm-0.60057 0.(      )ashow201 57 gm-0.19860 0.(   TypeId<obj^.type> ";"             )ashow212 34 gm-0.66729 0.(    )ashow212 57 gm(})show234 45 gm-0.83839 0.(| )ashow234 57 gm-0.30784 0.("PROCEDURE" )ashow245 57 gm-0.20095 0.(Ident<name> ";"        )ashow245 181 gm-0.04136 0.(\(. obj := TL.NewObj\(name, procs\);  obj^.adr := TC.pc .\))ashow256 57 gm(Body )show267 57 gm-0.29203 0.(Ident<name1> ";"                   )ashow267 181 gm-0.16601 0.(\(. TC.Emit\(RET\);  IF name # name1 THEN Err\(0\) END .\))ashow278 45 gm(})show289 34 gm-1.00094 0.(  )ashow289 45 gm-0.42802 0.("BEGIN"                              )ashow289 181 gm(\(. TC.Fixup\(fix\); TC.Emit2\(RES, TL.DataSpace\(\)\) .\))show300 34 gm-1.00094 0.(  )ashow300 45 gm0.28411 0. 32 0.02841 0.(StatSeq )awidthshow311 34 gm-1.00094 0.(  )ashow311 45 gm-0.48342 0.("END"                                )ashow311 181 gm0.37979 0. 32 0.03797 0.(\(. TL.LeaveScope .\).)awidthshow322 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow333 34 gm-0.04293 0.(TypeId<VAR type: INTEGER>)ashow344 34 gm-0.62846 0.(=  )ashow344 45 gm-0.42356 0.("INTEGER"                          )ashow344 181 gm(\(. )show344 193 gm0.17196 0. 32 0.01719 0.(type := int .\))awidthshow355 34 gm-0.83839 0.(| )ashow355 45 gm-0.40922 0.("BOOLEAN"                          )ashow355 181 gm(\(. )show355 193 gm0.16265 0. 32 0.01626 0.(type := bool .\).)awidthshow366 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow377 34 gm0.20126 0. 32 0.02012 0.(StatSeq = Stat {";" Stat}.)awidthshow388 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow399 34 gm-0.43486 0.(Stat                                   )ashow399 181 gm(\(. )show399 193 gm0.08178 0. 32 0.00817 0.(VAR name: Name; type, fix, fix2, loopstart: INTEGER; obj: TL.Object;  )awidthshow410 34 gm-0.75639 0.(= )ashow410 45 gm([)show410 57 gm-0.35823 0.( Ident<name>                        )ashow410 181 gm0.50462 0.(\(.)ashow410 193 gm-0.05970 0.(obj := TL.Obj\(name\) .\))ashow421 34 gm-0.66729 0.(    )ashow421 57 gm-0.49540 0.(\( )ashow421 68 gm-0.43904 0.(":" "="                          )ashow421 181 gm(\(. )show421 193 gm-0.10017 0.(IF obj^.kind # vars THEN Err\(4\) END .\))ashow432 34 gm-0.60057 0.(      )ashow432 68 gm0.56640 0. 32 0.05664 0.(Expression<type> )awidthshow432 181 gm(\(. )show432 193 gm-0.07774 0.(IF type # obj^.type THEN Err\(2\) END;)ashow443 34 gm-0.51268 0.(                                          )ashow443 193 gm0.00610 0. 32 0.00061 0.(TC.Emit3\(STO, TL.curLevel - obj^.level, obj^.adr\) .\))awidthshow454 34 gm-0.66729 0.(    )ashow454 57 gm-0.51043 0.(|                                  )ashow454 181 gm(\(. )show454 193 gm-0.08921 0.(IF obj^.kind # procs THEN Err\(5\) END;)ashow465 34 gm-0.51268 0.(                                          )ashow465 193 gm0.00564 0. 32 0.00056 0.(TC.Emit3\(CALL, TL.curLevel - obj^.level, obj^.adr\) .\))awidthshow476 34 gm-0.66729 0.(    )ashow476 57 gm(\))show487 45 gm-0.83839 0.(| )ashow487 57 gm0.14251 0. 32 0.01425 0.("IF" Expression<type> )awidthshow487 181 gm(\(. )show487 193 gm-0.09405 0.(IF type # bool THEN Err\(3\) END; fix := TC.pc + 1; TC.Emit2\(FJMP, 0\) .\))ashow498 34 gm-1.00094 0.(  )ashow498 45 gm-1.00094 0.(  )ashow498 57 gm-0.10777 0.("THEN" StatSeq)ashow509 34 gm-1.00094 0.(  )ashow509 45 gm-1.00094 0.(  )ashow509 57 gm([ )show509 68 gm-0.43486 0.("ELSE"                           )ashow509 181 gm(\(. )show509 193 gm0.01464 0. 32 0.00146 0.(fix2 := TC.pc + 1; TC.Emit2\(JMP, 0\); TC.Fixup\(fix\); fix := fix2 .\))awidthshow520 34 gm-0.75071 0.(   )ashow520 45 gm-0.75071 0.(   )ashow520 57 gm-1.00094 0.(  )ashow520 68 gm0.28411 0. 32 0.02841 0.(StatSeq )awidthshow531 34 gm-0.75071 0.(   )ashow531 45 gm( )show531 57 gm(])show542 34 gm-0.75071 0.(   )ashow542 45 gm( )show542 57 gm-0.48240 0.("END"                              )ashow542 181 gm(\(. )show542 193 gm0.20797 0. 32 0.02079 0.(TC.Fixup\(fix\) .\))awidthshow553 45 gm-0.83839 0.(| )ashow553 57 gm-0.43830 0.("WHILE"                            )ashow553 181 gm(\(. )show553 193 gm0.14846 0. 32 0.01484 0.(loopstart := TC.pc .\))awidthshow564 34 gm-0.75071 0.(   )ashow564 45 gm( )show564 57 gm-0.22161 0.(Expression<type>                   )ashow564 181 gm(\(. )show564 193 gm-0.09991 0.(IF type # bool THEN Err\(3\) END;  fix := TC.pc + 1; TC.Emit2\(FJMP, 0\) .\))ashow575 34 gm-0.66729 0.(    )ashow575 57 gm-0.13479 0.("DO" StatSeq "END")ashow575 181 gm(\(. )show575 193 gm0.21545 0. 32 0.02154 0.(TC.Emit2\(JMP, loopstart\); TC.Fixup\(fix\) .\))awidthshow586 45 gm-0.83839 0.(| )ashow586 57 gm-0.11280 0.("READ" Ident<name>)ashow586 181 gm(\(. )show586 193 gm-0.08134 0.(obj := TL.Obj\(name\); IF obj^.type # int THEN Err\(1\) END;)ashow597 34 gm-0.51268 0.(                                          )ashow597 193 gm-0.00839 0.(TC.Emit3\(READ, TL.curLevel - obj^.level, obj^.adr\) .\))ashow608 45 gm-0.83839 0.(| )ashow608 57 gm-0.03640 0.("WRITE" Expression<type>  )ashow608 181 gm-0.11680 0.(\(.  IF type # int THEN Err\(1\) END; TC.Emit\(WRITE\) .\))ashow619 45 gm0.99903 0.(].)ashow630 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow641 34 gm(Expression<VAR type: INTEGER>)show641 181 gm-0.01834 0.(\(. VAR type1, op: INTEGER; .\))ashow652 34 gm-0.75639 0.(= )ashow652 45 gm0.04043 0.(SimExpr<type>)ashow663 34 gm-1.00094 0.(  )ashow663 45 gm-0.04153 0.([ RelOp<op> SimExpr<type1>)ashow663 181 gm-0.05953 0.(\(. IF type # type1 THEN Err\(2\) END; TC.Emit\(op\); type := bool .\))ashow674 34 gm-0.66729 0.(    )ashow674 45 gm0.99903 0.(].)ashow685 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashowF T cp%%Page: ? 29op0 0 xl1 1 pen20 477 gm(nc 746 0 781 538 6 rc)kp29 495 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(29)show58 34 gm(nc 50 0 505 538 6 rc)kp-0.14399 0.(RelOp<VAR op: INTEGER>)ashow69 34 gm(=)show69 45 gm-0.49002 0.("="                                )ashow69 181 gm(\(. )show69 193 gm-0.06990 0.(op := equ .\))ashow80 34 gm-0.83839 0.(| )ashow80 45 gm-0.49002 0.("<"                                )ashow80 181 gm(\(. )show80 193 gm0.05935 0. 32 0.00593 0.(op := lss .\))awidthshow91 34 gm-0.83839 0.(| )ashow91 45 gm-0.49002 0.(">"                                )ashow91 181 gm(\(. )show91 193 gm0.05752 0. 32 0.00575 0.(op := gtr .\).)awidthshow102 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow113 34 gm-0.06071 0.(SimExpr<VAR type: INTEGER>)ashow113 181 gm-0.01834 0.(\(. VAR type1, op: INTEGER; .\))ashow124 34 gm-0.75639 0.(= )ashow124 45 gm-0.05657 0.(Term<type>)ashow135 34 gm-1.00094 0.(  )ashow135 45 gm-0.09320 0.({ AddOp<op> Term<type1>)ashow135 181 gm-0.08276 0.(\(. IF \(type # int\) OR \(type1 # int\) THEN Err\(1\) END; TC.Emit\(op\) .\))ashow146 34 gm-0.66729 0.(    )ashow146 45 gm0.49362 0.(}.)ashow157 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow168 34 gm-0.12066 0.(AddOp<VAR op: INTEGER>)ashow179 34 gm-0.75639 0.(= )ashow179 45 gm-0.49002 0.("+"                                )ashow179 181 gm0.22476 0. 32 0.02247 0.(\(. op:=plus .\))awidthshow190 34 gm-0.61311 0.(  | )ashow190 45 gm-0.48234 0.("-"                                )ashow190 181 gm0.21331 0. 32 0.02133 0.(\(. op:=minus .\).)awidthshow201 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow212 34 gm-0.11421 0.(Term<VAR type: INTEGER>)ashow212 181 gm(\(. )show212 193 gm-0.02072 0.(VAR type1, op: INTEGER; .\))ashow223 34 gm-0.75639 0.(= )ashow223 45 gm0.08927 0.(Factor<type>)ashow234 34 gm-1.00094 0.(  )ashow234 45 gm-0.50630 0.({ )ashow234 57 gm-0.08158 0.(MulOp<op> Factor<type1>   )ashow234 181 gm-0.08276 0.(\(. IF \(type # int\) OR \(type1 # int\) THEN Err\(1\) END; TC.Emit\(op\) .\))ashow245 34 gm-1.00094 0.(  )ashow245 45 gm0.49362 0.(}.)ashow256 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow267 34 gm-0.14387 0.(MulOp<VAR op: INTEGER>)ashow278 34 gm-0.75639 0.(= )ashow278 45 gm-0.46780 0.("*"                                )ashow278 181 gm-0.01568 0.(\(. op := times .\))ashow289 34 gm-0.83839 0.(| )ashow289 45 gm-0.46781 0.("/"                                )ashow289 181 gm0.12985 0. 32 0.01298 0.(\(. op := slash .\).)awidthshow300 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow311 34 gm-0.04252 0.(Factor<VAR type: INTEGER>)ashow311 181 gm-0.16545 0.( \(. )ashow311 193 gm-0.03045 0.(VAR name: Name; val, n: INTEGER; obj: TL.Object; .\))ashow322 34 gm-0.75639 0.(= )ashow322 45 gm(\()show322 57 gm-0.04791 0.( Ident<name>)ashow322 181 gm-0.16545 0.( \(. )ashow322 193 gm0.08483 0. 32 0.00848 0.(obj := TL.Obj\(name\); type := obj^.type;)awidthshow333 34 gm-0.51268 0.(                                          )ashow333 193 gm-0.11917 0.(IF obj^.kind = vars THEN  )ashow344 204 gm0.00625 0. 32 0.00062 0.(TC.Emit3\(LOAD, TL.curLevel - obj^.level, obj^.adr\))awidthshow355 34 gm-0.51268 0.(                                          )ashow355 193 gm-0.04980 0.(ELSE Err\(4\))ashow366 34 gm-0.51268 0.(                                          )ashow366 193 gm-0.19869 0.(END .\))ashow377 34 gm-1.00094 0.(  )ashow377 45 gm-0.83839 0.(| )ashow377 57 gm-0.48233 0.("TRUE"                             )ashow377 181 gm(\(. )show377 193 gm-0.00801 0.(TC.Emit2\(LIT, 1\); type := bool .\))ashow388 34 gm-1.00094 0.(  )ashow388 45 gm-0.83839 0.(| )ashow388 57 gm-0.43862 0.("FALSE"                            )ashow388 181 gm(\(. )show388 193 gm-0.00801 0.(TC.Emit2\(LIT, 0\); type := bool .\))ashow399 34 gm-1.00094 0.(  )ashow399 45 gm-0.83839 0.(| )ashow399 57 gm-0.43153 0.(number                        )ashow399 181 gm0.50462 0.(\(.)ashow399 193 gm0.32882 0. 32 0.03288 0.(TasteS.GetName\(TasteS.pos, TasteS.len, name\); )awidthshow410 193 gm0.02166 0. 32 0.00216 0.(StringToVal\(name, n\);  TC.Emit2\(LIT, n\); type:=int .\))awidthshow421 34 gm-1.00094 0.(  )ashow421 45 gm-0.83839 0.(| )ashow421 57 gm-0.27680 0.("-" Factor<type>                   )ashow421 181 gm0.50462 0.(\(.)ashow421 193 gm-0.07302 0.(IF type # int THEN Err\(1\); type := int END; TC.Emit\(NEG\) .\))ashow432 34 gm-1.00094 0.(  )ashow432 45 gm0.50462 0.(\).)ashow443 34 gm0.01194 0.(\(*-----------------------------------------------------------------------------------------------------------------------------------------------*\))ashow454 34 gm-0.14286 0.(Ident <VAR name: Name> =)ashow465 45 gm0.12315 0.(ident)ashow465 181 gm0.50462 0.(\(.)ashow465 193 gm0.38604 0. 32 0.03860 0.(TasteS.GetName\(TasteS.pos, TasteS.len, name\) .\).)awidthshow487 34 gm-0.05589 0.(END Taste.)ashowF T cp%%Page: ? 30op0 0 xl1 1 pen20 80 gm(nc 746 0 781 538 6 rc)kp29 34 gm(nc 0 0 35 538 6 rc)kpF 1 setTxMode0 fs9 fzbu fc2 F /|______Helvetica fntbn(30)show60 34 gm(nc 50 0 611 538 6 rc)kp1 fs10 fzbu fc2 F /|______Helvetica-Bold fntbn1.01123 0.(References)ashow88 34 gm0 fsbu fc2 F /|______Helvetica fntbn0.42288 0.([Ben88])ashow88 85 gm0.17883 0. 32 0.01788 0.(J.Bentley: More Programming Pearls. Addison-Wesley 1988)awidthshow116 34 gm0.23678 0.([DoPi90])ashow116 85 gm0.08255 0. 32 0.00825 0.(H.Dobler, K.Pirklbauer: Coco-2 \320 A New Compiler-Compiler. Technical Report TR 90/1, Institut)awidthshow130 85 gm-0.07165 0.(f\237r Informatik, Universit\212t Linz)ashow158 34 gm-0.22354 0.([GaGi84] )ashow158 85 gm0.29418 0. 32 0.02941 0.(H.Ganzinger, R.Giegerich: Attribute Coupled Grammars. SIGPLAN Notices 19 \(1984\), 6, 157-)awidthshow172 85 gm0.66137 0.(170)ashow200 34 gm-0.01684 0.([Gro88] )ashow200 85 gm0.89736 0. 32 0.08973 0.(J.Grosch: Generators for High-Speed Front-Ends. Lecture Notes in Computer Science 371,)awidthshow214 85 gm0.43853 0. 32 0.04385 0.(Springer Verlag, 1988)awidthshow242 34 gm0.32333 0. 32 0.03233 0.([KHZ82] )awidthshow242 85 gm0.89889 0. 32 0.08988 0.(U.Kastens, B.Hutt, E.Zimmermann: GAG: A Practical Compiler Generator. Lecture Notes in)awidthshow256 85 gm0.38116 0. 32 0.03811 0.(Computer Science 141, Springer Verlag, 1982)awidthshow284 34 gm1.03866 0. 32 0.10386 0.([John75] )awidthshow284 85 gm0.38330 0. 32 0.03833 0.(S.C.Johnson: YACC \320 Yet another Compiler-Compiler. Tech.Report No 32, Bell Laboratories,)awidthshow298 85 gm0.67077 0. 32 0.06707 0.(July 1975)awidthshow326 34 gm0.35018 0. 32 0.03501 0.([Knu68]  )awidthshow326 85 gm0.85784 0. 32 0.08578 0.(D.E.Knuth: Semantics of Context-Free Languages. Mathematical Systems Theory 2 \(1968\),)awidthshow340 85 gm0.38630 0.(127-145)ashow368 34 gm0.20547 0.([M\232ss86])ashow368 85 gm1.18850 0. 32 0.11885 0.(H.M\232ssenb\232ck: Compilererzeugende Systeme f\237r Mikrocomputer. Ph.D. thesis, Universit\212t)awidthshow382 85 gm0.98403 0. 32 0.09840 0.(Linz, 1986)awidthshow410 34 gm-0.15359 0.([R\212i83]  )ashow410 85 gm0.45455 0. 32 0.04545 0.(K.-J. R\212ih\212, et al.: Revised Report on the Compiler Writing System HLP78. Report A-1983-1,)awidthshow424 85 gm0.02792 0. 32 0.00279 0.(Department of Computer Science, University of Helsinki)awidthshow452 34 gm0.23712 0.([ReM\23289])ashow452 85 gm0.11764 0. 32 0.01176 0.(P.Rechenberg, H.M\232ssenb\232ck: A Compiler Generator for Microcomputers. Prentice Hall 1989)awidthshow480 34 gm0.42547 0.([Senn89])ashow480 85 gm(R.Sennhauser: \206bersetzung attributierter Grammatiken. Diploma thesis, ETH Zurich, 1989)show508 34 gm0.09642 0.([Waite86])ashow508 85 gm-0.04191 0.(W.M.Waite: The Cost of Lexical Analysis. Software \320 Practice and Experience 16 \(1986\), 5, )ashow522 85 gm0.38630 0.(473-488)ashow550 34 gm0.12535 0.([Wirth76])ashow550 85 gm-0.04763 0.(N.Wirth: Algorithms + Data Structures = Programs. Prentice-Hall, 1976)ashow578 34 gm0.12535 0.([Wirth86])ashow578 85 gm0.49133 0. 32 0.04913 0.(N.Wirth: Compilerbau. 4th edition. Teubner Studienb\237cher, 1986)awidthshow606 34 gm0.12535 0.([Wirth89])ashow606 85 gm0.17654 0. 32 0.01765 0.(N.Wirth: The Programming Language Oberon. Report 111, ETH Zurich, September 1989)awidthshowF T cp%%Trailercdend%%Pages: 30 0%%EOF