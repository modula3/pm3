# Top level makefile fragment for the SRC Modula 3 Code Generator.
#   Copyright (C) 1999 Free Software Foundation, Inc.

#This file is part of GNU CC.

#GNU CC is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2, or (at your option)
#any later version.

#GNU CC is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with GNU CC; see the file COPYING.  If not, write to
#the Free Software Foundation, 59 Temple Place - Suite 330,
#Boston, MA 02111-1307, USA.

# This file provides the language dependent support in the main Makefile.
# Each language makefile fragment must provide the following targets:
#
# foo.all.build, foo.all.cross, foo.start.encap, foo.rest.encap,
# foo.info, foo.dvi,
# foo.install-normal, foo.install-common, foo.install-info, foo.install-man,
# foo.uninstall, foo.distdir,
# foo.mostlyclean, foo.clean, foo.distclean, foo.extraclean,
# foo.maintainer-clean, foo.stage1, foo.stage2, foo.stage3, foo.stage4
#
# where `foo' is the name of the language.
#
# It should also provide rules for:
#
# - making any compiler driver (eg: g++)
# - the compiler proper (eg: cc1plus)
# - define the names for selecting the language in LANGUAGES.
#
# Extra flags to pass to recursive makes.
M3CG_FLAGS_TO_PASS = \
	"M3CG_FOR_BUILD=$(M3CG_FOR_BUILD)" \
	"M3CGFLAGS=$(M3CGFLAGS)" \
	"M3CG_FOR_TARGET=$(M3CG_FOR_TARGET)" \

# Actual names to use when installing a native compiler.
#M3CG_INSTALL_NAME = `t='$(program_transform_name)'; echo c++ | sed $$t`

# Actual names to use when installing a cross-compiler.
#M3CG_CROSS_NAME = `t='$(program_transform_cross_name)'; echo c++ | sed $$t`

#
# Define the names for selecting M3CG in LANGUAGES.
M3CG m3cg: m3cgc1$(exeext)

# Tell GNU make to ignore these if they exist.
.PHONY: M3CG m3cg

# Language-specific object files for m3cg.
M3CG_OBJS = m3cg/decl.o m3cg/lang.o m3cg/parse.o m3cg/tree.o main.o

m3cgc1$(exeext): $(P) $(OBJS) $(M3CG_OBJS) $(LIBDEPS)
	$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(OBJS) $(M3CG_OBJS) $(LIBS)

# M3 language specific files.

m3.o : $(srcdir)/m3cg/m3.def $(srcdir)/m3cg/m3.c \
   $(CONFIG_H) $(TREE_H) $(RTL_H) $(srcdir)/input.h $(srcdir)/flags.h \
   $(srcdir)/expr.h
	$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/m3cg \
	-c $(srcdir)/m3cg/m3.c

#
# Build hooks:

m3cg.all.build:
m3cg.all.cross:
m3cg.start.encap:
m3cg.rest.encap:

m3cg.info:
m3cg.dvi:

#
# Install hooks:
# m3cgc1 is installed elsewhere as part of $(COMPILERS).

m3cg.install-normal:

m3cg.install-common:

m3cg.install-info:

m3cg.install-man:

m3cg.uninstall:
#
# Clean hooks:
# A lot of the ancillary files are deleted by the main makefile.
# We just have to delete files specific to us.
m3cg.mostlyclean:
	-rm -f m3cg/*$(objext)
m3cg.clean: m3cg.mostlyclean
m3cg.distclean:
	-rm -f m3cg/Makefile m3cg/Make-host m3cg/Make-target
	-rm -f m3cg/config.status m3cg/config.cache
m3cg.extraclean:
m3cg.maintainer-clean:
	-rm -f m3cg/TAGS

#
# Stage hooks:

m3cg.stage1: stage1-start
	-mv m3cg/*$(objext) stage1/m3cg
	-mv m3cgc1$(exeext) stage1
m3cg.stage2: stage2-start
	-mv m3cg/*$(objext) stage2/m3cg
	-mv m3cgc1$(exeext) stage2
m3cg.stage3: stage3-start
	-mv m3cg/*$(objext) stage3/m3cg
	-mv m3cgc1$(exeext) stage3
m3cg.stage4: stage4-start
	-mv m3cg/*$(objext) stage4/m3cg
	-mv m3cgc1$(exeext) stage4

#
# Maintenance hooks:

# This target creates the files that can be rebuilt, but go in the
# distribution anyway.  It then copies the files to the distdir directory.
m3cg.distdir: # $(srcdir)/objc/objc-parse.c
	mkdir tmp/m3cg
#	cd objc ; $(MAKE) $(FLAGS_TO_PASS) objc-parse.c
	cd m3cg; \
	for file in *[0-9a-zA-Z+]; do \
	  ln $$file ../tmp/m3cg >/dev/null 2>&1 || cp $$file ../tmp/m3cg; \
	done
