% Copyright 1996-2000 Critical Mass, Inc. All rights reserved.
% See file COPYRIGHT-CMASS for details.
% 
% Standard configuration file for HP-PA
%

%-------------------------------------------------- compilation environment ---

readonly TARGET       = "HPPA"                % code generation target
readonly BUILD_DIR    = TARGET                % directory for results
readonly OS_TYPE      = "POSIX"               % { "WIN32" or "POSIX" }
readonly WORD_SIZE    = "32BITS"              % { "32BITS" or "64BITS" }
readonly GNU_PLATFORM = "hppa1.1-hp-hpux"     % "cpu-vendor-os" string for GNU
readonly INSTALL_KEY  = "BRV2-U7A2-2KX2"

readonly NAMING_CONVENTIONS = "0"
%                                        object files       libraries
%  0=Unix                          =>  .o   .io    .mo       libXX.a
%  1=Unix with a grumpy C compiler =>  .o   _i.o   _m.o      libXX.a
%  2=Windows NT or Windows 95      =>  .obj .io    .mo       XX.lib
%

%-------------------------------------------------- default compile options ---
% "set_config_options" is called before starting the compilation.  It should
% be used to provide system-wide default options.

proc set_config_options () is
  m3_option ("-why")   %-- produce a listing that explains what's happening and why
  m3_debug (TRUE)      %-- produce object code with debugging symbols
  M3_OPTIONS += "-w1"  %-- produce "level 1" warnings
end

%--------------------------------------------------------- Reactor defaults ---
% The first time a user runs Reactor, it will configure itself to use
% the executables defined below.

INITIAL_REACTOR_BROWSER = "netscape"
% A World-Wide Web browser.  Reactor passes it an initial URL
% its first command-line argument.

INITIAL_REACTOR_EDITOR = "emacsclient"
% A text editor.  Reactor passes it "<file> +<line>" on the
% command-line when it wants to edit <file> initially positioned
% at <line>.

%------------------------------------------------------------- export paths ---
% During the installation, destination directories that do not exist
% will be created. You need the necessary permissions to do so; otherwise,
% the installation will fail, but can be restarted after you have 
% fixed the permissions.

% INSTALL_ROOT = "/usr/local/"
% INSTALL_ROOT = "/proj/cmass/install.2/HPPA/"
INSTALL_ROOT = "/usr/local/pm3/"
%-- handy for installations that keep all M3 stuff together

BIN_INSTALL   = INSTALL_ROOT & "bin"        % executables
LIB_INSTALL   = INSTALL_ROOT & "lib"        % libraries
PKG_INSTALL   = INSTALL_ROOT & "pkg"        % packages
DOC_INSTALL   = INSTALL_ROOT & "doc"        % documents
EMACS_INSTALL = INSTALL_ROOT & "elisp"      % emacs lisp code
MAN_INSTALL   = INSTALL_ROOT & "man"        % man pages
HTML_INSTALL  = INSTALL_ROOT & "www"        % public hypertext

% On some systems (e.g. AFS) you must install public files in a different
% place from where you use them.  If that is the case for your system,
% specify the "use" location here, otherwise leave them alone.
%
USE_ROOT  = INSTALL_ROOT
BIN_USE   = BIN_INSTALL       % executables
LIB_USE   = LIB_INSTALL       % libraries
PKG_USE   = PKG_INSTALL       % packages

readonly INSTALL_IMPLS = TRUE
% TRUE
%    => save all source files during the install
%    => makes debugging easier and browsing more fruitful
% FALSE
%    => save only the exported interfaces and templates 
%    => makes the installed system slightly smaller.

%------------------------------------------------ external system libraries ---
% SYSTEM_LIBS provides a mapping from Modula-3 names for the common
% external libraries to site-dependent information about how they
% are accessed.  If SYSTEM_LIBS{x} is defined it should be a list
% of linker arguments that are used when linking against that library.
% If SYSTEM_LIBS{x} is not defined, the Modula-3 system will assume
% that the library is not available.

SYSTEM_LIBS = {
  "LIBC"       : [ "-Wl,-a,default", "-lm", "-lBSD" ],
  "LEX-YACC"   : [ "-Wl,-a,default", "-L/usr/lib", "-ll" ],
  "FLEX-BISON" : [ "-Wl,-a,default", "-L/usr/lib", "-lfl" ],
  "POSTGRES95" : [ "-Wl,-a,default", "-L/usr/lib", "-lpq" ],
  "OPENGL"     : [ "-Wl,-a,default", "-L/usr/lib", "-lGLU", "-lGL",
                                     "-L/usr/lib/X11R4", "-lXext" ],
  "MOTIF"      : [ "-Wl,-a,default", "-L/usr/lib/Motif1.2", "-lXm" ],
  "X11"        : [ "-Wl,-a,default", "-L/usr/lib/X11R4", "-lXaw",
                                     "-lXmu", "-lXext", "-lXt", "-lX11" ],
  "TCP"        : [ ]
}

% SYSTEM_LIBORDER defines the order in which SYSTEM_LIBS should be
% scanned by the linker.

SYSTEM_LIBORDER = [ "OPENGL", "DECPEX", "MOTIF", "X11", "TCP",
                    "POSTGRES95", "FLEX-BISON", "LEX-YACC", "LIBC" ]

%--------------------------------------------------------- Modula-3 backend ---
% For platforms without an integrated backend, "m3_backend" is called to
% translate Modula-3 intermediate code to object code.

m3back = "@" & BIN_USE & "/cm3cg"

proc m3_backend (source, object, optimize, debug) is
  %%PIC local args = [ "-fPIC", "-O", "-quiet", source, "-o", object ]
  local args = [ "-O", "-quiet", source, "-o", object ]
  if debug     args += "-g"  end

  %% if optimize  args += "-O"  end
  %% GCC 2.7.2 generates bad code on HPPA if the optimizer is not
  %% enabled.  See forward_branch_p() in m3cc/gcc/config/pa/pa.c.

  return try_exec (m3back, args)
end

M3_BACKEND_MODE = "3"
% -- defines how the frontend, backend, and assembler interact
%  "0"  -- don't call m3_backend, M3CG produces object code
%  "1"  -- don't call m3_backend, M3CG produces assembly code
%  "2"  -- call m3_backend, it produces object code
%  "3"  -- call m3_backend, it produces assembly code

%--------------------------------------------------------------- C compiler ---
% "compile_c" is called to compile C source files.  Note that this function
% is only called if your program or library explicitly includes C source
% code, the system distributed by Critical Mass does not.

proc compile_c (source, object, options, optimize, debug) is
  %%PIC local args = [ "+Z", options ]  % +Z => -fPIC for cc
  %%PIC local args = [ "+z", options ]  % +Z => -fpic for cc
  local args = [ options, "-Dalloca=malloc", "+k" ]
  if optimize  args += "-O"  end
  if debug     args += "-g"  end
  return try_exec ("@/bin/cc", args, "-c", source)
end

%% Using gcc
% proc compile_c (source, object, options, optimize, debug) is
%   local args = [ "-fPIC", "-z", options ] % gcc
%   if optimize  args += "-O"  end
%   if debug     args += "-g"  end
%   return try_exec ("@gcc", args, "-c", source)
% end

%---------------------------------------------------------------- assembler ---
% "assemble" is called to assemble .s or .asm files.  Note that this function
% is only called if your program or library explicitly includes assembly source
% code, the system distributed by Critical Mass does not.

readonly m3asm = "@" & BIN_USE & "/cm3as"  %== GNU as (v2.7)

proc assemble (source, object) is
  %% return try_exec ("@/bin/as", "-s", "-K", "PIC", source, "-o", object)
  return try_exec (m3asm, source, "-o", object)
end

%--------------------------------------------------------- library creation ---
% "make_lib" is called to combine a collection of object modules into
% a library.

proc make_lib (lib, options, objects, imported_libs, shared) is
  local ret_code = 0
  local lib_a    = format ("lib%s.a", lib)
  local lib_sl   = format ("lib%s.sl", lib)

  % first, build the non-shared library
  ret_code = try_exec ("@/bin/ar", "cru", lib_a, objects)
  if not equal (ret_code, 0) return ret_code end

%%PIC  if shared
%%PIC    % build the shared library
%%PIC    ret_code = try_exec ("@/bin/ld -b -o", lib_sl, objects)
%%PIC    if not equal (ret_code, 0) return ret_code end
%%PIC
%%PIC    % finally, make sure the shared library stuff gets installed properly
%%PIC    install_derived (lib_sl)
%%PIC    install_link_to_derived (lib_sl, LIB_INSTALL)
%%PIC  else
    delete_file (lib_sl)
%%PIC  end

  return 0
end

%-------------------------------------------------------------------
% "skip_lib" is called when the compiler decides it doesn't need to
% call "make_lib", but it wants to discover the names of the derived
% files that should be deleted or shipped.

proc skip_lib (lib, shared) is
  local lib_sl = format ("lib%s.sl", lib)

%%PIC  if shared
%%PIC    % make sure the shared library stuff gets installed properly
%%PIC    install_derived (lib_sl)
%%PIC    install_link_to_derived (lib_sl, LIB_INSTALL)
%%PIC  else
    delete_file (lib_sl)
%%PIC  end

  return 0
end

%------------------------------------------------------------------- linker ---
% "m3_link" is called to produce a final executable.

proc m3_link (prog, options, objects, imported_libs, shared) is
  %% We'd use gcc as the linker, except it insists on moving
  %% the "-a archive" and "-a shared" linker arguments to the
  %% front of the argument list.  Boo, hiss.
  local linker = [ "@/bin/cc",
                   "-Wl,-z",             %=> generate NIL faults
                %% "-Wl,+FP,VZOUI",      %=> generate IEEE FP faults
%%PIC                   "-Wl,+s",             %=> use $SHLIB_PATH
%%PIC                   "-Wl,+b," & LIB_USE   %=> then M3 LIB_INSTALL directory
                 ]
  local args = [ options, objects, imported_libs ]
  if shared
    return try_exec (linker, "-o", prog, args)
  else
    return try_exec (linker, "-o", prog, "-Wl,-a,archive", args)
  end
end

%-------------------------------------------------------------------
% "skip_link" is called when the compiler decides it doesn't need to
% call "m3_link", but it wants to discover the names of the derived
% files that should be deleted or shipped.

proc skip_link (prog, shared) is
  return 0
end

%------------------------------------------------------------ misc. options ---
% Note, most of these options can be set from the command line.  Otherwise,
% they can be set "permanently" here in the config file or in as needed
% in user's m3makefiles.

M3_FRONT_FLAGS = [ ]
% --- internal configuration options passed directly to the Modula-3 front-end

M3_OPTIONS = [ ]
% --- user options passed directly to the Modula-3 front-end

% M3_KEEP_FILES = TRUE
% --- keep intermediate and temporary files

% M3_WINDOWS_GUI = TRUE
% --- generate a Windows GUI subsystem program instead of a console one.

% M3_COVERAGE = TRUE
% --- compile & link with coverage options

M3_COVERAGE_LIB = LIB_USE & "/report_coverage.o"
% --- library linked in programs compiled with "-Z" coverage option

M3_SPLIT_LIBNAMES = TRUE
% --- split library names and pass -L/-l arguments to the linker

% M3_SHARED_LIB_ARG = "-R"
% --- pass "-R" flags to the linker too...

% M3_BOOTSTRAP = TRUE
% --- generate bootstrap code (assembly) instead of finaly object code

% M3_COMPILE_ONCE = TRUE
% --- don't recompile code to improve opaque object references

% SYS_HAS_LOADER = TRUE
% --- generate a loader info file with objects, libraries and timestamps

% M3_SKIP_LINK = TRUE
% --- skip the final link for programs, presumably to use the loader instead

% M3_MAIN_IN_C = TRUE
% --- generate the Modula-3 main program as C code

X11_WITH_SHARED_MEM = TRUE
% --- X11 libraries include the shared memory extensions (XShm...)

% M3_NEED_STANDALONE_LINKS = TRUE
% --- linker is broken and we need to build a directory of symbolic
%     links pointing to the non-shared libraries.

%-------------------------------------------------------------------- emacs ---
% If you have emacs and want to compile ".el" files to ".elc" files,
% fill in the function below.  Otherwise, comment out or delete the
% entire function.  Note, the distributed code assumes gnuemacs version 19
% or later.

readonly proc emacs_compile (el) is
  exec ("emacs -batch -f batch-byte-compile", el)
end

%------------------------------------------------------------- GNU variants ---
% The two large pieces of GNU software used by the Modula-3 system
% gcc(=m3cc) and gdb(=m3gdb) often require slightly different C compilers
% or flags.  They are specified here.  Note that they may be overridden
% from the m3build command line.
%
% To use the GNU defaults for CC and CFLAGS, specify "*".
%

GNU_CC     = "gcc"
GNU_CFLAGS = "-O2 -g"
GNU_MAKE   = "/usr/local/gnu/bin/make"

%-------------------------------------------------------------------- latex ---
% If you have LaTeX installed in your path define the following to be TRUE
%PLATFORM_SUPPORTS_LATEX = TRUE

%--------------------------------------------------------------------- misc ---
% Provide for "hooks" to be called at the end of the m3makefile,
% after all the information is set and before the real processing starts.
%

m3_hooks = []

proc add_m3_hook(p) is
  m3_hooks += p
end

proc before_do_m3_hooks() is
  foreach p in m3_hooks
    p()
  end
end

proc OtherPackage(name) is
  before_do_m3_hooks()
  gen_m3exports (name)
  install_sources ()
end
