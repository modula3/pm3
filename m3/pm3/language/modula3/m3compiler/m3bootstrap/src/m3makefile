readonly Platforms = {
  "AIX386"    : [ "i486-ibm-aix", ""       ],
  "ALPHA_OSF" : [ "alpha-dec-osf1", "T"    ],
  "AP3000"    : [ "apollo68-bsd", ""       ],
  "ARM"       : [ "arm--riscos", ""        ],
  "BSDI4"     : [ "i386-unknown-freebsdelf", "T" ],
  "DS3100"    : [ "decstation", "T"        ],
  "FBSD_ALPHA": [ "alpha-unknown-freebsd", "T" ],
  "FreeBSD"   : [ "i486-unknown-bsd", ""   ],
  "FreeBSD2"  : [ "i486-unknown-freebsd", "T" ],
  "FreeBSD3"  : [ "i486-unknown-freebsdelf", "T" ],
  "FreeBSD4"  : [ "i486-unknown-freebsdelf", "T" ],
  "HP300"     : [ "m68k-hp-hpux", ""       ],
  "HPPA"      : [ "hppa1.1-hp-hpux", "T"   ],
  "IBMR2"     : [ "rs6000-ibm-aix3.2", "" ],
  "IBMRT"     : [ "romp-ibm-aos", ""       ],
  "IRIX5"     : [ "mips-sgi-irix5", "T"    ],
  "LINUX"     : [ "i486--linux", ""        ],
  "LINUXELF"  : [ "i486--linuxelf", "T"    ],
  "LINUXLIBC6": [ "i486--linuxelf", "T"    ],
  "NEXT"      : [ "next-bsd", ""          ],
  "NT386"     : [ "WIN32", "32BITS", "i486--nt", ""           ],
  "NT386GNU"  : [ "WIN32", "32BITS", "i486--cygwin32", "T"    ],
  "OKI"       : [ "i860--sysv4.0", ""      ],
  "SEQUENT"   : [ "i386-sequent-bsd", ""   ],
  "SOLgnu"    : [ "sparc-sun-solaris2", "T"],
  "SOLsun"    : [ "sparc-sun-solaris2", "" ],
  "SPARC"     : [ "sparc-sun-sunos4.1", "T"],
  "SUN3"      : [ "m68k-sun-sunos4.1", ""  ],
  "SUN386"    : [ "i386-sun-sunos4.1", ""  ],
  "Tru64v5"   : [ "alpha-dec-osf1", "T"    ],
  "UMAX"      : [ "encore-bsd", ""         ],
  "VAX"       : [ "vax-dec-ultrix", ""     ]
}

%
% Build a specific package, residing in dir, for target

readonly proc BootstrapPkg(dir,pkg,target,host) is
  % Create a directory for the package e.g. boot-LINUXELF/m3core

  local targetPkg = "pm3-" & target & SL & "boot-" & target & SL & pkg
  exec(["-mkdir", targetPkg])

  % Create a soft link to the source in the real package

  exec(["-cd", targetPkg, ";"],
       ["ln", "-s", ".." & SL & ".." & SL & ".." & SL &
        dir & SL & pkg & SL & "src", "."])

  % Issue the m3build command for the package

  write("---------- Building " & pkg & " ----------" & CR)
  exec(["cd", targetPkg, ";"], [BIN_USE & SL & "m3build", "-boot", "-b",
      target, "-T", ".." & SL & ".." & SL & ".." & SL & ".." & SL & ".." & SL &
      "libcm3" & SL & "src" &  SL & "config",
      "-F", ".." & SL & ".." & SL & ".." & SL & "config.tmpl"])

  >> "pm3-" & target & SL & "config.tmpl" in
    write("override(\"" & pkg & "\",\".." & SL & "..\")" & CR)
  end
end

%
% Remove the links to the real source directory

readonly proc CleanPkg(pkg,target) is
  exec(["rm", "pm3-" & target & SL & "boot-" & target & SL & pkg & SL & "src"])
end

%
% Write the command to "make" one package

readonly proc WriteMakefileLine(pkg,target,options) is
  % In a makefile, only real / may work
  write("\tcd boot-" & target & "/" & pkg & "/" & target & 
      "; ${MAKE} " & options, CR)

end

%
% Write the global bootstrap makefile

readonly proc CreateMakefile(file,target,header,options) is
  > file in
    write(header,CR,CR)

    write("all: boot packages", CR, CR)

    write("packages:", CR)
    write("\tboot-" & target & "/" & "pm3" & "/" & target & "/" &
        "pm3 -DBOOTSTRAP=TRUE", 
        " ${M3OPTIONS}",CR, CR)

    write("clean: pkg-clean boot-clean",CR, CR)

    write("pkg-clean:", CR)
    write("\tboot-" & target & "/" & "pm3" & "/" & target & "/" &
        "pm3 -DBOOTSTRAP=TRUE -DCLEAN_ALL",
        " ${M3OPTIONS}",CR, CR)

    write("nothing:",CR,CR)

    write("boot:", CR)
    WriteMakefileLine("m3core",target,options)
    WriteMakefileLine("libm3",target,options)
    WriteMakefileLine("m3middle",target,options)
    WriteMakefileLine("m3front",target,options)
    WriteMakefileLine("m3linker",target,options)
    WriteMakefileLine("m3quake",target,options)
    WriteMakefileLine("libcm3",target,options)
    WriteMakefileLine("pm3",target,options)

    write(CR, "boot-clean:", CR)
    WriteMakefileLine("m3core",target, "clean " & options)
    WriteMakefileLine("libm3",target, "clean " & options)
    WriteMakefileLine("m3middle",target, "clean " & options)
    WriteMakefileLine("m3front",target, "clean " & options)
    WriteMakefileLine("m3linker",target, "clean " & options)
    WriteMakefileLine("m3quake",target, "clean " & options)
    WriteMakefileLine("libcm3",target, "clean " & options)
    WriteMakefileLine("pm3",target, "clean " & options)
  end
end

%
% Compile m3cc as a cross compiler for the specified target

readonly proc CompileCrossCompiler(target,host) is
  local m3ccdir = "pm3-" & target & SL & "m3cc"

  % Create a subdirectory for m3cc and make links to the source code.
  % Then build it as a cross compiler.

  write("---------- Creating cross compiler " & host & " to " & target)
  write(" ----------" & CR)

  exec(["-mkdir", m3ccdir])
  exec(["-cd", m3ccdir, ";"], ["ln", "-s", ".." & SL & ".." & SL & ".." &
      SL & ".." & SL & "m3cc" & SL & "src", "."])
  exec(["-cd", m3ccdir, ";"], ["ln", "-s", ".." & SL & ".." & SL & ".." &
      SL & ".." & SL & "m3cc" & SL & "gcc", "."])

  %
  % C compilation is slow, as compared to M3, cache the cross-compiler
  %

  if not(stale("cm3cg-" & target,
    m3ccdir & SL & "gcc" & SL & "gcc" & SL & "m3cg" & SL & "m3.c"))
    exec(["-ln","-s", ".." & SL & "cm3cg-" & target, "pm3-" & target])
    exec(["cd", m3ccdir, ";"], ["rm", "src", "gcc"])
    exec(["-rmdir", m3ccdir])
    return
  end

  exec(["cd", m3ccdir, ";"],
      [BIN_USE & SL & "m3build",  "-b", host, 
      "-T", ".." & SL & ".." & SL & ".." & SL & ".." & SL &
      "libcm3" & SL & "src" & SL & "config" , 
      "-DM3CC_TARGET=" & target])

  % Keep the cross compiler under target-cm3cg and remove everything else.

  if equal(host,target)
    exec(["cd", m3ccdir, ";"],
         ["mv", host & SL & "cm3cg", ".." & SL & "cm3cg-" & target])
  else
    exec(["cd", m3ccdir, ";"],
         ["mv", host & "-" & target & SL & "cm3cg", ".." & SL & 
        "cm3cg-" & target],)
    exec(["cd", m3ccdir, ";"],["rm", "-r", host & "-" & target])
  end
  exec(["cd", m3ccdir, ";"],["rm", "-r", host])
  exec(["cd", m3ccdir, ";"],["rm", "src", "gcc"])
  exec(["rmdir", m3ccdir])

  exec(["mv","pm3-" & target & SL & "cm3cg-" & target, "."])
  exec(["ln","-s", ".." & SL & "cm3cg-" & target, "pm3-" & target])

  write("---------- Finished cross compiler ----------")
end

%
% Create everything needed for bootstrapping on platform "target"

readonly proc BootstrapTarget(target) is
  local host = TARGET

  exec(["-mkdir", "pm3-" & target])

  CompileCrossCompiler(target,host)

  % Prepare a config file with bootstrap specific overrides
  % The -O option should prevent using the integrated backend
  % which does not produce assembly; moreover, it may reduce the
  % bootstrap code size.

  > "pm3-" & target & SL & "config.tmpl" in
    write("build_standalone()",CR)
    if equal(target,"HPPA") or equal(target,"DS3100") or equal(target,"IRIX5")
        or equal(target,"NT386GNU") or equal(target,"IBMR2")
      write("m3_optimize(FALSE)",CR)
    else 
      write("m3_optimize(TRUE)",CR)
    end
    if equal(target,"ALPHA_OSF") or equal(target, "Tru64v5")
      % cm3cg generates bad code when -g flag is not used
      write("m3_debug(TRUE)",CR)
    end
    write("HOST=\"" & host & "\"",CR)
    write("USE_M3DOC=\"\"",CR)
    write("M3_SPLIT_LIBNAMES=FALSE",CR)
    write("IBACK=\"\"",CR)
    write("m3back=[\"" & path() & SL & ".." & SL & host & SL & "pm3-" & 
        target & SL & "cm3cg-" & target & 
        "\",\"-fno-strength-reduce\",\"-quiet\"]", CR)
  end

  write("---------- Config file ----------", CR)
  exec(["cat", "pm3-" & target & SL & "config.tmpl"])

  exec(["-mkdir", "pm3-" & target & SL & "boot-" & target])

  % Build all the packages required for m3build and m3ship
  % to obtain a bootstrap m3build and m3ship.

  BootstrapPkg("../../../../../text/sgmltools","m3doc",target,host)
  BootstrapPkg("../../../../../libs","m3core",target,host)
  BootstrapPkg("../../../../../libs","libm3",target,host)
  BootstrapPkg("../..","m3middle",target,host)
  BootstrapPkg("../..","m3front",target,host)
  BootstrapPkg("../..","m3linker",target,host)
  BootstrapPkg("../../../..","m3quake",target,host)
  BootstrapPkg("../..","libcm3",target,host)
  BootstrapPkg("../..","pm3",target,host)
  CleanPkg("m3doc",target)
  CleanPkg("m3core",target)
  CleanPkg("libm3",target)
  CleanPkg("m3middle",target)
  CleanPkg("m3front",target)
  CleanPkg("m3linker",target)
  CleanPkg("m3quake",target)
  CleanPkg("libcm3",target)
  CleanPkg("pm3",target)

  local header = "M3OPTIONS=" & CR
  local options = "\"CC=${CC}\" \"CFLAGS=${CFLAGS}\"" &
      " \"AS=${AS}\" \"ASFLAGS=${ASFLAGS}\"" &
      " \"AR=${AR}\" \"ARFLAGS=${ARFLAGS}\"" &
      " \"RANLIB=${RANLIB}\" \"EXTRALIBS=${EXTRALIBS}\"" & 
      " \"LDFLAGS=${LDFLAGS}\""

  header = header & "EXTRALIBS=" & CR

  if equal(target,"SOLgnu") or equal(target,"SOLsun")
    AS="/usr/ccs/bin/as"
    AR="/usr/ccs/bin/ld"
    header = header & "ASFLAGS=-s -P" & CR
  end

  if equal(target,"HPPA")
    header = header & "AS=gas" & CR
    header = header & "CC=gcc" & CR
  end

  if equal(target,"LINUXLIBC6")
    header = header & "LDFLAGS=" & GCWRAPFLAGS & CR
  end

  if equal(target,"ALPHA_OSF")
    header = header & "CFLAGS=-ieee_with_no_inexact -g3" & CR
    header = header & "LDFLAGS=-ieee_with_no_inexact" & CR
    header = header & "ASFLAGS=-g3" & CR
  end     

  if equal(target,"Tru64v5")
    header = header & "CFLAGS=-ieee_with_no_inexact -g" & CR
    header = header & "LDFLAGS=-ieee_with_no_inexact" & CR
    header = header & "ASFLAGS=-g" & CR
  end     

  if equal(target,"FreeBSD2")
    header = header & "RANLIB=ranlib" & CR
  else
    header = header & "RANLIB=touch" & CR
  end

  if equal(target, "FBSD_ALPHA")
    header = header & "CFLAGS=-mieee" & CR
  end

  CreateMakefile("pm3-" & target & SL & "Makefile." & target,target,
      header, options)
  CreateMakefile("pm3-" & target & SL & "Makefile",target,
      header, options)

  exec(["rm", "pm3-" & target & SL & "config.tmpl"])
  exec(["rm", "pm3-" & target & SL & "cm3cg-" & target])
  exec(["cp", ".." & SL & ".." & SL & "libcm3" & SL & "src" &  SL & "config"
		   & SL & target, "pm3-" & target
                   & SL & "pm3-" & target & ".cfg"])
  write("---------- bootstrap finished for " & target & " ----------", CR)
end

% Create a bootstrap for each of these "target" in boot-target
%

if defined("BOOTTARGET")
  BootstrapTarget(BOOTTARGET)
else
  foreach platform in Platforms
    if Platforms{platform}[1] BootstrapTarget(platform) end
  end
end


