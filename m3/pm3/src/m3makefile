% Copyright (C) 1994, Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%
% Last modified on Fri Aug 23 00:14:14 PDT 1996 by najork
%      modified on Mon Jun 19 08:07:53 PDT 1995 by kalsow
%

%
% When BOOTSTRAP is true, pm3 is taken from the "boot" directory.
%
% If BUILD_ALL is set, all the packages are built without being shipped.
%
% If SHIP_ALL is set, all the packages are shipped, assuming that they were
% previously built.
%
% If CLEAN_ALL is set, the derived files are removed.
%
% By default, each package is built, shipped and cleaned before passing to
% the next. Doing all the build, then all the ship, then all the clean
% requires all the derived files to be kept in the intermediate steps
% which eats up a LOT of disk space.
%

local currentPhase = 1
local firstPhase = ""
local ret = 0

if defined ("BOOTSTRAP")
  pm3 = [path() & SL & ".." & SL & "boot-" & TARGET & SL &"pm3" & SL &
      TARGET & SL & "pm3"]
else
  pm3 = [BIN_USE & SL & "pm3"]
end

if not (equal(TARGET,"HPPA") or equal(TARGET,"DS3100") or equal(TARGET,"IRIX5")
    or equal(TARGET,"NT386GNU"))
  pm3 += "-O"
end

if defined("BUILD_ALL") or defined("SHIP_ALL") or defined("CLEAN_ALL")
  doBuild = ""
  doShip = ""
  doClean = ""
else
  doBuild = "T"
  doShip = "T"
  doClean = "T"
end

if defined("BUILD_ALL")
 doBuild = "T"
end

if defined("SHIP_ALL")
 doShip = "T"
end

if defined("CLEAN_ALL")
  doClean = "T"
end

readonly proc BuildChunk (dir,pkg,bundle) is
  local build = [pm3]
  local ship = [pm3]

  ship += "-ship"

  if equal(OS_TYPE,"WIN32") dir = p2w(dir) end

  local wd = ".." & SL & dir & SL & pkg

  if not stale (pkg, pkg)
    % we've already built this chunk
    write ("-- ", pkg, " done --", CR)
    if doClean
      exec ([ "@cd", wd, ";", "rm", "-rf", BUILD_DIR])

      if not doBuild
        exec ([ "@rm", pkg])
      end
    end
    return
  end

  % let'm know what we're doing
  write (CR, "---------- building ", pkg," in ",dir," ----------", CR,CR)

  %
  % In the first phase, the documentation processing tools are not built
  % yet. Thus their use is skipped but the compiled files are kept for
  % the second pass shortly thereafter.
  %

  if firstPhase build += "-DUSE_M3DOC=" end

  % build and ship the chunk
  if doBuild
    exec (["cd", wd, ";"], build)
  end

  if doShip
    exec (["cd", wd, ";"], ship)
  end

  if not firstPhase
    % Remove the object files

    if  doClean
      exec ([ "@cd", wd, ";", "rm", "-rf", BUILD_DIR])
    end

    % Remember that we've built this chunk

    if doBuild or doShip
      exec (["touch", pkg])
    end
  end
end

local capabilities = {}

capabilities{OS_TYPE} = ""
if not defined("SKIP_LLSCAN") capabilities{"LLSCAN"} = "" end

% m3gdb is sensitive. On some versions of NT it did not work
if not defined("SKIP_M3GDB") capabilities{"M3GDB"} = "" end

% The "gnuemacs" package requires emacs to build.  But not all systems
% have emacs installed.
if not defined("SKIP_GNUEMACS") capabilities{"GNUEMACS"} = "" end

% Both postcard and webcard try to use the non-portable "st_spare2" field
% to get the nanoseconds portion of file modification times.  Some
% platforms don't have this field.
if not defined("NO_ST_SPARE") capabilities{"ST_SPARE"} = "" end

if SYSTEM_LIBS contains "MOTIF"  capabilities{"MOTIF"} = "" end
if SYSTEM_LIBS contains "DECPEX" capabilities{"DECPEX"} = "" end
if SYSTEM_LIBS contains "OPENGL" capabilities{"OPENGL"} = "" end
if SYSTEM_LIBS contains "X11"    capabilities{"X11"} = "" end
if defined("SHORE") capabilities{"SHORE"} = "" end

proc PkgInfo(name,subdirectory,subtree,bundle,type,bundleHead,buildPhase,
    dependency,buildPlatforms,buildReq,description) is
  local ok = ""

  foreach p in buildPlatforms
    if equal(p,"ALL") or equal(p,TARGET) ok = "T" end
  end

  foreach r in buildReq
    if not capabilities contains r ok = "" end
  end

  if ok and equal(buildPhase,currentPhase)
    BuildChunk(subdirectory,name,bundle)
  end
end

% Build the first few packages which have no requirements

currentPhase = 1
firstPhase = ""
include("PACKAGES")

% Build the core packages without documentation
currentPhase = 2
firstPhase = "T"
include("PACKAGES")

% Now that the documentation tools are ready, rebuild the core packages
firstPhase = ""
include("PACKAGES")

% Build the remaining packages
currentPhase = 3
include("PACKAGES")

OtherPackage("pm3")
