(*********************************************************************)
(*                                                                   *)
(* TrackerPositionTstCB.m3                                           *)
(* -- autogenerated by SOCodeGen --                                  *)
(* Thu Dec 21 08:02:15 EST 1995                                      *)
(*                                                                   *)
(*********************************************************************)

MODULE TrackerPositionTstCB EXPORTS TrackerPositionTstCB, TrackerPositionTstPRX;

IMPORT TrackerPositionTstF, TrackerPositionTst, SharedObj, TrackerPositionTst2FSharedObjRep, SharedObjStubLib, WeakRef, WeakRefList, WeakerRef, WeakRefListFuncs;

REVEAL

 TrackerPositionTst_T = Public_TrackerPositionTst_T BRANDED OBJECT;
  obj: TrackerPositionTst.T;
  OVERRIDES
   init := Init_TrackerPositionTst_T;
   pre_anyChange := Pre_anyChange_TrackerPositionTst_T;
   post_anyChange := Post_anyChange_TrackerPositionTst_T;
   pre_init := Pre_init_TrackerPositionTst_T;
   post_init := Post_init_TrackerPositionTst_T;
   pre_set := Pre_set_TrackerPositionTst_T;
   post_set := Post_set_TrackerPositionTst_T;
 END;


 TrackerPositionTst_U = Public_TrackerPositionTst_U BRANDED OBJECT;
  obj: TrackerPositionTst.U;
  OVERRIDES
   init := Init_TrackerPositionTst_U;
   pre_anyChange := Pre_anyChange_TrackerPositionTst_U;
   post_anyChange := Post_anyChange_TrackerPositionTst_U;
   pre_set := Pre_set_TrackerPositionTst_U;
   post_set := Post_set_TrackerPositionTst_U;
 END;


PROCEDURE Init_TrackerPositionTst_T (self: TrackerPositionTst_T; obj: TrackerPositionTst.T): TrackerPositionTst_T =
 VAR
  wref := NEW(WeakerRef.T, weakRef := WeakRef.FromRef(self, Cleanup_TrackerPositionTst_T_CB),
              ready := TRUE);
 BEGIN
  self.obj := obj;
  IF MkProxy_TrackerPositionTst_T_CB # NIL AND self.proxy = NIL THEN
   MkProxy_TrackerPositionTst_T_CB (self);
  END;
  SharedObjStubLib.AcquireWriteLock(obj);
  TRY
   obj.callbacks := WeakRefList.Cons(wref, obj.callbacks);
  FINALLY
   SharedObjStubLib.ReleaseWriteLock(obj);
  END;
  RETURN self;
 END Init_TrackerPositionTst_T;

PROCEDURE Cleanup_TrackerPositionTst_T_CB( READONLY wref: WeakRef.T; ref: REFANY) =
 VAR
  cb := NARROW(ref, TrackerPositionTst_T_CB),
  weakerRef := NEW(WeakerRef.T, weakRef := wref);
 BEGIN
  SharedObjStubLib.AcquireWriteLock(cb.obj);
  TRY
   (* Callback is gone, so delete it *)
   EVAL WeakRefListFuncs.DeleteD(cb.obj.callbvacks, weakerRef);
  FINALLY
   SharedObjStubLib.ReleaseWriteLock(cb.obj);
  END;
 END Init_TrackerPositionTst_T;

PROCEDURE Pre_anyChange_TrackerPositionTst_T( self: TrackerPositionTst_T; READONLY obj: TrackerPositionTst.T) =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   NARROW (self.proxy, CBProxy_TrackerPositionTst_T).pre_anyChange (obj);
  END;
 END Pre_anyChange_TrackerPositionTst_T;

PROCEDURE Post_anyChange_TrackerPositionTst_T( self: TrackerPositionTst_T; READONLY obj: TrackerPositionTst.T) =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   NARROW (self.proxy, CBProxy_TrackerPositionTst_T).post_anyChange (obj);
  RETURN FALSE;
  END;
 END Post_anyChange_TrackerPositionTst_T;

PROCEDURE Pre_init_TrackerPositionTst_T( self: TrackerPositionTst_T; ): BOOLEAN =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   RETURN NARROW (self.proxy, CBProxy_TrackerPositionTst_T).pre_init (obj);
  END;
  RETURN FALSE;
 END Pre_init_TrackerPositionTst_T;

PROCEDURE Post_init_TrackerPositionTst_T( self: TrackerPositionTst_T; ): BOOLEAN =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   RETURN NARROW (self.proxy, CBProxy_TrackerPositionTst_T).post_init (obj);
  END;
  RETURN FALSE;
 END Post_init_TrackerPositionTst_T;

PROCEDURE Pre_set_TrackerPositionTst_T( self: TrackerPositionTst_T; ;
 READONLY val: TrackerPositionTst.Data): BOOLEAN =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   RETURN NARROW (self.proxy, CBProxy_TrackerPositionTst_T).pre_set (obj);
  END;
  RETURN FALSE;
 END Pre_set_TrackerPositionTst_T;

PROCEDURE Post_set_TrackerPositionTst_T( self: TrackerPositionTst_T; ;
 READONLY val: TrackerPositionTst.Data): BOOLEAN =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   RETURN NARROW (self.proxy, CBProxy_TrackerPositionTst_T).post_set (obj);
  END;
  RETURN FALSE;
 END Post_set_TrackerPositionTst_T;

PROCEDURE Init_TrackerPositionTst_U (self: TrackerPositionTst_U; obj: TrackerPositionTst.U): TrackerPositionTst_U =
 VAR
  wref := NEW(WeakerRef.T, weakRef := WeakRef.FromRef(self, Cleanup_TrackerPositionTst_U_CB),
              ready := TRUE);
 BEGIN
  self.obj := obj;
  IF MkProxy_TrackerPositionTst_U_CB # NIL AND self.proxy = NIL THEN
   MkProxy_TrackerPositionTst_U_CB (self);
  END;
  SharedObjStubLib.AcquireWriteLock(obj);
  TRY
   obj.callbacks := WeakRefList.Cons(wref, obj.callbacks);
  FINALLY
   SharedObjStubLib.ReleaseWriteLock(obj);
  END;
  RETURN self;
 END Init_TrackerPositionTst_U;

PROCEDURE Cleanup_TrackerPositionTst_U_CB( READONLY wref: WeakRef.T; ref: REFANY) =
 VAR
  cb := NARROW(ref, TrackerPositionTst_U_CB),
  weakerRef := NEW(WeakerRef.T, weakRef := wref);
 BEGIN
  SharedObjStubLib.AcquireWriteLock(cb.obj);
  TRY
   (* Callback is gone, so delete it *)
   EVAL WeakRefListFuncs.DeleteD(cb.obj.callbvacks, weakerRef);
  FINALLY
   SharedObjStubLib.ReleaseWriteLock(cb.obj);
  END;
 END Init_TrackerPositionTst_U;

PROCEDURE Pre_anyChange_TrackerPositionTst_U( self: TrackerPositionTst_U; READONLY obj: TrackerPositionTst.U) =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   NARROW (self.proxy, CBProxy_TrackerPositionTst_U).pre_anyChange (obj);
  END;
 END Pre_anyChange_TrackerPositionTst_U;

PROCEDURE Post_anyChange_TrackerPositionTst_U( self: TrackerPositionTst_U; READONLY obj: TrackerPositionTst.U) =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   NARROW (self.proxy, CBProxy_TrackerPositionTst_U).post_anyChange (obj);
  RETURN FALSE;
  END;
 END Post_anyChange_TrackerPositionTst_U;

PROCEDURE Pre_set_TrackerPositionTst_U( self: TrackerPositionTst_U; ;
 READONLY val: TrackerPositionTst.Data): BOOLEAN =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   RETURN NARROW (self.proxy, CBProxy_TrackerPositionTst_U).pre_set (obj);
  END;
  RETURN FALSE;
 END Pre_set_TrackerPositionTst_U;

PROCEDURE Post_set_TrackerPositionTst_U( self: TrackerPositionTst_U; ;
 READONLY val: TrackerPositionTst.Data): BOOLEAN =
 BEGIN
  (* Default calls proxy or does nothing. *)
  IF self.proxy # NIL THEN
   RETURN NARROW (self.proxy, CBProxy_TrackerPositionTst_U).post_set (obj);
  END;
  RETURN FALSE;
 END Post_set_TrackerPositionTst_U;

BEGIN
END TrackerPositionTstCB.
