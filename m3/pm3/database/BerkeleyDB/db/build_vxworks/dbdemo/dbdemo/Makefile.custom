#
# Custom Makefile shell
#
# This file may be edited freely, since it will not be regenerated
# by the project manager.
#
# Use this makefile to define rules to make external binaries
# and deposit them in the $(EXTERNAL_BINARIES_DIR) directory.
#
# If you have specified external modules during your component
# creation, you will find make rules already in place below.
# You will likely have to edit these to suit your individual
# build setup.
#
# You may wish to use the CPU, BUILD_SPEC or TOOL make variables in
# your Makefile to support builds for different architectures.  Use
# the FORCE_EXTERNAL_MAKE phony target to ensure that your external
# make always runs.
#
# The example below assumes that your custom makefile is in the
# mySourceTree directory, and that the binary file it produces
# is placed into the $(BUILD_SPEC) sub-directory.
#
# EXTERNAL_SOURCE_BASE = /folk/me/mySourceTree
# EXTERNAL_MODULE = myLibrary.o
# EXTERNAL_MAKE = make
#
# $(EXTERNAL_BINARIES_DIR)/$(EXTERNAL_MODULE) : FORCE_EXTERNAL_MAKE
#	$(EXTERNAL_MAKE) -C $(EXTERNAL_SOURCE_BASE) \
#	-f $(EXTERNAL_SOURCE_BASE)/Makefile \
#	CPU=$(CPU) BUILD_SPEC=$(BUILD_SPEC) $(@F)
#	$(CP) $(subst /,$(DIRCHAR),$(EXTERNAL_SOURCE_BASE)/$(BUILD_SPEC)/$(@F) $@)
#
# If you are not adding your external modules from the component wizard,
# you will have to include them in your component yourself:
#
# From the GUI, you can do this with the Component's 'Add external module'
# dialog.
#
# If you are using the command line, add the module(s) by editing the
# MODULES line in component.cdf file, e.g.
#
# Component INCLUDE_MYCOMPONENT {
#
#   MODULES         foo.o goo.o \
#         myLibrary.o
#


# rules to build custom libraries

