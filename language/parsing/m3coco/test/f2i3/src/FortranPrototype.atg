(* Grammar for Fortran that cares about the procedure prototypes only *)

COMPILER FortranPrototype

IMPORT Scan, Fmt, Wr, IO ;

CHARACTERS
  letter  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
          + "abcdefghijklmnopqrstuvwxyz" .
  octal   = "01234567" .
  digit   = "0123456789" .
  hex     = "0123456789abcdefABCDEF" .
  other   = " !#$%&()*+,-./:;<=>?@[]^_'{|}" + CHR(128) .. CHR(255) .
  exp     = "EeDdXx" .
  esc     = "ntrf\'" + '"' .
  print   = letter + digit + other .
  eol     = CHR(10) .

TOKENS
  id      = letter {letter | digit | "_"} .
  number  = digit {digit} ["_" hex {hex} |
                           "." digit {digit} exp ["+"|"-"] digit {digit}] .
  charlit = "'" (print | "\" (esc | octal octal octal) | '"') "'" .
  textlit = '"' {print | "\" (esc | octal octal octal) | "'"} '"' .
  symbol  = "<" | ">" | "=" | ">=" | "<=" .
  newline = eol .

COMMENTS FROM "*" TO eol

PRODUCTIONS

(* Compilation unit productions *)

FortranPrototype = Procedure .

Procedure      = (SubroutineHead | FunctionHead) Declarations ProcedureBody .

SubroutineHead      (. VAR name,sig : TEXT; .)
   = "SUBROUTINE" Ident<name> Signature<sig> {newline}
	(. IO.Put("PROCEDURE "&name&sig&";\n") .) .

FunctionHead        (. VAR name,sig,rettype : TEXT; .)
   = Type<rettype> "FUNCTION" Ident<name> Signature<sig> {newline}
	(. IO.Put("PROCEDURE "&name&sig&":"&rettype&";\n") .) .

Declarations                   (. VAR type,var : TEXT; .)
   = {
       Type<type>
       Ident<var>              (. IO.Put(var) .)
       {"," Ident<var>         (. IO.Put(", "&var) .)
       }                       (. IO.Put(": "&type&";\n") .)
       {newline}
     } .

ProcedureBody = Assignment Trash .

Signature<VAR sig:TEXT>        (. VAR formal:TEXT; .)
   = "("                       (. sig:="(" .)
       [Ident<formal>          (. sig:="("&formal .)
       {"," Ident<formal>      (. sig:=sig&"; "&formal .)
       }]                      (. sig:=sig&")" .)
     ")" .

Type<VAR type : TEXT;>
              = BuiltinType (. type := p.string() .) .

BuiltinType   = "LOGICAL"
              | "CHARACTER"
              | "INTEGER"
              | ("DOUBLE" | "SINGLE") "PRECISION" .

Ident <VAR t:TEXT;> = id (. t := p.string() .).

Assignment    = id "=" id .

Trash         = {id | symbol} .

END FortranPrototype.
