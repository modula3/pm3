# Copyright (C) 1992, 1994 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@cygnus.com)

if $tracelevel then {
    strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "watchpoint"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [compile "${srcdir}/${subdir}/${srcfile} -g -o ${binfile}"] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

# Prepare for watchpoint tests by setting up two breakpoints and one
# watchpoint.
#
# We use breakpoints at marker functions to get past all the startup code,
# so we can get to the watchpoints in a reasonable amount of time from a
# known starting point.
#
# For simplicity, so we always know how to reference specific breakpoints or
# watchpoints by number, we expect a particular ordering and numbering of
# each in the combined breakpoint/watchpoint table, as follows:
#
#	Number		What		Where
#	1		Breakpoint	marker1()
#	2		Breakpoint	marker2()
#	3		Watchpoint	ival3

proc initialize {} {
    global prompt
    global hex
    global decimal
    global srcfile

    send "break marker1\n"
    expect {
	-re "Breakpoint 1 at $hex: file .*$srcfile, line $decimal.*$prompt $" {
	    pass "set breakpoint at marker1"
	}
	-re ".*$prompt $" { fail "set breakpoint at marker1" ; return 0 }
	timeout { fail "set breakpoint at marker1 (timeout)" ; return 0 }
    }

    send "break marker2\n"
    expect {
	-re "Breakpoint 2 at $hex: file .*$srcfile, line $decimal.*$prompt $" {
	    pass "set breakpoint at marker2"
	}
	-re ".*$prompt $" { fail "set breakpoint at marker2" ; return 0 }
	timeout { fail "set breakpoint at marker2 (timeout)" ; return 0 }
    }

    send "info break\n"
    expect {
	-re "1\[ \]*breakpoint.*marker1.*\r\n2\[ \]*breakpoint.*marker2.*\r\n$prompt $" { pass "info break in watchpoint.exp" }
	-re ".*$prompt $" { fail "info break in watchpoint.exp" ; return 0 }
	timeout { fail "info break in watchpoint.exp (timeout)" ; return 0 }
    }

    send "watch ival3\n"
    expect {
	-re ".*\[Ww\]atchpoint 3: ival3\r\n$prompt $" { 
	    pass "set watchpoint on ival3"
	}
	-re ".*$prompt $" { fail "set watchpoint on ival3" ; return 0 }
	timeout { fail "set watchpoint on ival3 (timeout)" ; return 0 }
    }

    # "info watch" is the same as "info break"

    send "info watch\n"
    expect {
	-re "1\[ \]*breakpoint.*marker1.*\r\n2\[ \]*breakpoint.*marker2.*\r\n3\[ \]*.*watchpoint.*ival3\r\n$prompt $" {
	    pass "watchpoint found in watchpoint/breakpoint table"
	}
	-re ".*$prompt $" {
	    fail "watchpoint found in watchpoint/breakpoint table" ; return 0
	}
	timeout {
	   fail "watchpoint found in watchpoint/breakpoint table" ; return 0
	}
    }

    # After installing the watchpoint, we disable it until we are ready
    # to use it.  This allows the test program to run at full speed until
    # we get to the first marker function.

    send "disable 3\n"
    expect {
	-re "disable 3\[\r\n\]+$prompt $" { pass "disable watchpoint" }
	-re ".*$prompt $" { fail "disable watchpoint" ; return 0 }
	timeout { fail "disable watchpoint (timeout)" ; return 0 }
    }

    return 1
}

#
# Test simple watchpoint.
#

proc test_simple_watchpoint {} {
    global prompt
    global hex
    global decimal
    global noresults

    # Ensure that the watchpoint is disabled when we startup.

    send "disable 3\n"
    expect {
	-re "^disable 3\[\r\n\]+$prompt $" {
	    pass "disable watchpoint in test_simple_watchpoint"
	}
	-re ".*$prompt $" {
	    fail "disable watchpoint in test_simple_watchpoint"
	    return 0
	}
	timeout {
	    fail "disable watchpoint in test_simple_watchpoint (timeout)"
	    return 0
	}
    }

    # Run until we get to the first marker function.

    gdb_run_cmd
    expect {
	-re "Breakpoint 1, marker1 .*$prompt $" {
	    pass "run to marker1 in test_simple_watchpoint"
	}
	-re ".*$prompt $" {
	    fail "run to marker1 in test_simple_watchpoint"
	    return
	}
	timeout {
	    fail "run to marker1 in test_simple_watchpoint (timeout)"
	    return
	}
    }

    # After reaching the marker function, enable the watchpoint.

    send "enable 3\n"
    expect {
	-re "^enable 3\[\r\n\]+$prompt $" { pass "enable watchpoint" }
	-re ".*$prompt $" { fail "enable watchpoint" ; return }
	timeout { fail "enable watchpoint (timeout)" ; return }
    }

    gdb_test "break func1" "Breakpoint.*at.*"
    gdb_test "set \$func1_breakpoint_number = \$bpnum" ""

    gdb_test "continue" "Continuing.*Breakpoint \[0-9\]*, func1.*" \
	"continue to breakpoint at func1"

    # Continue until the first change, from -1 to 0

    send "cont\n"
    expect {
	-re "Continuing.*\[Ww\]atchpoint.*ival3.*Old value = -1.*New value = 0.*ival3 = count; ival4 = count;.*$prompt $" {
	    pass "watchpoint hit, first time"
	}
	-re "Continuing.*Breakpoint.*func1.*$prompt $" {
	    setup_xfail "m68*-*-*" 2597
	    fail "thought it hit breakpoint at func1 twice"
	    gdb_test "delete \$func1_breakpoint_number" ""
	    gdb_test "continue" "\
Continuing.*\[Ww\]atchpoint.*ival3.*Old value = -1.*New value = 0.*ival3 = count;" \
		"watchpoint hit, first time"
	}
	-re ".*$prompt $" { fail "watchpoint hit, first time" ; return }
	timeout { fail "watchpoint hit, first time (timeout)" ; return }
	eof { fail "watchpoint hit, first time (eof)" ; return }
    }

    gdb_test "delete \$func1_breakpoint_number" ""

    # Continue until the next change, from 0 to 1.
    gdb_test "cont" "Continuing.*\[Ww\]atchpoint.*ival3.*Old value = 0.*New value = 1.*ival3 = count; ival4 = count;.*" "watchpoint hit, second time"

    # Continue until the next change, from 1 to 2.
    gdb_test "cont" "Continuing.*\[Ww\]atchpoint.*ival3.*Old value = 1.*New value = 2.*ival3 = count; ival4 = count;.*" "watchpoint hit, third time"
    
    # Continue until the next change, from 2 to 3.
    gdb_test "cont" "Continuing.*\[Ww\]atchpoint.*ival3.*Old value = 2.*New value = 3.*ival3 = count; ival4 = count;.*" "watchpoint hit, fourth time"

    # Continue until the next change, from 3 to 4.
    # Note that this one is outside the loop.

    gdb_test "cont" "Continuing.*\[Ww\]atchpoint.*ival3.*Old value = 3.*New value = 4.*ival3 = count; ival4 = count;.*" "watchpoint hit, fifth time"

    # Continue until we hit the finishing marker function.
    # Make sure we hit no more watchpoints.

    gdb_test "cont" "Continuing.*Breakpoint.*marker2 \(\).*" \
	"continue to marker2"

    # Disable the watchpoint so we run at full speed until we exit.

    send "disable 3\n"
    expect {
	-re "^disable 3\[\r\n\]+$prompt $" { pass "watchpoint disabled" }
	-re ".*$prompt $" { fail "watchpoint disabled" ; return }
	timeout { fail "watchpoint disabled (timeout)" ; return }
    }

    # Run until process exits.

    if $noresults==1 then { return }

    gdb_test "cont" "Continuing.*Program exited normally.*" \
	"continue to exit in test_simple_watchpoint"
}

# Test disabling watchpoints.

proc test_disabling_watchpoints {} {
    global prompt
    global binfile
    global srcfile
    global decimal
    global hex
    global noresults

    # Ensure that the watchpoint is disabled when we startup.

    send "disable 3\n"
    expect {
	-re "^disable 3\[\r\n\]+$prompt $" {
	    pass "disable watchpoint in test_disabling_watchpoints"
	}
	-re ".*$prompt $" {
	    fail "disable watchpoint in test_disabling_watchpoints"
	    return 0
	}
	timeout {
	    fail "disable watchpoint in test_disabling_watchpoints (timeout)"
	    return 0
	}
    }

    # Run until we get to the first marker function.

    gdb_run_cmd
    expect {
	-re "Breakpoint 1, marker1 .*$prompt $" {
	    pass "run to marker1 in test_disabling_watchpoints"
	}
	-re ".*$prompt $" {
	    fail "run to marker1 in test_disabling_watchpoints"
	    return
	}
	timeout {
	    fail "run to marker1 in test_disabling_watchpoints (timeout)"
	    return
	}
    }

    # After reaching the marker function, enable the watchpoint.

    send "enable 3\n"
    expect {
	-re "^enable 3\[\r\n\]+$prompt $" { pass "watchpoint enabled" }
	-re ".*$prompt $" { fail "watchpoint enabled" ; return }
	timeout { fail "watchpoint enabled (timeout)" ; return }
    }

    # Continue until the first change, from -1 to 0
    # Don't check the old value, because on VxWorks the variable value
    # will not have been reinitialized.
    gdb_test "cont" "Continuing.*\[Ww\]atchpoint.*ival3.*Old value = .*New value = 0.*ival3 = count; ival4 = count;.*" "watchpoint hit in test_disabling_watchpoints, first time"
    
    # Continue until the next change, from 0 to 1.
    gdb_test "cont" "Continuing.*\[Ww\]atchpoint.*ival3.*Old value = 0.*New value = 1.*ival3 = count; ival4 = count;.*" "watchpoint hit in test_disabling_watchpoints, second time"
    
    # Disable the watchpoint but leave breakpoints

    send "disable 3\n"
    expect {
	-re "^disable 3\[\r\n\]+$prompt $" {
	    pass "disable watchpoint #2 in test_disabling_watchpoints"
	}
	-re ".*$prompt $" {
	    "disable watchpoint #2 in test_disabling_watchpoints"
	    return 0
	}
	timeout {
	    "disable watchpoint #2 in test_disabling_watchpoints (timeout)"
	    return 0
	}
    }

    # Check watchpoint list, looking for the entry that confirms the
    # watchpoint is disabled.
    gdb_test "info watchpoints" "3\[ \]*.*watchpoint\[ \]*keep\[ \]*n\[ \]*ival3\r\n.*" "watchpoint disabled in table"

    # Continue until we hit the finishing marker function.
    # Make sure we hit no more watchpoints.
    gdb_test "cont" "Continuing.*Breakpoint.*marker2 \\(\\).*" \
	"disabled watchpoint skipped"
    
    if $noresults==1 then { return }

    gdb_test "cont" "Continuing.*Program exited normally.*" \
	"continue to exit in test_disabling_watchpoints"
}

# Test stepping and other mundane operations with watchpoints enabled
proc test_stepping {} {
    global prompt

    if [runto marker1] then {
	gdb_test "watch ival2" ".*\[Ww\]atchpoint \[0-9\]*: ival2"

	# Well, let's not be too mundane.  It should be a *bit* of a challenge
	gdb_test "break func2 if 0" "Breakpoint.*at.*"
	gdb_test "p \$func2_breakpoint_number = \$bpnum" " = .*"

	# The HPPA has a problem here if it's not using hardware watchpoints
	if {[ istarget "hppa*-*-*" ] && ![ istarget "hppa*-*-*bsd*" ]} then {
	    # Don't actually try doing the call, if we do we can't continue.
	    setup_xfail "*-*-*"
	    fail "calling function with watchpoint enabled"
	} else {
	    # The problem is that GDB confuses stepping through the call
	    # dummy with hitting the breakpoint at the end of the call dummy.
	    # Will be fixed once all architectures define 
	    # CALL_DUMMY_BREAKPOINT_OFFSET.
	    setup_xfail "*-*-*"
	    # This doesn't occur if the call dummy starts with a call,
	    # because we are out of the dummy by the first time the inferior
	    # stops.
	    clear_xfail "m68*-*-*"
	    clear_xfail "i*86*-*-*"
	    clear_xfail "vax-*-*"
	    # The following architectures define CALL_DUMMY_BREAKPOINT_OFFSET.
	    clear_xfail "alpha-*-*"
	    clear_xfail "mips*-*-*"
	    clear_xfail "sparc-*-*"
	    clear_xfail "hppa*-*-*bsd*"
	    gdb_test "p func1 ()" "= 73" \
		"calling function with watchpoint enabled"
	}

	# 
	# "finish" brings us back to main.
	# On some targets (e.g. alpha) gdb will stop from the finish in midline
	# of the marker1 call. This is due to register restoring code on
	# the alpha and might be caused by stack adjustment instructions
	# on other targets. In this case we will step once more.
	#

	send "finish\n"
	expect {
	    -re "Run.*exit from.*marker1.*main.* at" { }
	    default { fail "finish from marker1" ; return }
	}
	expect {
	    -re "marker1 \\(\\);.*$prompt $" {
		send "step\n"
		exp_continue
	    }
	    -re "func1 \\(\\);.*$prompt $" {
		pass "finish from marker1"
	    }
	    -re ".*$prompt $" {
		fail "finish from marker1"
	    }
	    default { fail "finish from marker1" ; return }
	}

	gdb_test "next" "for \\(count = 0.*" "next to `for' in watchpoint.exp"

	# Now test that "until" works.  It's a bit tricky to test
	# "until", because compilers don't always arrange the code
	# exactly the same way, and we might get slightly different
	# sequences of statements.  But the following should be true
	# (if not it is a compiler or a debugger bug): The user who
	# does "until" at every statement of a loop should end up
	# stepping through the loop once, and the debugger should not
	# stop for any of the remaining iterations.

	gdb_test "until" "ival1 = count.*" "until to ival1 assignment"
	gdb_test "until" "ival3 = count.*" "until to ival3 assignment"
	send "until\n"
	expect {
	    -re "(for \\(count = 0|\}).*$prompt $" {
		gdb_test "until" "ival1 = count; /. Outside loop ./" \
		    "until out of loop"
	    }
	    -re "ival1 = count; /. Outside loop ./.*$prompt $" {
		pass "until out of loop"
	    }
	    -re ".*$prompt $" {
		fail "until out of loop"
	    }
	    default { fail "until out of loop" ; return }
	}

	gdb_test "step" "ival2 = count.*" "step to ival2 assignment"
    }
}

# Test stepping and other mundane operations with watchpoints enabled
proc test_watchpoint_triggered_in_syscall {} {
    global prompt
    global noinferiorio
    global noresults

    if $noinferiorio {
	verbose "Skipping test_watchpoint_triggered_in_syscall due to noinferiorio"
	return
    }
    # Run until we get to the first marker function.
    set x 0
    set y 0
    set testname "Watch buffer passed to read syscall"
    if [runto marker2] then {
	gdb_test "watch buf\[0\]" ".*\[Ww\]atchpoint \[0-9\]*: buf\\\[0\\\]"
	gdb_test "watch buf\[1\]" ".*\[Ww\]atchpoint \[0-9\]*: buf\\\[1\\\]"
	gdb_test "watch buf\[2\]" ".*\[Ww\]atchpoint \[0-9\]*: buf\\\[2\\\]"
	gdb_test "watch buf\[3\]" ".*\[Ww\]atchpoint \[0-9\]*: buf\\\[3\\\]"
	gdb_test "watch buf\[4\]" ".*\[Ww\]atchpoint \[0-9\]*: buf\\\[4\\\]"
	gdb_test "break marker4" ".*Breakpoint.*"

	gdb_test "set doread = 1" ""

	# If we send "123\n" before gdb has switched the tty, then it goes
	# to gdb, not the inferior, and we lose.  So that is why we have
	# watchpoint.c prompt us, so we can wait for that prompt.
	send "continue\n"
	expect {
	    -re "Continuing\\.\r\ntype stuff for buf now:" {
		pass "continue to read"
	    }
	    default { fail "continue to read"; return }
	}
	send "123\n"
	expect {
	    -re ".*\[Ww\]atchpoint.*buf\\\[0\\\].*Old value = 0.*New value = 49\[^\n\]*\n" { set x [expr $x+1] ; exp_continue }
	    -re ".*\[Ww\]atchpoint.*buf\\\[1\\\].*Old value = 0.*New value = 50\[^\n\]*\n" { set x [expr $x+1] ; exp_continue }
	    -re ".*\[Ww\]atchpoint.*buf\\\[2\\\].*Old value = 0.*New value = 51\[^\n\]*\n" { set x [expr $x+1] ; exp_continue }
	    -re ".*\[Ww\]atchpoint.*buf\\\[3\\\].*Old value = 0.*New value = 10\[^\n\]*\n" { set x [expr $x+1] ; exp_continue }
	    -re ".*$prompt $" { pass "sent 123" }
	    timeout { fail "sent 123" }
	}

	# Examine the values in buf to see how many watchpoints we
	# should have printed.
	send "print buf\[0\]\n"
	expect {
	    -re ".*= 49.*$prompt $" { set y [expr $y+1]; pass "print buf\[0\]"}
	    -re ".*= 0.*$prompt $" { pass "print buf\[0\]"}
	    -re ".*$prompt $" { fail "print buf\[0\]"}
	    default { fail "print buf\[0\]"}
	}
	send "print buf\[1\]\n"
	expect {
	    -re ".*= 50.*$prompt $" { set y [expr $y+1]; pass "print buf\[1\]"}
	    -re ".*= 0.*$prompt $" { pass "print buf\[1\]"}
	    -re ".*$prompt $" { fail "print buf\[1\]"}
	    default { fail "print buf\[1\]"}
	}
	send "print buf\[2\]\n"
	expect {
	    -re ".*= 51.*$prompt $" { set y [expr $y+1]; pass "print buf\[2\]"}
	    -re ".*= 0.*$prompt $" { pass "print buf\[2\]"}
	    -re ".*$prompt $" { fail "print buf\[2\]"}
	    default { fail "print buf\[2\]"}
	}
	send "print buf\[3\]\n"
	expect {
	    -re ".*= 10.*$prompt $" { set y [expr $y+1]; pass "print buf\[3\]"}
	    -re ".*= 0.*$prompt $" { pass "print buf\[3\]"}
	    -re ".*$prompt $" { fail "print buf\[3\]" }
	    default { fail "print buf\[3\]" }
	}

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==$y] then { pass $testname } else { fail "$testname (only triggered $x watchpoints, expected $y)"}

	# Continue until we hit the finishing marker function.
	# Make sure we hit no more watchpoints.
	gdb_test "cont" "Continuing.*Breakpoint.*marker4 \\(\\).*" \
	    "continue to marker4"

	# Disable everything so we can finish the program at full speed
	gdb_test "disable" "" "disable in test_watchpoint_triggered_in_syscall"

        if $noresults==1 then { return }

	gdb_test "cont" "Continuing.*Program exited normally.*" \
	    "continue to exit in test_watchpoint_triggered_in_syscall"
    }
}

# Do a simple test of of watching through a pointer when the pointer
# itself changes.  Should add some more complicated stuff here.

proc test_complex_watchpoint {} {
    global prompt
    global noresults

    if [runto marker4] then {
	gdb_test "watch ptr1->val" ".*\[Ww\]atchpoint \[0-9\]*: ptr1->val"
	gdb_test "break marker5" ".*Breakpoint.*"

	gdb_test "cont" "Continuing.*\[Ww\]atchpoint.*ptr1->val.*Old value = 1.*New value = 2.*" "Test complex watchpoint"

	# Continue until we hit the marker5 function.
	# Make sure we hit no more watchpoints.

	gdb_test "cont" "Continuing.*Breakpoint.*marker5 \\(\\).*" \
	    "did not trigger wrong watchpoint"

	# Disable everything so we can finish the program at full speed
	gdb_test "disable" "" "disable in test_complex_watchpoint"

        if $noresults==1 then { return }

	gdb_test "cont" "Continuing.*Program exited normally.*" \
	    "continue to exit in test_complex_watchpoint"
    }
}

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load $binfile

if [initialize] then {

    test_simple_watchpoint

    # The IDT/sim monitor only has 8 (!) open files, of which it uses
    # 4 (!).  So we have to make sure one program exits before
    # starting another one.
    if [istarget "mips-idt-*"] then {
	gdb_exit
	gdb_start
	gdb_reinitialize_dir $srcdir/$subdir
	gdb_load $binfile
	initialize
    }

    test_disabling_watchpoints

    # See above.
    if [istarget "mips-idt-*"] then {
	gdb_exit
	gdb_start
	gdb_reinitialize_dir $srcdir/$subdir
	gdb_load $binfile
	initialize
    }

    test_stepping

    # See above.
    if [istarget "mips-idt-*"] then {
	gdb_exit
	gdb_start
	gdb_reinitialize_dir $srcdir/$subdir
	gdb_load $binfile
	initialize
    }

    # Only enabled for some targets merely because it has not been tested 
    # elsewhere.
    # On sparc-sun-sunos4.1.3, GDB was running all the way to the marker4 
    # breakpoint before stopping for the watchpoint.  I don't know why.
    if {[istarget "hppa*-*-*"]} then {
	test_watchpoint_triggered_in_syscall
    }

    # See above.
    if [istarget "mips-idt-*"] then {
	gdb_exit
	gdb_start
	gdb_reinitialize_dir $srcdir/$subdir
	gdb_load $binfile
	initialize
    }

    # Only enabled for some targets merely because it has not been tested 
    # elsewhere.
    if {[istarget "hppa*-*-*"] || [istarget "sparc*-*-sunos*"]} then {
	test_complex_watchpoint
    }
}
