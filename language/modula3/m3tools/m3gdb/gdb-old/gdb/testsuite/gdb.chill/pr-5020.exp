# Copyright (C) 1992, 1994 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@prep.ai.mit.edu

# This file was written by Per Bothner. (bothner@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

if [skip_chill_tests] then { continue }

set testfile "pr-5020"
set srcfile ${srcdir}/$subdir/${testfile}.ch
set binfile ${objdir}/${subdir}/${testfile}.exe
if  { [compile "${srcfile} -g -o ${binfile} ${CHILL_RT0} ${CHILL_LIB}"] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

proc do_tests {} {
    global prms_id bug_id subdir objdir srcdir binfile prompt

    set prms_id 0
    set bug_id 0

    # Start with a fresh gdb.

    gdb_exit
    gdb_start
    gdb_reinitialize_dir $srcdir/$subdir
    gdb_load $binfile

    send "set language chill\n" ; expect -re "$prompt $"

    # This is needed (at least on SunOS4) to make sure the
    # the symbol table is read.
    send "break chillvars.ch:3\n" ; expect -re "$prompt $"
    send "delete 1\n" ; expect -re "$prompt $"

    send "set width 0\n" ; expect -re "$prompt $"
    send "set print sevenbit-strings\n" ; expect -re "$prompt $"
    send "set print address off\n" ; expect -re "$prompt $"

    test_pr_5020
}

proc test_pr_5020 {} {
    global prompt
    runto dummy_pr_5020
    gdb_test_exact "print y" \
	{= [('a'): [.l: 10, .b: TRUE], ('b'): [.l: 111, .b: FALSE]]}
    gdb_test_exact "print boolarr" \
	{= [(FALSE): [.l: 10, .b: TRUE], (TRUE): [.l: 111, .b: FALSE]]}
    gdb_test_exact "print intarr" \
	{= [(10): [.l: 10, .b: TRUE], (11): [.l: 111, .b: FALSE]]}
    gdb_test_exact "print setarr" \
	{= [(aa): [.l: 10, .b: TRUE], (bb): [.l: 111, .b: FALSE]]}
    send "set print pretty\n" ; expect -re "$prompt $"
    gdb_test_exact "print y" \
{= [('a'): [
    .l: 10, 
    .b: TRUE
  ], ('b'): [
    .l: 111, 
    .b: FALSE
  ]]} "print y pretty"
}

do_tests
