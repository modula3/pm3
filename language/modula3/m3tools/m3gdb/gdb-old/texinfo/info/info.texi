\input texinfo    @c -*-texinfo-*-
@comment %**start of header 
@setfilename info.info
@settitle Info 1.0
@comment %**end of header 

@ifinfo
@c This is a dir.info fragment to support semi-automated addition of
@c manuals to an info tree.
@format
START-INFO-DIR-ENTRY
* info: (info).                 Reading GNU online documentation.
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@iftex
@finalout
@end iftex

@ifinfo
This file describes how to use Info, 
the on-line, menu-driven GNU documentation system.

Copyright (C) 1989, 1992 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
@end ifinfo

@setchapternewpage odd
@titlepage
@sp 11
@center @titlefont{Info}
@sp 2
@center The
@sp 2
@center On-line, Menu-driven
@sp 2
@center GNU Documentation System

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1989, 1992, 1993 Free Software Foundation, Inc.
@sp 2

Published by the Free Software Foundation @*
675 Massachusetts Avenue, @*
Cambridge, MA 02139 USA @*

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
@end titlepage

@ifinfo
@node Top, Getting Started, (dir), (dir)
@top Info: An Introduction

Info is a program for reading documentation, which you are using now.

To learn how to use Info, type the command @kbd{h}.  It brings you
to a programmed instruction sequence.

@c Need to make sure that `Info-help' goes to the right node, 
@c which is the first node of the first chapter. (It should.) 
@c   (Info-find-node "info"
@c 		  (if (< (window-height) 23)
@c 		      "Help-Small-Screen"
@c 		    "Help")))

To learn advanced Info commands, type @kbd{n} twice.  This brings you to
@cite{Info for Experts}, skipping over the `Getting Started' chapter.
@end ifinfo

@menu
* Getting Started::             Getting started using an Info reader.
* Advanced Info::               Advanced commands within Info.
* Create an Info File::         How to make your own Info file.
* The Standalone Info Program: (info-stnd.info).
@end menu

@node Getting Started, Advanced Info, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Getting Started

This first part of the Info manual describes how to get around inside
of Info.  The second part of the manual describes various advanced
Info commands, and how to write an Info as distinct from a Texinfo
file.  The third part is about how to generate Info files from 
Texinfo files.

@iftex
This manual is primarily designed for use on a computer, so that you can
try Info commands while reading about them.  Reading it on paper is less
effective, since you must take it on faith that the commands described
really do what the manual says.  By all means go through this manual now
that you have it; but please try going through the on-line version as
well.  

There are two ways of looking at the online version of this manual:

@enumerate
@item
Type @code{info} at your shell's command line.  This approach uses a
small stand-alone program designed just to read Info files.

@item
Type @code{emacs} at the command line; then type @kbd{C-h i} (Control
@kbd{h}, followed by @kbd{i}).  This approach uses the Info mode of the
Emacs program, an editor with many other capabilities.
@end enumerate

In either case, then type @kbd{mInfo} (just the letters), followed by
@key{RET}---the ``Return'' or ``Enter'' key.  At this point, you should
be ready to follow the instructions in this manual as you read them on
the screen.
@c FIXME! (pesch@cygnus.com, 14 dec 1992)
@c Is it worth worrying about what-if the beginner goes to somebody
@c else's Emacs session, which already has an Info running in the middle
@c of something---in which case these simple instructions won't work?
@end iftex

@menu
* Help-Small-Screen::   Starting Info on a Small Screen
* Help::                How to use Info
* Help-P::              Returning to the Previous node
* Help-^L::             The Space, Rubout, B and ^L commands.
* Help-M::              Menus
* Help-Adv::            Some advanced Info commands
* Help-Q::              Quitting Info
@end menu

@node Help-Small-Screen, Help,  , Getting Started
@comment  node-name,  next,  previous,  up
@section Starting Info on a Small Screen

@iftex
(In Info, you only see this section if your terminal has a small
number of lines; most readers pass by it without seeing it.)
@end iftex

Since your terminal has an unusually small number of lines on its
screen, it is necessary to give you special advice at the beginning.

If you see the text @samp{--All----} at near the bottom right corner
of the screen, it means the entire text you are looking at fits on the
screen.  If you see @samp{--Top----} instead, it means that there is
more text below that does not fit.  To move forward through the text
and see another screen full, press the Space bar, @key{SPC}.  To move
back up, press the key labeled @samp{Backspace} or @key{Delete}.

@ifinfo
Here are 40 lines of junk, so you can try Spaces and Deletes and
see what they do.  At the end are instructions of what you should do
next.

This is line 17 @*
This is line 18 @*
This is line 19 @*
This is line 20 @*
This is line 21 @*
This is line 22 @*
This is line 23 @*
This is line 24 @*
This is line 25 @*
This is line 26 @*
This is line 27 @*
This is line 28 @*
This is line 29 @*
This is line 30 @*
This is line 31 @*
This is line 32 @*
This is line 33 @*
This is line 34 @*
This is line 35 @*
This is line 36 @*
This is line 37 @*
This is line 38 @*
This is line 39 @*
This is line 40 @*
This is line 41 @*
This is line 42 @*
This is line 43 @*
This is line 44 @*
This is line 45 @*
This is line 46 @*
This is line 47 @*
This is line 48 @*
This is line 49 @*
This is line 50 @*
This is line 51 @*
This is line 52 @*
This is line 53 @*
This is line 54 @*
This is line 55 @*
This is line 56 @*

If you have managed to get here, go back to the beginning with
Delete, and come back here again, then you understand Space and
Delete.  So now type an @kbd{n} ---just one character; don't type
the quotes and don't type the Return key afterward--- to
get to the normal start of the course.
@end ifinfo

@node Help, Help-P, Help-Small-Screen, Getting Started
@comment  node-name,  next,  previous,  up
@section How to use Info

You are talking to the program Info, for reading documentation.

  Right now you are looking at one @dfn{Node} of Information.
A node contains text describing a specific topic at a specific
level of detail.  This node's topic is ``how to use Info''.

  The top line of a node is its @dfn{header}.  This node's header (look at
it now) says that it is the node named @samp{Help} in the file
@file{info}.  It says that the @samp{Next} node after this one is the node
called @samp{Help-P}.  An advanced Info command lets you go to any node
whose name you know.

  Besides a @samp{Next}, a node can have a @samp{Previous} or an @samp{Up}.
This node has a @samp{Previous} but no @samp{Up}, as you can see.

  Now it is time to move on to the @samp{Next} node, named @samp{Help-P}.

>> Type @samp{n} to move there.  Type just one character;
   do not type the quotes and do not type a @key{RET} afterward.

@samp{>>} in the margin means it is really time to try a command.

@node Help-P, Help-^L, Help, Getting Started
@comment  node-name,  next,  previous,  up
@section Returning to the Previous node

This node is called @samp{Help-P}.  The @samp{Previous} node, as you see,
is @samp{Help}, which is the one you just came from using the @kbd{n}
command.  Another @kbd{n} command now would take you to the next
node, @samp{Help-^L}.

>> But do not do that yet.  First, try the @kbd{p} command, which takes
   you to the @samp{Previous} node.  When you get there, you can do an
   @kbd{n} again to return here.

  This all probably seems insultingly simple so far, but @emph{do not} be
led into skimming.  Things will get more complicated soon.  Also,
do not try a new command until you are told it is time to.  Otherwise,
you may make Info skip past an important warning that was coming up.

>> Now do an @kbd{n} to get to the node @samp{Help-^L} and learn more.

@node Help-^L, Help-M, Help-P, Getting Started
@comment  node-name,  next,  previous,  up
@section The Space, Delete, B and ^L commands.

  This node's header tells you that you are now at node @samp{Help-^L}, and
that @kbd{p} would get you back to @samp{Help-P}.  The node's title is
underlined; it says what the node is about (most nodes have titles).

  This is a big node and it does not all fit on your display screen.
You can tell that there is more that is not visible because you
can see the string @samp{--Top-----} rather than @samp{--All----} near
the bottom right corner of the screen.

  The Space, Delete and @kbd{B} commands exist to allow you to ``move
around'' in a node that does not all fit on the screen at once.
Space moves forward, to show what was below the bottom of the screen.
Delete moves backward, to show what was above the top of the screen
(there is not anything above the top until you have typed some spaces).

>> Now try typing a Space (afterward, type a Delete to return here).

  When you type the space, the two lines that were at the bottom of
the screen appear at the top, followed by more lines.  Delete takes
the two lines from the top and moves them to the bottom,
@emph{usually}, but if there are not a full screen's worth of lines
above them they may not make it all the way to the bottom.

  If you type Space when there is no more to see, it rings the
bell and otherwise does nothing.  The same goes for Delete when
the header of the node is visible.

  If your screen is ever garbaged, you can tell Info to print it out
again by typing @kbd{C-l} (@kbd{Control-L}, that is---hold down ``Control'' and
type an @key{L} or @kbd{l}).

>> Type @kbd{C-l} now.

  To move back to the beginning of the node you are on, you can type
a lot of Deletes.  You can also type simply @kbd{b} for beginning.
>> Try that now.  (We have put in enough verbiage to push this past
the first screenful, but screens are so big nowadays that perhaps it
isn't enough.  You may need to shrink your Emacs or Info window.)
Then come back, with Spaces.

  If your screen is very tall, all of this node might fit at once.
In that case, "b" won't do anything.  Sorry; what can we do?

  You have just learned a considerable number of commands.  If you
want to use one but have trouble remembering which, you should type
a @key{?} which prints out a brief list of commands.  When you are
finished looking at the list, make it go away by typing a @key{SPC}.

>> Type a @key{?} now.  After it finishes, type a @key{SPC}.

  (If you are using the standalone Info reader, type `l' to return here.)

  From now on, you will encounter large nodes without warning, and
will be expected to know how to use Space and Delete to move
around in them without being told.  Since not all terminals have
the same size screen, it would be impossible to warn you anyway.

>> Now type @kbd{n} to see the description of the @kbd{m} command.

@node Help-M, Help-Adv, Help-^L, Getting Started
@comment  node-name,  next,  previous,  up
@section Menus

Menus and the @kbd{m} command

  With only the @kbd{n} and @kbd{p} commands for moving between nodes, nodes
are restricted to a linear sequence.  Menus allow a branching
structure.  A menu is a list of other nodes you can move to.  It is
actually just part of the text of the node formatted specially so that
Info can interpret it.  The beginning of a menu is always identified
by a line which starts with @samp{* Menu:}.  A node contains a menu if and
only if it has a line in it which starts that way.  The only menu you
can use at any moment is the one in the node you are in.  To use a
menu in any other node, you must move to that node first. 

  After the start of the menu, each line that starts with a @samp{*}
identifies one subtopic.  The line usually contains a brief name
for the subtopic (followed by a @samp{:}), the name of the node that talks
about that subtopic, and optionally some further description of the
subtopic.  Lines in the menu that do not start with a @samp{*} have no
special meaning---they are only for the human reader's benefit and do
not define additional subtopics.  Here is an example:

@example
* Foo:  FOO's Node      This tells about FOO
@end example

The subtopic name is Foo, and the node describing it is @samp{FOO's Node}.
The rest of the line is just for the reader's Information.
[[ But this line is not a real menu item, simply because there is
no line above it which starts with @samp{* Menu:}.]]

  When you use a menu to go to another node (in a way that will be
described soon), what you specify is the subtopic name, the first
thing in the menu line.  Info uses it to find the menu line, extracts
the node name from it, and goes to that node.  The reason that there
is both a subtopic name and a node name is that the node name must be
meaningful to the computer and may therefore have to be ugly looking.
The subtopic name can be chosen just to be convenient for the user to
specify.  Often the node name is convenient for the user to specify
and so both it and the subtopic name are the same.  There is an
abbreviation for this:

@example
* Foo::   This tells about FOO
@end example

@noindent
This means that the subtopic name and node name are the same; they are
both @samp{Foo}.

>> Now use Spaces to find the menu in this node, then come back to
   the front with a @kbd{b} and some Spaces.  As you see, a menu is
   actually visible in its node.  If you cannot find a menu in a node
   by looking at it, then the node does not have a menu and the
   @kbd{m} command is not available.

  The command to go to one of the subnodes is @kbd{m}---but @emph{do
not do it yet!}  Before you use @kbd{m}, you must understand the
difference between commands and arguments.  So far, you have learned
several commands that do not need arguments.  When you type one, Info
processes it and is instantly ready for another command.  The @kbd{m}
command is different: it is incomplete without the @dfn{name of the
subtopic}.  Once you have typed @kbd{m}, Info tries to read the
subtopic name.

  Now look for the line containing many dashes near the bottom of the
screen.  There is one more line beneath that one, but usually it is
blank.  If it is empty, Info is ready for a command, such as @kbd{n}
or @kbd{b} or Space or @kbd{m}.  If that line contains text ending
in a colon, it mean Info is trying to read the @dfn{argument} to a
command.  At such times, commands do not work, because Info tries to
use them as the argument.  You must either type the argument and
finish the command you started, or type @kbd{Control-g} to cancel the
command.  When you have done one of those things, the line becomes
blank again.

  The command to go to a subnode via a menu is @kbd{m}.  After you type
the @kbd{m}, the line at the bottom of the screen says @samp{Menu item: }.
You must then type the name of the subtopic you want, and end it with
a @key{RET}.

  You can abbreviate the subtopic name.  If the abbreviation is not
unique, the first matching subtopic is chosen.  Some menus put
the shortest possible abbreviation for each subtopic name in capital
letters, so you can see how much you need to type.  It does not
matter whether you use upper case or lower case when you type the
subtopic.  You should not put any spaces at the end, or inside of the
item name, except for one space where a space appears in the item in
the menu.

  You can also use the @dfn{completion} feature to help enter the subtopic
name.  If you type the Tab key after entering part of a name, it will
magically fill in more of the name---as much as follows uniquely from
what you have entered.

  If you move the cursor to one of the menu subtopic lines, then you do
not need to type the argument: you just type a Return, and it stands for
the subtopic of the line you are on.

Here is a menu to give you a chance to practice.

* Menu:	   The menu starts here.

This menu gives you three ways of going to one place, Help-FOO.

* Foo:  Help-FOO.       A node you can visit for fun.@*
* Bar:  Help-FOO.       Strange!  two ways to get to the same place.@*
* Help-FOO::            And yet another!@*


>>  Now type just an @kbd{m} and see what happens:

  Now you are ``inside'' an @kbd{m} command.  Commands cannot be used
now; the next thing you will type must be the name of a subtopic.

  You can change your mind about doing the @kbd{m} by typing Control-g.

>> Try that now;  notice the bottom line clear.

>> Then type another @kbd{m}.

>> Now type @samp{BAR} item name.  Do not type Return yet.

  While you are typing the item name, you can use the Delete key to
cancel one character at a time if you make a mistake.

>> Type one to cancel the @samp{R}.  You could type another @samp{R} to
   replace it.  You do not have to, since @samp{BA} is a valid abbreviation.

>> Now you are ready to go.  Type a @key{RET}.

  After visiting Help-FOO, you should return here.

>> Type @kbd{n} to see more commands.

@c If a menu appears at the end of this node, remove it.
@c It is an accident of the menu updating command.

Here is another way to get to  Help-FOO, a menu.  You can ignore this
if you want, or else try it (but then please come back to here).

@menu
* Help-FOO::
@end menu

@node Help-FOO,  ,  , Help-M
@comment  node-name,  next,  previous,  up
@subsection The @kbd{u} command

  Congratulations!  This is the node @samp{Help-FOO}.  Unlike the other
nodes you have seen, this one has an @samp{Up}: @samp{Help-M}, the node you
just came from via the @kbd{m} command.  This is the usual
convention---the nodes you reach from a menu have @samp{Up} nodes that lead
back to the menu.  Menus move Down in the tree, and @samp{Up} moves Up.
@samp{Previous}, on the other hand, is usually used to ``stay on the same
level but go backwards''

  You can go back to the node @samp{Help-M} by typing the command
@kbd{u} for ``Up''.  That puts you at the @emph{front} of the
node---to get back to where you were reading you have to type
some @key{SPC}s.

>> Now type @kbd{u} to move back up to @samp{Help-M}.

@node Help-Adv, Help-Q, Help-M, Getting Started
@comment  node-name,  next,  previous,  up
@section Some advanced Info commands

  The course is almost over, so please stick with it to the end.

  If you have been moving around to different nodes and wish to
retrace your steps, the @kbd{l} command (@kbd{l} for @dfn{last}) will
do that, one node-step at a time.  As you move from node to node, Info
records the nodes where you have been in a special history list.  The
@kbd{l} command revisits nodes in the history list; each successive
@kbd{l} command moves one step back through the history.

  If you have been following directions, ad @kbd{l} command now will get
you back to @samp{Help-M}.  Another @kbd{l} command would undo the
@kbd{u} and get you back to @samp{Help-FOO}.  Another @kbd{l} would undo
the @kbd{m} and get you back to @samp{Help-M}.

>> Try typing three @kbd{l}'s, pausing in between to see what each
    @kbd{l} does.

Then follow directions again and you will end up back here.

  Note the difference between @kbd{l} and @kbd{p}: @kbd{l} moves to
where @emph{you} last were, whereas @kbd{p} always moves to the node
which the header says is the @samp{Previous} node (from this node, to
@samp{Help-M}).

  The @samp{d} command gets you instantly to the Directory node.
This node, which is the first one you saw when you entered Info,
has a menu which leads (directly, or indirectly through other menus),
to all the nodes that exist.

>> Try doing a @samp{d}, then do an @kbd{l} to return here (yes,
   @emph{do} return).

  Sometimes, in Info documentation, you will see a cross reference.
Cross references look like this: @xref{Help-Cross, Cross}.  That is a
real, live cross reference which is named @samp{Cross} and points at
the node named @samp{Help-Cross}.

  If you wish to follow a cross reference, you must use the @samp{f}
command.  The @samp{f} must be followed by the cross reference name
(in this case, @samp{Cross}).  While you enter the name, you can use the
Delete key to edit your input.  If you change your mind about following
any reference, you can use @kbd{Control-g} to cancel the command.

  Completion is available in the @samp{f} command; you can complete among
all the cross reference names in the current node by typing a Tab.

>> Type @samp{f}, followed by @samp{Cross}, and a @key{RET}.

  To get a list of all the cross references in the current node, you can
type @kbd{?} after an @samp{f}.  The @samp{f} continues to await a
cross reference name even after printing the list, so if you don't
actually want to follow a reference, you should type a @kbd{Control-g}
to cancel the @samp{f}.

>> Type "f?" to get a list of the cross references in this node.  Then
   type a @kbd{Control-g} and see how the @samp{f} gives up.

>> Now type @kbd{n} to see the last node of the course.

@c If a menu appears at the end of this node, remove it.
@c It is an accident of the menu updating command.

@node Help-Cross,  ,  , Help-Adv
@comment  node-name,  next,  previous,  up
@unnumberedsubsec The node reached by the cross reference in Info

  This is the node reached by the cross reference named @samp{Cross}.

  While this node is specifically intended to be reached by a cross
reference, most cross references lead to nodes that ``belong''
someplace else far away in the structure of Info.  So you cannot expect
the footnote to have a @samp{Next}, @samp{Previous} or @samp{Up} pointing back to
where you came from.  In general, the @kbd{l} (el) command is the only
way to get back there.

>> Type @kbd{l} to return to the node where the cross reference was.

@node Help-Q,  , Help-Adv, Getting Started
@comment  node-name,  next,  previous,  up
@section Quitting Info

  To get out of Info, back to what you were doing before, type @kbd{q}
for @dfn{Quit}.

  This is the end of the course on using Info.  There are some other
commands that are meant for experienced users; they are useful, and you
can find them by looking in the directory node for documentation on
Info.  Finding them will be a good exercise in using Info in the usual
manner.

>> Type @samp{d} to go to the Info directory node; then type
   @samp{mInfo} and Return, to get to the node about Info and
   see what other help is available.

@node Advanced Info, Create an Info File, Getting Started, Top
@comment  node-name,  next,  previous,  up
@chapter Info for Experts

This chapter describes various advanced Info commands, and how to write
an Info as distinct from a Texinfo file.  (However, in most cases, writing a
Texinfo file is better, since you can use it @emph{both} to generate an
Info file and to make a printed manual.  @xref{Top,, Overview of
Texinfo, texinfo, Texinfo: The GNU Documentation Format}.)

@menu
* Expert::               Advanced Info commands: g, s, e, and 1 - 5.
* Add::                  Describes how to add new nodes to the hierarchy.
                           Also tells what nodes look like.
* Menus::                How to add to or create menus in Info nodes.
* Cross-refs::           How to add cross-references to Info nodes.
* Tags::                 How to make tag tables for Info files.
* Checking::             Checking an Info File
* Emacs Info Variables:: Variables modifying the behavior of Emacs Info.
@end menu

@node Expert, Add,  , Advanced Info
@comment  node-name,  next,  previous,  up
@section Advanced Info Commands

@kbd{g}, @kbd{s}, @kbd{1}, -- @kbd{9}, and @kbd{e}

If you know a node's name, you can go there by typing @kbd{g}, the
name, and @key{RET}.  Thus, @kbd{gTop@key{RET}} would go to the node
called @samp{Top} in this file (its directory node).
@kbd{gExpert@key{RET}} would come back here.

Unlike @kbd{m}, @kbd{g} does not allow the use of abbreviations.

To go to a node in another file, you can include the filename in the
node name by putting it at the front, in parentheses.  Thus,
@kbd{g(dir)Top@key{RET}} would go to the Info Directory node, which is
node @samp{Top} in the file @file{dir}.

The node name @samp{*} specifies the whole file.  So you can look at
all of the current file by typing @kbd{g*@key{RET}} or all of any
other file with @kbd{g(FILENAME)@key{RET}}.

The @kbd{s} command allows you to search a whole file for a string.
It switches to the next node if and when that is necessary.  You
type @kbd{s} followed by the string to search for, terminated by
@key{RET}.  To search for the same string again, just @kbd{s} followed
by @key{RET} will do.  The file's nodes are scanned in the order
they are in in the file, which has no necessary relationship to the
order that they may be in in the tree structure of menus and @samp{next} pointers.
But normally the two orders are not very different.  In any case,
you can always do a @kbd{b} to find out what node you have reached, if
the header is not visible (this can happen, because @kbd{s} puts your
cursor at the occurrence of the string, not at the beginning of the
node).

If you grudge the system each character of type-in it requires, you
might like to use the commands @kbd{1}, @kbd{2}, @kbd{3}, @kbd{4}, ...
@kbd{9}.  They are short for the @kbd{m} command together with an
argument.  @kbd{1} goes through the first item in the current node's
menu; @kbd{2} goes through the second item, etc.

If you display supports multiple fonts, and you are using Emacs' Info
mode to read Info files, the @samp{*} for the fifth menu item is
underlines, and so is the @samp{*} for the ninth item; these underlines
make it easy to see at a glance which number to use for an item.

On ordinary terminals, you won't have underlining.  If you need to
actually count items, it is better to use @kbd{m} instead, and specify
the name.

The Info command @kbd{e} changes from Info mode to an ordinary
Emacs editing mode, so that you can edit the text of the current node.
Type @kbd{C-c C-c} to switch back to Info.  The @kbd{e} command is allowed
only if the variable @code{Info-enable-edit} is non-@code{nil}.

@node Add, Menus, Expert, Advanced Info
@comment  node-name,  next,  previous,  up
@section Adding a new node to Info

To add a new topic to the list in the Info directory, you must:
@enumerate
@item
Create some nodes, in some file, to document that topic.
@item
Put that topic in the menu in the directory.  @xref{Menus, Menu}.
@end enumerate

Usually, the way to create the nodes is with Texinfo @pxref{Top,, Overview of
Texinfo, texinfo, Texinfo: The GNU Documentation Format}); this has the
advantage that you can also make a printed manual from them.  However,
if hyou want to edit an Info file, here is how.

  The new node can live in an existing documentation file, or in a new
one.  It must have a @key{^_} character before it (invisible to the
user; this node has one but you cannot see it), and it ends with either
a @key{^_}, a @key{^L}, or the end of file.  Note: If you put in a
@key{^L} to end a new node, be sure that there is a @key{^_} after it
to start the next one, since @key{^L} cannot @emph{start} a node.
Also, a nicer way to make a node boundary be a page boundary as well
is to put a @key{^L} @emph{right after} the @key{^_}.

  The @key{^_} starting a node must be followed by a newline or a
@key{^L} newline, after which comes the node's header line.  The
header line must give the node's name (by which Info finds it),
and state the names of the @samp{Next}, @samp{Previous}, and @samp{Up} nodes (if
there are any).  As you can see, this node's @samp{Up} node is the node
@samp{Top}, which points at all the documentation for Info.  The @samp{Next}
node is @samp{Menus}.

  The keywords @dfn{Node}, @dfn{Previous}, @dfn{Up}, and @dfn{Next},
may appear in any order, anywhere in the header line, but the
recommended order is the one in this sentence.  Each keyword must be
followed by a colon, spaces and tabs, and then the appropriate name.
The name may be terminated with a tab, a comma, or a newline.  A space
does not end it; node names may contain spaces.  The case of letters
in the names is insignificant.

  A node name has two forms.  A node in the current file is named by
what appears after the @samp{Node: } in that node's first line.  For
example, this node's name is @samp{Add}.  A node in another file is
named by @samp{(@var{filename})@var{node-within-file}}, as in
@samp{(info)Add} for this node.  If the file name starts with ``./'',
then it is relative to the current directory; otherwise, it is relative
starting from the standard Info file directory of your site.
The name @samp{(@var{filename})Top} can be abbreviated to just
@samp{(@var{filename})}.  By convention, the name @samp{Top} is used for
the ``highest'' node in any single file---the node whose @samp{Up} points
out of the file.  The Directory node is @file{(dir)}.  The @samp{Top} node
of a document file listed in the Directory should have an @samp{Up:
(dir)} in it.

  The node name @kbd{*} is special: it refers to the entire file.
Thus, @kbd{g*} shows you the whole current file.  The use of the
node @kbd{*} is to make it possible to make old-fashioned,
unstructured files into nodes of the tree.

  The @samp{Node:} name, in which a node states its own name, must not
contain a filename, since Info when searching for a node does not
expect one to be there.  The @samp{Next}, @samp{Previous} and @samp{Up} names may
contain them.  In this node, since the @samp{Up} node is in the same file,
it was not necessary to use one.

  Note that the nodes in this file have a file name in the header
line.  The file names are ignored by Info, but they serve as comments
to help identify the node for the user.

@node Menus, Cross-refs, Add, Advanced Info
@comment  node-name,  next,  previous,  up
@section How to Create Menus

  Any node in the Info hierarchy may have a @dfn{menu}---a list of subnodes. 
The @kbd{m} command searches the current node's menu for the topic which it
reads from the terminal.

  A menu begins with a line starting with @samp{* Menu:}.  The rest of the
line is a comment.  After the starting line, every line that begins
with a @samp{* } lists a single topic.  The name of the topic--the
argument that the user must give to the @kbd{m} command to select this
topic---comes right after the star and space, and is followed by a
colon, spaces and tabs, and the name of the node which discusses that
topic.  The node name, like node names following @samp{Next}, @samp{Previous}
and @samp{Up}, may be terminated with a tab, comma, or newline; it may also
be terminated with a period.

  If the node name and topic name are the same, then rather than
giving the name twice, the abbreviation @samp{* NAME::} may be used
(and should be used, whenever possible, as it reduces the visual
clutter in the menu).

  It is considerate to choose the topic names so that they differ
from each other very near the beginning---this allows the user to type
short abbreviations.  In a long menu, it is a good idea to capitalize
the beginning of each item name which is the minimum acceptable
abbreviation for it (a long menu is more than 5 or so entries).

  The nodes listed in a node's menu are called its ``subnodes'', and
it is their ``superior''.  They should each have an @samp{Up:} pointing at
the superior.  It is often useful to arrange all or most of the
subnodes in a sequence of @samp{Next} and @samp{Previous} pointers so that someone who
wants to see them all need not keep revisiting the Menu.

  The Info Directory is simply the menu of the node @samp{(dir)Top}---that
is, node @samp{Top} in file @file{.../info/dir}.  You can put new entries
in that menu just like any other menu.  The Info Directory is @emph{not} the
same as the file directory called @file{info}.  It happens that many of
Info's files live on that file directory, but they do not have to; and
files on that directory are not automatically listed in the Info
Directory node.

  Also, although the Info node graph is claimed to be a ``hierarchy'',
in fact it can be @emph{any} directed graph.  Shared structures and
pointer cycles are perfectly possible, and can be used if they are
appropriate to the meaning to be expressed.  There is no need for all
the nodes in a file to form a connected structure.  In fact, this file
has two connected components.  You are in one of them, which is under
the node @samp{Top}; the other contains the node @samp{Help} which the
@kbd{h} command goes to.  In fact, since there is no garbage
collector, nothing terrible happens if a substructure is not pointed
to, but such a substructure is rather useless since nobody can
ever find out that it exists.

@node Cross-refs, Tags, Menus, Advanced Info
@comment  node-name,  next,  previous,  up
@section Creating Cross References

  A cross reference can be placed anywhere in the text, unlike a menu
item which must go at the front of a line.  A cross reference looks
like a menu item except that it has @samp{*note} instead of @kbd{*}.
It @emph{cannot} be terminated by a @samp{)}, because @samp{)}'s are
so often part of node names.  If you wish to enclose a cross reference
in parentheses, terminate it with a period first.  Here are two
examples of cross references pointers:

@example
*Note details: commands.  (See *note 3: Full Proof.)
@end example

They are just examples.  The places they ``lead to'' do not really exist!

@node Tags, Checking, Cross-refs, Advanced Info
@comment  node-name,  next,  previous,  up
@section Tag Tables for Info Files

  You can speed up the access to nodes of a large Info file by giving
it a tag table.  Unlike the tag table for a program, the tag table for
an Info file lives inside the file itself and is used 
automatically whenever Info reads in the file.

  To make a tag table, go to a node in the file using Emacs Info mode and type
@kbd{M-x Info-tagify}.  Then you must use @kbd{C-x C-s} to save the
file.

  Once the Info file has a tag table, you must make certain it is up
to date.  If, as a result of deletion of text, any node moves back
more than a thousand characters in the file from the position
recorded in the tag table, Info will no longer be able to find that
node.  To update the tag table, use the @code{Info-tagify} command again.

  An Info file tag table appears at the end of the file and looks like
this:

@example
^_
Tag Table:
File: info, Node: Cross-refs^?21419
File: info,  Node: Tags^?22145
^_
End Tag Table
@end example

@noindent
Note that it contains one line per node, and this line contains
the beginning of the node's header (ending just after the node name),
a Delete character, and the character position in the file of the
beginning of the node.

@node Checking, Emacs Info Variables, Tags, Advanced Info
@comment  node-name,  next,  previous,  up
@section Checking an Info File

  When creating an Info file, it is easy to forget the name of a node
when you are making a pointer to it from another node.  If you put in
the wrong name for a node, this is not detected until someone
tries to go through the pointer using Info.  Verification of the Info
file is an automatic process which checks all pointers to nodes and
reports any pointers which are invalid.  Every @samp{Next}, @samp{Previous}, and
@samp{Up} is checked, as is every menu item and every cross reference.  In
addition, any @samp{Next} which does not have a @samp{Previous} pointing back is
reported.  Only pointers within the file are checked, because checking
pointers to other files would be terribly slow.  But those are usually
few.

  To check an Info file, do @kbd{M-x Info-validate} while looking at
any node of the file with Emacs Info mode.

@node Emacs Info Variables, , Checking, Advanced Info
@section Emacs Info-mode Variables

The following variables may modify the behaviour of Info-mode in Emacs;
you may wish to set one or several of these variables interactively, or
in your @file{~/.emacs} init file.  @xref{Examining, Examining and Setting
Variables, Examining and Setting Variables, emacs, The GNU Emacs
Manual}.

@table @code
@item Info-enable-edit
Set to @code{nil}, disables the @samp{e} (@code{Info-edit}) command.  A
non-@code{nil} value enables it.  @xref{Add, Edit}.

@item Info-enable-active-nodes
When set to a non-@code{nil} value, allows Info to execute Lisp code
associated with nodes.  The Lisp code is executed when the node is
selected.

@item Info-directory-list
The list of directories to search for Info files.  Each element is a
string (directory name) or @code{nil} (try default directory).

@item Info-directory
The standard directory for Info documentation files.  Only used when the
function @code{Info-directory} is called.
@end table

@node Create an Info File,  , Advanced Info, Top
@comment  node-name,  next,  previous,  up
@chapter Creating an Info File from a Makeinfo file

@code{makeinfo} is a utility that converts a Texinfo file into an Info
file; @code{texinfo-format-region} and @code{texinfo-format-buffer} are
GNU Emacs functions that do the same.

@xref{Create an Info File, , Creating an Info File, texinfo, the Texinfo
Manual}, to learn how to create an Info file from a Texinfo file.

@xref{Top,, Overview of Texinfo, texinfo, Texinfo: The GNU Documentation
Format}, to learn how to write a Texinfo file.

@bye
