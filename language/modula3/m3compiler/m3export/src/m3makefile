%
% Some utility procedures
%

NOEXEC = lookup("NOEXEC","")

FIRST_STEP = lookup("FIRST_STEP","")
LAST_STEP = lookup("LAST_STEP","")

if FIRST_STEP doStep = ""
else doStep = "T"
end

readonly proc DoStep(nm) is
  if equal(nm,FIRST_STEP) doStep = "T" end
  if equal(nm,LAST_STEP) doStep = "" end

  if doStep write(CR,"Start Step ",nm,CR,CR)
  else write(CR,"Skip Step ",nm,CR,CR)
  end

  return doStep
end

readonly proc CheckErrors(file) is
  %Exec(["grep","[Ee][Rr][Rr][Oo][Rr]:"
  write("Unimplemented check errors for ", file, CR)
end

readonly proc Exec(command,io,wd) is

  if VERBOSE 
    write("command: ", command, CR, "io: ", io, CR, "wd: ",wd, CR, CR)
  end

  if NOEXEC 
    return 0
  else
    return exec(command,io,wd)
  end
end
  
readonly proc CheckExec(command,io,wd,msg) is
  if VERBOSE
    write("command: ", command, CR, "io: ", io, CR, "wd: ", wd, CR,
        "msg: ", msg, CR, CR)
  end
  if not(NOEXEC)
    local ret = exec(command,io,wd)
    if not equal(ret,0) error(msg & "(returned " & ret & ")",CR) end
  end
end

readonly proc Version(timestamp,major,mid,minor,keep) is
  VERSION = [timestamp, major, mid, minor, keep]
end

readonly proc VersionNumber(v) is
  return v[1] & "." & v[2] & "." & v[3]
end

readonly proc VersionName(v) is
  return "pm3-" & VersionNumber(v)
end

readonly proc DiffName(v1,v2) is
  return "pm3-diffs-" & VersionNumber(v1) & "-" & VersionNumber(v2)
end

%
% Remove all temporary directories associated with a version
%

readonly proc CleanTmpDirs(v1Exists,v1,v2Exists,v2) is
  if v2Exists
    if v1Exists
      ret = Exec(["rm", EXPORT_TMP_SRC & "/" & DiffName(v1,v2)],[],"")
    end

    ret = Exec(["rm", "-r", EXPORT_TMP_TMP & "/" & VersionName(v2),
        EXPORT_TMP_SRC & "/" & VersionName(v2)],[],"")

    foreach platform in Platforms
      if Platforms{platform}[3] 
        ret = Exec(["rm", "-r", 
            EXPORT_TMP_BOOTSTRAP & "/" & platform & "/" & VersionName(v2),
            EXPORT_TMP_BINARIES & "/" & platform & "/" & VersionName(v2)],[],"")
      end
    end
  end
end

readonly proc BuildDirectories() is
  ret = Exec(["mkdir","-p",EXPORT_TMP_TMP],[],"")
  ret = Exec(["mkdir","-p",EXPORT_TMP_SRC],[],"")
  ret = Exec(["mkdir","-p",EXPORT_TMP_BOOTSTRAP],[],"")
  ret = Exec(["mkdir","-p",EXPORT_TMP_BINARIES],[],"")
  ret = Exec(["mkdir","-p",EXPORT_TMP_CROSS_COMPILERS],[],"")
  ret = Exec(["mkdir","-p",EXPORT_SRC],[],"")
  ret = Exec(["mkdir","-p",EXPORT_BOOTSTRAP],[],"")
  ret = Exec(["mkdir","-p",EXPORT_BINARIES],[],"")
  ret = Exec(["mkdir","-p",STORE_ROOT],[],"")
  ret = Exec(["mkdir","-p",STORE_VERSION],[],"")

  foreach platform in Platforms
    if Platforms{platform}[3] 
      ret = Exec(["mkdir",EXPORT_TMP_BOOTSTRAP & "/" & platform],[],"")
      ret = Exec(["mkdir",EXPORT_TMP_BINARIES & "/" & platform],[],"")
      ret = Exec(["mkdir",EXPORT_BOOTSTRAP & "/" & platform],[],"")
      ret = Exec(["mkdir",EXPORT_BINARIES & "/" & platform],[],"")
    end
  end
end

%
% Check if a previous, current and next version were defined.
%

readonly proc ReadVersionInfo() is
  local vdir = STORE_VERSION & SL

  if not stale(vdir & "PREVIOUSVERSION",vdir & "PREVIOUSVERSION")
    previousVersionExists = "T"
    include(vdir & "PREVIOUSVERSION")
    previousVersion = VERSION
  end

  if not stale(vdir & "CURRENTVERSION",vdir & "CURRENTVERSION")
    currentVersionExists = "T"
    include(vdir & "CURRENTVERSION")
    currentVersion = VERSION
  end

  if not stale(vdir & "NEXTVERSION",vdir & "NEXTVERSION")
    nextVersionExists = "T"
    include(vdir & "NEXTVERSION")
    version = VERSION
    versionName = VersionName(version)
  end
end

%
% Compute the diffs from the current version. No diffs, no new version
% required.
%

readonly proc BuildDiff() is
  if currentVersionExists
    local ret = Exec(["cvs","rdiff","-D",currentVersion[0],"-D",NOW,"m3/pm3"],
        ["", EXPORT_TMP_SRC & "/" & DiffName(currentVersion,version), ""],
        EXPORT_TMP_SRC)
    write("NOTE: cvs rdiff returned ",ret,CR)
    CheckExec(["grep","-q","[^ ]", EXPORT_TMP_SRC & "/" & 
        DiffName(currentVersion,version)], [], 
        EXPORT_TMP_SRC, "no new version required")
  end
end

%
% Export the source tree and add the README/Version information
%

readonly proc CVSExport() is
  CheckExec(["cvs","export","-D",NOW,"-d",versionName,"m3/pm3"],[],
      EXPORT_TMP_SRC,"cvs export failed")

  > EXPORT_TMP_SRC & "/" & versionName & "/" & "m3config/src/VERSION" in
    write("VERSION=\"", VersionNumber(version),"\"",CR,
          "VERSION_DATE=\"",NOW,"\"",CR)
  end

  > EXPORT_TMP_SRC & "/" & versionName & "/" & "README" in
    write(
"The Polytechnique Montreal Distribution of Modula-3",CR,
"",CR,
"pm3 version ", VersionNumber(version), " dated ", NOW,CR,
"",CR,
"This distribution is based on the DEC SRC Modula-3 release 3.6. Local",CR,
"enhancements by Louis Dubeau, Jerome Collin and myself (Michel Dagenais)",CR,
"were added, and several packages (libraries, programs, and documentation)",CR,
"from other sources were added as well. The online documentation may be",CR,
"accessed before the build by pointing your favourite WWW browser to",CR,
"intro/src/index.html.",CR,
"",CR,
"This file is normally part of a source code + bootstrap distribution.",CR,
"To compile the bootstrap program, and compile and install the Modula-3",CR,
"source, the following steps are required.",CR,
"",CR,
"- insure that you have the usual development tools (make, gcc, ar).",CR,
"",CR,
"- check, and modify if needed, the template for your platform. This",CR,
"  template determines where the Modula-3 programs, libraries and ",CR,
"  documentation will be installed and used, as well as default options",CR,
"  for various needed tools. Typically you only need to change the",CR,
"  INSTALL_ROOT variable if the default does not suit you.",CR,
"  The template is located in m3config/src/" & target & ".",CR,
"",CR,
"- The file src/m3makefile is used in the following steps to build all the",CR,
"  packages. By default, almost all the available packages are built.",CR,
"  You may comment out some of these in src/m3makefile to save build time",CR,
"  and disk space.",CR,
"",CR,
"- run \"make\", which will execute the commands in Makefile. It will",CR,
"  build bootstrap versions of \"m3build\" and \"m3ship\" and then use",CR, 
"  these programs to rebuild and install all the libraries and programs in",CR,
"  the distribution.",CR,
"",CR,
"  If you downloaded bootstraps for several platforms, the remaining ",CR,
"  Makefile is the last one you downloaded. In that case, you can use ",CR,
"  the correct platform specific Makefile as Makefile.PLATFORM ",CR,
"  (e.g. Makefile." & target & 
") and use it with \"make -f Makefile.PLATFORM\". ",CR,
"  Similarly the correct README is found as README.PLATFORM.",CR)
  end
end

%
% Move the bootstraps where they may be used to build binaries
%

readonly proc MoveBootstraps() is
  foreach platform in Platforms
    if Platforms{platform}[3] 
      CheckExec(["mv", EXPORT_TMP_TMP & "/" & versionName &
          "/language/modula3/m3compiler/m3bootstrap" & "/" & TARGET &
          "/pm3-" & platform,
          EXPORT_TMP_BOOTSTRAP & "/" & platform & "/" & versionName],
          [], "", "moving the bootstraps failed")
    end
  end
end

%
% Everything went well up to here. We have a new release. 
% Remove the previous version, keep the current version, and
% export the new version.
%

readonly proc RemovePreviousVersion() is
  if previousVersionExists
    if not previousVersion[4]
      ret = Exec(["rm", "-r", EXPORT_SRC & "/" & VersionName(previousVersion)],[],"")
    end

    foreach platform in Platforms
      if Platforms{platform}[3] 
        ret = Exec(["rm", "-r", 
            EXPORT_BOOTSTRAP & "/" & platform & "/" & 
            VersionName(previousVersion),
            EXPORT_BINARIES & "/" & platform & "/" & 
            VersionName(previousVersion)],[],"")
      end
    end
  end
end

%
% The version built gets installed (exported)
%

readonly proc InstallNextVersion() is
  CheckExec(["mv", EXPORT_TMP_SRC & "/" & versionName,
      EXPORT_SRC],[],"","export source failed")

  if currentVersionExists
    CheckExec(["mv", EXPORT_TMP_SRC & "/" & DiffName(currentVersion,version), 
        EXPORT_SRC],[],"","export diff failed")
  end

  foreach platform in Platforms
    if Platforms{platform}[3] 
      CheckExec(["mv", 
          EXPORT_TMP_BOOTSTRAP & "/" & platform & "/" & versionName,
          EXPORT_BOOTSTRAP & "/" & platform],[],"","export bootstrap failed")
      if not(NOEXEC)
        > EXPORT_TMP_BOOTSTRAP & "/" & platform & "/" & "TODO" in
          write(versionName,CR)
        end
      end
    end
  end

  CheckExec(["mv", 
      EXPORT_TMP_BINARIES & "/" & TARGET & "/" & versionName,
      EXPORT_BINARIES & "/" & TARGET],[],"","export binaries failed")

  CheckExec(["rm", EXPORT_TMP_BOOTSTRAP & "/" & TARGET & "/" & "TODO"],[],"",
      "remove TODO failed")

  local ret = Exec(["rm", EXPORT_ROOT & "/" & "pkgf" & "/" & "pm3"],[],"")
  CheckExec(["ln","-s",EXPORT_SRC & "/" & versionName,
      EXPORT_ROOT & "/" & "pkgf" & "/" & "pm3"],[],"","link in pkgf failed")
  local ret = Exec(["rm", EXPORT_ROOT & "/" & "pkg" & "/" & "pm3"],[],"")
  CheckExec(["ln","-s",EXPORT_SRC & "/" & versionName,
      EXPORT_ROOT & "/" & "pkg" & "/" & "pm3"],[],"","link in pkg failed")
end

%
% Write the information for the next versions
%

readonly proc UpdateVersionNumbers() is
  local vdir = STORE_VERSION & SL

  if previousVersionExists
    >> vdir & "OLDVERSIONS" in
      write("Version(\"",previousVersion[0],"\",\"",previousVersion[1],"\",\"",
          previousVersion[2],"\",\"",previousVersion[3],"\",\"",
          previousVersion[4],"\")",CR)
    end
  end

  if currentVersionExists
    > vdir & "PREVIOUSVERSION" in
      write("Version(\"",currentVersion[0],"\",\"",currentVersion[1],"\",\"",
          currentVersion[2],"\",\"",currentVersion[3],"\",\"",
          currentVersion[4],"\")",CR)
    end
  end

  > vdir & "CURRENTVERSION" in
    write("Version(\"",NOW,"\",\"",version[1],"\",\"",
        version[2],"\",\"",version[3],"\",\"",version[4],"\")",CR)
  end

  >> EXPORT_VERSION & "/" & "pm3-versions" in
    write("Version ", VersionNumber(version), " released on ",NOW,CR)
  end

  > vdir & "NEXTVERSION" in
    write("Version(\"","0","\",\"",version[1],"\",\"",
        version[2],"\",\"",inc(version[3],1),"\",\"\")",CR)
  end
end

%
% The processing begins here.
%

local ret = 0

local currentVersionExists = ""
local currentVersion = ""

local previousVersionExists = ""
local previousVersion = ""

local nextVersionExists = ""
local version = ""

include("../src/CONFIG")


% Test mode, build everything before attempting a release.

if defined("PRERELEASE")
  write("Pre release test",CR,CR)
  CheckExec(["m3build","-DBOOTTARGET=" & TARGET,
      "-DCACHE_CROSS_COMPILERS=" & EXPORT_TMP_CROSS_COMPILERS], [], 
      "../../m3bootstrap","build bootstrap failed")
  CheckExec(["mv", "boot-" & TARGET, "Makefile",path_of("../../../../..")], 
      [], "../../m3bootstrap/" & TARGET & "/pm3-" & TARGET,
      "move bootstrap to build binaries failed")
  CheckExec(["make","exportall"], ["","make.stdout","make.stderr"],
      path_of("../../../../.."),"building bootstrap failed")
  return
  exit(1)
end

ReadVersionInfo()

if not nextVersionExists
  error("Next version not defined", CR)
end

%
% Insure that the needed directories exist
%

if DoStep("BuildDirectories")
  BuildDirectories()
end

%
% Attempt to clean the current version from the temporary build directory
% before building the next version
%

if DoStep("CleanTmpDirs")
  CleanTmpDirs("","",previousVersionExists,previousVersion)
  CleanTmpDirs(previousVersionExists,previousVersion,
      currentVersionExists,currentVersion)
  CleanTmpDirs(currentVersionExists,currentVersion,nextVersionExists,version)
end

if DoStep("BuildDiff")
  BuildDiff()
end

%
% Export the new version
%

if DoStep("CVSExport")
  CVSExport()
end

%
% Leave the original copy untouched. Take a copy to build the bootstraps
% and binaries.
%

if DoStep("cpSrc")
  CheckExec(["cp","-a",EXPORT_TMP_SRC & "/" & versionName,EXPORT_TMP_TMP],
      [], EXPORT_TMP_TMP,"copy source failed")
end

%
% Build the bootstraps
%

if DoStep("buildBootstraps")
  CheckExec([BIN_USE & SL & "m3build",
      "-DCACHE_CROSS_COMPILERS=" & EXPORT_TMP_CROSS_COMPILERS],
      ["", EXPORT_TMP_TMP & "/" & versionName & "/" & "boot.stdout",
      EXPORT_TMP_TMP & "/" & versionName & "/" & "boot.stderr"],
      EXPORT_TMP_TMP & "/" & versionName & 
      "/language/modula3/m3compiler/m3bootstrap","bootstrap build failed")
end

if DoStep("MoveBootstraps")
  MoveBootstraps()
end

%
% Take a copy of the bootstrap for the current platform and build binaries
%

if DoStep("cpBootTarget")
  CheckExec(["cp", "-a", "boot-" & TARGET, "Makefile", 
      EXPORT_TMP_TMP & "/" & versionName], [], 
      EXPORT_TMP_BOOTSTRAP & "/" & TARGET & "/" & versionName, 
      "copy bootstrap to build binaries failed")
end

if DoStep("makeExportall")
  CheckExec(["make","exportall"], ["", 
      EXPORT_TMP_TMP & "/" & versionName & "/" & "make.stdout", 
      EXPORT_TMP_TMP & "/" & versionName & "/" & "make.stderr"],
      EXPORT_TMP_TMP & "/" & versionName,"building bootstrap failed")
end

%
% Move the binaries to their correct location
%

if DoStep("mvBinaries")
  CheckExec(["mv", EXPORT_TMP_TMP & "/" & versionName & "/" & "binaries" & "/"
      & TARGET, EXPORT_TMP_BINARIES & "/" & TARGET & "/" & versionName],[],"",
      "move binaries failed")
end

if DoStep("done")
  if not(NOEXEC)
    > EXPORT_TMP_BINARIES & "/" & TARGET & "/" & "DONE" in
      write(versionName,CR)
    end
  end
end

if DoStep("RemovePreviousVersion")
  RemovePreviousVersion()
end

if DoStep("InstallNextVersion")
  InstallNextVersion()
end

if DoStep("UpdateVersionNumbers")
  UpdateVersionNumbers()
end

