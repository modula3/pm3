\manpage{The MTeX File Format}{mtex}{7}

\section{NAME}

\bf{mtex} - LaTeX-like file format for describing man pages

\begin{html}
\section{TABLE OF CONTENTS}

\begin{itemize}
\item \link{#Introduction}{Introduction}
\item \link{#Input}{Input Characters}
\item \link{#Comments}{Comments}
\item \link{#Para}{Paragraphs}
\item \link{#TypefaceCmds}{Typeface Commands}
\item \link{#ManpageCmd}{The Manpage Command}
\item \link{#SectionCmd}{The Section Command}
\item \link{#EnvCmds}{Environments}
\item \link{#VerbCmd}{The Verbatim Environment}
\item \link{#LeftCmd}{The Flushleft Environment}
\item \link{#ListEnv}{The List Environments}
\item \link{#OutputSpecEnv}{Output-specific Environments}
\item \link{#AnchorLink}{Anchors and Links}
\item \link{#Examples}{Examples}
\item \link{#M3Build}{M3Build Support}
\item \link{#Makefile}{Makefile Support}
\item \link{#Diagnostics}{Diagnostics}
\item \link{#Bugs}{Bugs}
\item \link{#SeeAlso}{See Also}
\end{itemize}
\end{html}

\section{\anchor{Introduction}{INTRODUCTION}}

This document describes \it{mtex}, a file format suitable for describing
formatted man pages. The programs \link{mtex2html.1.html}
{mtex2html(1)}, \link{mtex2man.1.html}{mtex2man(1)}, and
\link{mtex2tex.1.html}{mtex2tex(1)} are filters that convert
\it{mtex} documents into HTML-, man-, and LaTeX-formatted documents suitable
for viewing with a World-Wide Web browser such as Netscape(1), with
nroff(1)/troff(1) (using the man(7) or man.nopage(7) macro packages),
and with latex(1)/xdvi(1) respectively.

The \it{mtex} file format is loosely based on LaTeX, but it contains
far fewer commands and is somewhat fragile. Like LaTeX, \it{mtex} commands
are introduced by the \tt{\\} (backslash) character, and command
arguments are delimited by curly braces \tt{\{ \}}. \it{Mtex}
also uses \tt{\\begin} and \tt{\\end} commands to bracket
\it{environments}. Some commands have multiple arguments, in which
case the arguments are specified like this:

\begin{verbatim}
  \cmd{arg1}{arg2}...{argN}
\end{verbatim}

In such cases, the arguments may be separated by arbitrary
whitespace. Unlike LaTeX, braces are \it{not} used in \it{mtex} to
delimit scopes; they are used only to delimit arguments.

Except where noted below, the filter programs parse \it{mtex} files
as a sequence of whitespace-separated tokens. The programs for
viewing the resulting output files automatically fill paragraphs,
so how the input is divided into lines is generally
unimportant. There are a few exceptions to this rule. For example,
certain commands must start at the beginning of a line, and text
within the \link{#VerbCmd}{\tt{verbatim}} environment is not
``filled'' or justified.

The \it{mtex} commands may be divided into two groups: \it{running}
commands and \it{line} commands. The running commands may appear
anywhere in running text. The line commands must appear at the
start of a new line, and they generally cause a line break in the
output.

The running commands are:
\begin{itemize}
\item the typeface-changing commands:
\link{#TypefaceCmds}{\tt{\\bf}, \tt{\\it}, \tt{\\tt}};
\item the hypertext commands:
\link{#LinkAnchor}{\tt{\\link}, \tt{\\anchor}}; and
\item the line-breaking command:
\link{#NewlineCmd}{\tt{\\newline}}.
\end{itemize}

The line commands are:
\begin{itemize}
\item the command to declare a man page:
\link{#ManpageCmd}{\tt{\\manpage}};
\item the command to start a new section:
\link{#SectionCmd}{\tt{\\section}};
\item the commands for bracketing environments:
\link{#EnvCmds}{\tt{\\begin}, \tt{\\end}}; and
\item the command for starting a new list item:
\link{#ItemCmd}{\tt{\\item}}
\end{itemize}

\section{\anchor{Input}{INPUT CHARACTERS}}

Any character is legal in an \it{mtex} file, but five characters are
special.

Commands in \it{mtex} begin with a \'\tt{\\}\' (backslash) character,
and have arguments enclosed by \tt{\{} braces \tt{\}}. The backslash
character is also used to escape other characters, as described below.
Hence, these three characters are special. Braces that do not delimit
arguments may appear in your input. However, to include a closing
brace in the argument to a command, you must escape it as described
below.

As in TeX, double-quotes are indicated by pairs of single quotes: the
input \tt{\`\`hello\'\'} produces ``hello''. Hence each of the single
quote characters is special. Stand-alone single quote characters may
appear in your input (for example, as an apostrophe in a conjunction
or possessive). However, to produce two consecutive single quote
characters like \tt{\`\`this\'\'}, you must escape the characters as
described below.

Each of the five special characters may be escaped with the
backslash character itself:

\begin{itemize}
\item \tt{\\\\} produces backslash (\tt{\\})
\item \tt{\\\{} produces left brace (\tt{\{})
\item \tt{\\\}} produces right brace (\tt{\}})
\item \tt{\\\`} produces single left quote (\tt{\`})
\item \tt{\\\'} produces single right quote (\tt{\'})
\end{itemize}

The escape for the left brace character is not strictly necessary; it
is provided only for symmetry.

You are advised not to use the double-quote character in your input,
since there is no way to reliably specify this character in nroff
input. In particular, double-quote is known \it{not} to work in the
arguments of the \tt{\\manpage} and \tt{\\section}
commands. Use \tt{\`\`} and \tt{\'\'} wherever possible.

For each output format, certain additional characters are
special. For example, in HTML, the ``\tt{<}'' character is special;
to produce it in an HTML file for viewing, you would have to write
``\tt{&lt;}''. Each of the filter programs translates the characters
that are special for its output format automatically, so
mtex2html(1) will in fact convert the input ``\tt{a < b}'' to
produce ``\tt{a &lt; b}'' in the HTML output.

To include one of the output-specific characters in the output
without translating it, you can escape the character with a \tt{\\}
(backslash). However, since such escape sequences are
output-specific, they are only allowed in the
\link{#OutputSpecEnv}{output-specific environments} described below.

\section{\anchor{Comments}{COMMENTS}}

Lines beginning with the \tt{%} (percent) character start comments in
the input file. All characters from the percent character up to and
including the first newline character are ignored.

To include a percent character in your output, simply make sure that
it does not appear at the start of an input line.

\section{\anchor{Para}{PARAGRAPHS}}

Paragraphs in the input are separated by one or more consecutive blank
lines. Both mtex2html(1) and mtex2man(1) produce a single blank line
in the output at the start of a new paragraph; mtex2tex(1)
indents the first line of the new paragraph without skipping
a line.

\section{\anchor{TypefaceCmds}{TYPEFACE COMMANDS}}

The \it{mtex} format includes commands for typesetting short bits of
text in a \bf{bold}, \it{italic}, or \tt{typewriter} typeface:

\begin{itemize}
\item \tt{\\bf\{<Text>\}} typesets \tt{<Text>} in \bf{bold face}
\item \tt{\\it\{<Text>\}} typesets \tt{<Text>} in \it{italics}
\item \tt{\\tt\{<Text>\}} typesets \tt{<Text>} in \tt{typewriter font}
\end{itemize}

The syntax of these commands is slightly different from standard
TeX, since the arguments are expected to be short, and only one
alternative typeface should be used at a time.

Typeface commands may be nested, but the output will probably not be
what you expect. For example, the input \tt{\\it\{one \\bf\{bold\}
word\}} will most likely set the words ``one'' and ``word'' in an
italic typeface, but the word ``bold'' in a bold roman typeface,
not a bold italic typeface.

Typeface commands may appear in running text, but it is
an unchecked error to include them in arguments to the
\link{#ManpageCmd}{\tt{\\manpage}} and
\link{#SectionCmd}{\tt{\\section}} commands, since these commands
automatically typeset their arguments in an output-dependent way.

\section{\anchor{ManpageCmd}{THE MANPAGE COMMAND}}

Every \it{mtex} manpage should begin with the \it{manpage}
command. It has the format:

\begin{verbatim}
  \manpage{<PageTitle>}{<Name>}{<Section>}
\end{verbatim}

The \tt{<PageTitle>} is the nominal title for this page, and is
used in HTML output only. The \tt{<Name>} value should be the
name of the command or routine, and \tt{<Section>} should be the
section of the manual in which this man page appears. For example,
the source for this manpage begins with the line:

\begin{verbatim}
  \manpage{The MTeX File Format}{mtex}{7}
\end{verbatim}

The \tt{\\manpage} command must start on its own line, and no other
non-whitespace characters may appear after its last argument on the
same line. Any blank lines after it are ignored. The arguments
should not include typeface commands.

\section{\anchor{SectionCmd}{THE SECTION COMMAND}}

New man page sections are introduced with the \tt{\\section}
command, which has the form:

\begin{verbatim}
  \section{<Text>}
\end{verbatim}

The \tt{<Text>} will be typeset as a section title, indicated by
typeface, font size, or indentation level. The \tt{\\section}
command must start on its own line, and no other non-whitespace
characters may appear after its argument on the same line. Only
\tt{\\link} and \tt{\\anchor} commands may be used within the
\tt{<Text>} argument.

\section{\anchor{EnvCmds}{ENVIRONMENTS}}

An \it{environment} is a syntactic scope for formatting multiple
input lines in a certain way. For example, the lines in a
\link{#VerbCmd}{verbatim environment} are formatted in a
fixed-width font without being filled or justified.

The lines of an environment are delimited by a matching
\tt{\\begin}-\tt{\\end} pair, like this:

\begin{verbatim}
  \begin{<EnvType>}
  ...
  \end{<EnvType>}
\end{verbatim}

Environments may be nested, but matching \tt{\\begin} and
\tt{\\end} lines must have matching \tt{<EnvType>} arguments. The
legal \tt{<EnvType>} values are \link{#VerbCmd}{\it{verbatim}};
\link{#LeftCmd}{\it{flushleft}}; the list environments
\link{#ListEnv}{\it{itemize}, \it{enumerate}, and \it{description}};
and the output-specific environments \link{#OutputSpecEnv}{\it{html},
\it{roff}, and \it{tex}}.

Both the \tt{\\begin} and \tt{\\end} commands must start on their
own lines, and neither may be followed by any non-whitespace
characters.

\section{\anchor{VerbCmd}{THE VERBATIM ENVIRONMENT}}

Text within the \it{verbatim} environment is typeset in a
fixed-width font and is not filled. This means that whitespace
within this environment is significant. Moreover, no characters
within this environment are special, so in particular, all commands
are ignored; special characters need not be escaped by a preceding
backslash.

Regardless of whether there are blank lines before and/or after the
verbatim environment, the verbatim text will be preceeded and followed
by a blank line in the formated output.

\section{\anchor{LeftCmd}{THE FLUSHLEFT ENVIRONMENT}}

Normally, the lines of a paragraph are filled automatically by the
programs that process the output produced by the mtex filters. To
produce ragged-right text in which you specify the line break
positions manually, use the \it{flushleft} environment together with
the \anchor{NewLineCmd}{\tt{\\newline}} command.

Within the \it{flushleft} environment, \tt{\\newline} starts a new
line of output flush with the current left margin. Only whitespace
characters are allowed to follow this command on its line. It is an
error for \tt{\\newline} to occur outside the scope of a
\it{flushleft} environment.

For example, the input:

\begin{verbatim}
  \begin{flushleft}
  Systems Research Center\newline
  131 Lytton Avenue\newline
  Palo Alto, CA 94301
  \end{flushleft}
\end{verbatim}

produces

\begin{flushleft}
Systems Research Center\newline
131 Lytton Avenue\newline
Palo Alto, CA 94301
\end{flushleft}

\section{\anchor{ListEnv}{THE LIST ENVIRONMENTS}}

\it{Mtex} provides three list environments for formatting a list of
items: \it{itemize}, \it{enumerate}, and \it{description}. Items
within the \it{itemize} environment are set off by tick marks,
those within the \it{enumerate} environment are set off by cardinal
numbers, and those within the \it{description} environment are set
off by a user-supplied string.

Items within the three list environment are denoted by the
\anchor{ItemCmd}{\tt{\\item}} command. In the \it{itemize}
and \it{enumerate} environments, this command has no
arguments, but in the \it{description} environment, it has a
single argument which is the description string. Typeface
changes are allowed within this argument, as are the other
running commands, but the backslash escape sequence
``\tt{\\\\}'' should not be used in this argument.

Paragraph breaks may be used between and within items to produce
blank lines in the formatted output. However, since the text of
items within the \it{itemize} and \it{enumerate} environments is
expected to immediately follow the tick mark or cardinal tag, you
are advised \it{not} to follow the zero-argument \tt{\\item}
command with a paragraph break.

List environments may be nested arbitrarily, but the introduction
of a new list environment indents the output, so nestings more than
three deep are not advised.

The following example captures many of the possible ways in which
the list environments can be used. The input:

\begin{verbatim}
  \begin{description}
  \item{The \it{itemize} environment}
  The \it{itemize} environment yields itemized lists:
  \begin{itemize}
  \item indented
  \item set off by tick marks
  \end{itemize}

  \item{The \it{enumerate} environment}
  The items within \it{enumerate} are numbered:
  \begin{enumerate}
  \item start your manpage with \tt{\\manpage}
  \item then, use \tt{\\section} for the sections
  \end{enumerate}
  The numbers are produced automatically.

  \item{The \it{description} environment}
  In the \it{description} environment, each item is
  labeled with a user-supplied string.

  Notice that blank lines within an item produce
  paragraph breaks in the formatted output.
  \end{description}
\end{verbatim}

produces:

\begin{description}
\item{The \it{itemize} environment}
The \it{itemize} environment yields itemized lists:
\begin{itemize}
\item indented
\item set off by tick marks
\end{itemize}

\item{The \it{enumerate} environment}
The items within \it{enumerate} are numbered:
\begin{enumerate}
\item start your manpage with \tt{\\manpage}
\item then, use \tt{\\section} for the sections
\end{enumerate}
The numbers are produced automatically.

\item{The \it{description} environment}
In the \it{description} environment, each item is
labeled with a user-supplied string.

Notice that blank lines within an item produce
paragraph breaks in the formatted output.
\end{description}

\section{\anchor{OutputSpecEnv}{OUTPUT-SPECIFIC ENVIRONMENTS}}

The \it{html}, \it{roff}, and \it{tex} environments can be used to
include text for one particular output format. Text within the
\it{html} environment is only processed by the mtex2html(1) filter,
text within the \it{roff} environment is only processed by the
mtex2man(1) filter, and text within the \it{tex} environment is only
processed by the mtex2tex(1) filter.

The special characters particular to an output format \it{are}
converted in each of these environments. If you want to include
any of them literally, you must escape them. For example, the
following code includes an inlined image in the HTML file produced
by mtex2html(1), but is ignored by the other filters:

\begin{verbatim}
  \begin{html}
  \<IMG SRC="image.gif"\>
  \end{html}
\end{verbatim}

Notice how the \tt{<} and \tt{>} characters are escaped in this
example, since those two characters are special for HTML. Each of the
man pages for the filter programs has a section listing the characters
that are special for its output format.

\section{\anchor{AnchorLink}{ANCHORS AND LINKS}}

You can create anchor locations using the \tt{\\anchor} command,
and links to other documents or to anchors in the current document
using the \tt{\\link} command. Both of these commands are running
commands and may appear anywhere in the input.

The syntax of the anchor command is:

\begin{verbatim}
  \anchor{<Name>}{<Text>}
\end{verbatim}

This associates an anchor named \tt{<Name>} with the text
\tt{<Text>}. The \tt{<Text>} argument may contain other running
commands, such as the \link{#TypefaceCmds}{typeface commands}.

The syntax of the link command is:

\begin{verbatim}
  \link{<Anchor>}{<Text>}
\end{verbatim}

This makes the text \tt{<Text>} a link to the anchor \tt{<Anchor>}. The
\tt{<Anchor>} argument may be any legal HTML anchor, as described in
\link{http://www.ncsa.uiuc.edu/General/Internet/WWW/HTMLPrimer.html#A1.3.3}
{\it{The Beginner's Guide to HTML}}. If you want the link to point to
an anchor within the same document, \tt{<Anchor>} should start with
the \tt{#} (pound-sign) character.

Here is an example of a file with an anchor and a link to that local
anchor:

\begin{verbatim}
  \section{\anchor{DescSect}{Description}}
  Here is the description section text...

  Later in the file, here is a link to
  the \link{#DescSect}{description} section.

  Here is a non-local link to the
  \link{http://src-www.pa.dec.com/src.home.html}
  {SRC Home Page}.
\end{verbatim}

Notice in the second \tt{\\link} example how we've taken
advantage of the fact that command arguments may be separated
by arbitrary amounts of whitespace.

\section{\anchor{Examples}{EXAMPLES}}

Here is the mtex source for the \bf{quake(1L)} man page:

\begin{verbatim}
  \manpage{quake}{quake}{1L}

  \section{NAME}
  quake - a system for compiling Modula-3 program descriptions

  \section{SYNOPSIS}
  \bf{quake} [-nV] [definitions | files ...]

  \section{DESCRIPTION}
  Quake is a simple, specialized language and its interpreter
  drawing on elements of the C language, the Bourne shell, and
  the C pre-processor. It was designed to be a component of
  m3build(1)-the replacement for m3make (q.v.). Building a
  complete, general-purpose language was not one of the goals.

  For a full description, see URL:

  \link{http://www.research.digital.com/SRC/modula-3/html/quake/quake.html}
  {http://www.research.digital.com/SRC/modula-3/html/quake/quake.html}

  \section{SEE ALSO}
  m3build(1)

  \section{AUTHOR}
  Stephen Harrison
\end{verbatim}

Here is the mtex source of a slightly more complicated man page ---
the \link{mtex2html.1.html}{mtex2html(1)} man page itself:

\begin{verbatim}
  \manpage{mtex2html Man Page}{mtex2html}{1}
  
  \section{NAME}

  mtex2html - translate mtex(7) files to HTML format
  
  \section{SYNTAX}

  \bf{mtex2html}
  
  \section{DESCRIPTION}
  
  \it{mtex2html} is a filter that reads a file in \link{mtex.7.html}
  {mtex(7)} format from its standard input, and writes an
  \link{http://www.ncsa.uiuc.edu/General/Internet/WWW/HTMLPrimer.html}{HTML
  (HyperText Markup Language)} file to standard output suitable for viewing
  with xmosaic(1).
  
  \it{mtex2html} is written entirely in LIM (see lim(1)).
  
  \section{SPECIAL CHARACTERS}
  
  There are three special characters for the HTML output format. Here
  are the characters and the strings they are translated to by
  mtex2html(1):
  
  \begin{flushleft}
  ``\tt{<}'' becomes ``\tt{&lt;}''\newline
  ``\tt{>}'' becomes ``\tt{&gt;}''\newline
  ``\tt{&}'' becomes ``\tt{&amp;}''
  \end{flushleft}
  
  To prevent these characters from being translated within the
  scope of an \it{html} environment, you must escape them with a
  \tt{\\} (backslash) character.
  
  \section{DIAGNOSTICS}
  
  See the \link{mtex.7.html#Diagnostics}{Diagnostics} section of the
  \link{mtex.7.html}{mtex(7)} manpage for a complete description.

  \section{SEE ALSO}
  
  \link{mtex.7.html}{mtex(7)},
  \link{mtex2man.1.html}{mtex2man(1)},
  \link{mtex2tex.1.html}{mtex2tex(1)},
  xmosaic(1)
  \begin{roff}
  
  This man page is also available as a hypertext document under
  Mosaic at URL
  \tt{http://src-www.pa.dec.com/SRC/man/DS/mtex2html.1.html}.
  \end{roff}
  
  \section{AUTHOR OF PROGRAM AND DOCUMENTATION}
  
  \link{http://src-www.pa.dec.com/SRC/people/Allan_Heydon/bio.html}
  {Allan Heydon} (\tt{heydon@src.dec.com})
\end{verbatim}

Note the use of the \it{roff} environment in the SEE ALSO section. The
text within this environment will not appear in the HTML file produced
by the \link{mtex2html.1.html}{mtex2html(1)} filter program.

\section{\anchor{M3Build}{M3BUILD SUPPORT}}

To build and install HTML- and man-formatted output files
automatically using
\link{http://src-www.pa.dec.com/SRC/external/modula-3/html/m3build/m3build.html}
{m3build(1)}, just add the following lines to your \it{m3makefile}:

\begin{verbatim}
  import("mtex")
  Mtex(<title>, <section>)
\end{verbatim}

You should have one \tt{Mtex} line for each man page; you should
have exactly one \tt{import("mtex")} line (and it must appear
before the \tt{Mtex} lines).

Each \tt{Mtex} line runs mtex2html(1) and mtex2man(1) on the file
named ``<title>.<section>.mtex'' in your source directory. The
corresponding derived files are called ``<title>.<section>.html''
and ``<title>.<section>''. For example, the lines:

\begin{verbatim}
  import("mtex")
  Mtex("Juno", 1)
\end{verbatim}

cause the file ``Juno.1.mtex'' to be used as a source to produce
the derived files ``Juno.1.html'' and ``Juno.1''. When you ship
your package, the man-formatted man pages are installed as per
the \tt{ManExport} function, and the HTML-formatted pages are
installed in a site-specific subdirectory of the default HTML
export directory. At SRC, they are installed in:

\begin{verbatim}
  /proj/www/SRC/man/<BuildDir>
\end{verbatim}

where ``<BuildDir>'' is the name of the build directory, such as
``DS'' or ``AOSF''.

\section{\anchor{Makefile}{MAKEFILE SUPPORT}}

To build HTML-, man-, and LaTeX-formatted output files
automatically using make(1), you can add the following line to
your Makefile:

\begin{verbatim}
  include /proj/cra/pkg/mtex/mtex.makestub
\end{verbatim}

This includes the dependency rules specified in the \tt{mtex.makestub}
file, whose contents are:

\begin{verbatim}
  .SUFFIXES: .txt .tex .man .html .mtex

  .mtex.html: ; mtex2html < $? > $@
  .mtex.man:  ; mtex2man < $? > $@
  .mtex.tex:  ; mtex2tex < $? > $@
  .man.txt:   ; nroff -man.nopage $? > $@
\end{verbatim}

This file specifies rules for building the HTML-, man-, and
LaTeX-formatted manpages using the mtex2html(1), mtex2man(1),
and mtex2tex(1) filter programs. The last line uses
nroff(1) to produce an ASCII version of the manpage from the
man-formatted version.

This makefile stub defines rules for converting ".\tt{mtex}"
files to ".\tt{html}", ".\tt{man}", ".\tt{tex}", and ".\tt{txt}"
files. Typically, your filename will include a section number, so the
mtex source file will have the form "<name>.<sect>.\tt{mtex}". With the
above rules, you'll get files of the form "<name>.<sect>.\tt{html}" and
"<name>.<sect>.\tt{man}". The former is fine to ship, but the latter is
not, since the ".man" extension is extraneous. Tim Mann has discovered
some make(1) magic for shipping the files correctly (this is only
known to work with the version of make(1) running on OSF/1).

First, you'll need to define variables for naming the man pages. Since
man pages for different sections are shipped to different places,
you'll have to divide your package's man pages by section. Here's an
example for the mtex man pages:

\begin{verbatim}
MAN1_DOCS = mtextohtml.1 mtextoman.1 mtextotex.1
MAN7_DOCS = mtex.7
MAN_DOCS  = $(MAN1_DOCS) $(MAN7_DOCS)
HTML_DOCS = $(MAN_DOCS/$/.html)
\end{verbatim}

The magic in the definition of \tt{HTML_DOCS} expands to a list of
files of the form "<name>.<sect>.\tt{html}". Now, the line for building
all of the documents is:

\begin{verbatim}
docs: $(HTML_DOCS) $(MAN_DOCS/$/.man)
\end{verbatim}

The magic at the end of this line expands to a list of files of the
form "<name>.<sect>.\tt{man}". Hence, typing "\tt{make} \tt{docs}"
produces a set of ".\tt{html}" and ".\tt{man}" files.

All that remains now is to ship the files to correct places with the
correct names. At SRC, the roff-formated man pages are shipped to the
directory
\begin{verbatim}
  /proj/man/<arch>/man<sect>/
\end{verbatim}
where <arch> is either "\tt{alpha}" or "\tt{mips}", and <sect> is the
manual section number. The HTML-formatted man pages are shipped to the
directory
\begin{verbatim}
  /proj/www/SRC/man/<arch>/
\end{verbatim}
where <arch> is either "\tt{AOSF}" or "\tt{DS}". Here is a typical
shippackage(1) line:

\begin{verbatim}
ship: tidy
        shippackage $(PACKAGE)\
          -l /proj/www/SRC/man/AOSF $(HTML_DOCS)\
          -l /proj/man/alpha/man1 $(MAN1_DOCS/*/&=&.man)\
          -l /proj/man/alpha/man7 $(MAN7_DOCS/*/&=&.man)
\end{verbatim}

The make magic in the lines for shipping the roff-formatted man pages
expands to a list of expressions of the form
"<name>.<sect>=<name>.<sect>.\tt{man}". This causes the link to be made
to the ".\tt{man}" file in the current directory, but for the shipped link
to have the name "<name>.<sect>", as required.

\section{\anchor{Diagnostics}{DIAGNOSTICS}}

All of the filter programs use the same core program to do
their processing, so they all have the same diagnostics.

If there are any errors in the input, the filter prints a
descriptive error message followed by the line of the filter
program at which the program aborted together with the number
of characters read and written at the time of failure. In
this case, the process exits with Unix exit code 2. If there
were no errors, the process exits with Unix exit code 0.

Each error message gives a line number and a description of
the error. The possible error messages and their meanings
are:

\begin{itemize}
\item \tt{command must appear at start of line}

One of the line commands \tt{\\manpage}, \tt{\\section}, \tt{\\begin},
\tt{\\end} or \tt{\\item} on the indicated line does not appear at the start
the a line.

\item \tt{command not followed by left brace}

The command on the indicated line is a known command, but it has at least
one argument. The command name must be followed immediately by a left
brace (\tt{\{}) character.

\item \tt{no text allowed after command on this line}

Either the \tt{\\newline} command or one of the line commands \tt{\\manpage},
\tt{\\section}, \tt{\\begin}, or \tt{\\end} on the indicated line has a
non-whitespace character after its last argument on the same line as that
argument.

\item \tt{command illegal in argument begun on line <X>}

One of the commands \tt{\\manpage}, \tt{\\section},
\tt{\\begin}, \tt{\\end}, \tt{\\item}, or \tt{\\newline}
on the indicated line appears within a command argument.
The opening left brace of the argument is on line number \tt{<X>}.
You may have simply left out the closing right brace. Only the
running commands \tt{\\bf}, \tt{\\it}, \tt{\\tt}, \tt{\\link},
and \tt{\\anchor} are allowed to appear in command arguments.

\item \tt{command illegal in list environment}

The \tt{\\manpage} and \tt{\\section} commands must appear at top-level; they
are not allowed to appear within one of the \link{#ListEnv}{list
environments}.

\item \tt{syntax error in \\<cmd>}

A syntax error occurred while parsing the named \tt{<cmd>} starting on the
specified line. Most likely this is due to a missing argument or to an
incorrect curly brace. Command syntax is described in the
\link{#Introduction}{Introduction} section above.

\item \tt{unrecognized command or special character "\\<cmd>"}

A \tt{\\} (backslash) character on the specified line is followed by
the characters \tt{<cmd>} that are neither a command, one of the five
escape characters listed in the \link{#Input}{Input Characters}
section, nor one of the special characters for this output format.

\item \tt{illegal output-specific quoted character "\\<char>"}

The quoted character \tt{<char>} is special for this output format,
but does not appear inside the corresponding output-specific
environment.

\item \tt{unrecognized \\begin/\\end argument}

The argument to the \tt{\\begin} or \tt{\\end} command on the specified line
is not one of: \tt{verbatim}, \tt{flushleft}, \tt{itemize},
\tt{enumerate}, \tt{description}, \tt{html}, \tt{roff}, or \tt{tex}.

\item \tt{not expecting \\end}

An \tt{\\end} command was encountered for which there is no matching
\tt{\\begin}, or which is contained within the argument to a command.

\item \tt{expecting \\end\{<env>\}}

The most recent \tt{\\begin} command introduced the environment \tt{<env>},
but the \tt{\\end} command on the specified line closes a different
environment.

\item \tt{no matching \\end for \\begin}

End-of-file was reached before an \tt{\\end} command was found that matches
the \tt{\\begin} command on the specified line.

\item \tt{no matching right brace for \\<cmd>}

A matching right brace could not be found for one of the arguments to the
command \tt{<cmd>}. In this case, the line number given is that on which the
command \it{begins}.

\item \tt{\\newline not in flushleft environment}

The \tt{\\newline} command is only allowed to appear in the scope of
a \it{flushleft} environment.

\item \tt{\\item should not have an argument in itemize/enumerate environment}

The \tt{\\item} command on the specified line has an argument, yet it should
not because it appears within either an \tt{itemize} or \tt{enumerate}
environment.

\item \tt{\\item must have an argument in description environment}

The \tt{\\item} command on the specified line has no argument, yet it should
because it appears within a \tt{description} environment.

\item \tt{\\item not in list environment}

The \tt{\\item} command on the specified line does not appear in a
list environment.

\end{itemize}

\section{\anchor{Bugs}{BUGS}}

There are no provisions for distinguishing between dashes, hyphens,
and minus signs.

The \tt{"} (double-quote) and \tt{\\} (backslash) characters
should work in all circumstances. They don't due to
difficulties with nroff(1) and the man(7) macros.

\section{\anchor{SeeAlso}{SEE ALSO}}

\begin{flushleft}
\link{mtex2html.1.html}{mtex2html(1)},
\link{mtex2man.1.html}{mtex2man(1)},
\link{mtex2tex.1.html}{mtex2tex(1)}\newline
make(1), latex(1), xdvi(1), xmosaic(1)\newline
nroff(1), troff(1), man(7), man.nopage(7)
\end{flushleft}
\begin{roff}

This man page is also available as a hypertext document under Mosaic at URL
\tt{http://src-www.pa.dec.com/SRC/man/DS/mtex.7.html}.
\end{roff}

\section{AUTHOR OF DOCUMENTATION}

\link{http://src-www.pa.dec.com/SRC/people/Allan_Heydon/bio.html}{Allan Heydon}
(\tt{heydon@src.dec.com})

\begin{verbatim}
Last modified on Tue Nov  7 10:41:29 PST 1995 by heydon
\end{verbatim}
