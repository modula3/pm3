.\" This file generated automatically by mtex2man(1)
.nh
.TH "stablegen" "1"
.SH "Name"
\fBstablegen\fR \-\- Generate stubs for stable objects.
.SH "Syntax"
.PD 0
.RS 0
.TP 6
\fBstablegen\fR
[\fB\-i\fR \fIInterfaces\fR] [\fB\-o\fR \fIStableObjectIntf\fR]
[\fB\-im\fR \fIStableObjectImpl\fR] [\fB\-rm\fR \fIRepModule\fR] [options]
.RE
.PD
.PP
.SH "Description"
The program \fIstablegen\fR generates stubs for Modula\-3 stable 
objects. Stable objects are Modula\-3 objects whose state 
is backed up on the disk or other stable medium, so that it 
will survive program crashes.  
.PP
It is not intended to be used from the command line. Use
\fIm3build\fR and the quake macros \fIstableobj\fR and \fIStableobj\fR
instead to run the stub generator (see the m3build section
below).
.PP
The command
.EX
    stablegen \-i Data \-o Data \-im Impl \-rm Rep
.EE
writes into \*(lq\fIImpl\fR.m3\*(rq an implementation of the generic
interface \*(lqStable(Data)\*(rq. See this generic interface for the
specifications of the methods and procedures implemented by
\fIstablegen\fR.  Thus \fIData\fR should be the name of an interface and
\fIData\fR.T should name an object type; \fIstablegen\fR implements a
stable version of \fIData\fR.T and writes the implementation to
\*(lq\fIImpl\fR.m3\*(rq.  \fIImpl\fR defaults to the objects interface
name as stated in the \-o option with \*(lqStable\*(rq prepended.  All
interfaces that contain revealations of \fIData\fR.T must be listed
after the \-i parameter.  The first interface of the list must contain the
most specific supertype of \fIData\fR.T. In most cases this will be \fIData\fR
itself. But if \fIData\fR does not state any more specific supertyp of 
\fIData\fR.T than ROOT, the interface listet after the \-i will be the
one containing the most specific revealation.
.PP
To complete your program, you
should include in the file \*(lq\fIImpl\fR.i3\*(rq the text
.EX
    INTERFACE Impl = Stable(Data) END Impl.
.EE
The implementation of stable objects consists of two modules.
The first is generated by \fIstablegen\fR, the second is an
instantiation of the generic module \*(lqStableRep\*(rq. The name of
this second module is stated after the \-rm option. It
defaults to the name of the generated implementation \fIImpl\fR
with \*(lqRep\*(rq appended. If both module names are defaulted,
\*(lqStable\fIData\fRRep\*(rq will be used for the generic's instantiation.
So in the file \*(lq\fIRep\fR.i3\*(rq you will
need the text
.EX
    INTERFACE Rep = StableRep(Impl) END Rep.
.EE
And the file \*(lq\fIRep\fR.m3\*(rq looks like
.EX
    MODULE Rep = StableRep(Impl) END REP.
.EE
The m3build macros will also generate all these files (see below). 
.SH "Classifying the methods"
The interface \*(lq\fIData\fR.i3\*(rq presented to the stub generator
must contain a pragma that lists all methods of \fIData\fR.T that modify
the state of the object.  The pragma has the form
.EX
    <* STABLE UPDATE METHODS m_1, ..., m_k *>
.EE
where the m's are the names of the update methods of \fIData\fR.T.  The
stub generator will override these methods to log their arguments
before calling the corresponding method of the supertype.  The stub
generator will not override the other methods of \fIData\fR.T; the
stable object will simply inherit them from its supertype.  The pragma
may appear more than once (the list stated in the second pragma will
be appended to those methods already mentioned).  You may use ANY
instead of a list of methods in which case all methods of the object
are treated as update methods.
.SH "Options"
The stub generator is based on the Modula 3 toolkit, therefore the
other options defined by the toolkit are available.  See the manpage
for \fIm3fe\fR for a list of these options.  In particular, it is
possible to set the search path used by the stub generator with the
\-T\fIx\fR option, where \fIx\fR is the name of a map file
generated by m3build.  The name of the map file associated with
package \fIP\fR and build directory \fIB\fR is P/B/.M3IMPORTS. It is also
possible to set a specific search path with the \-D option, though
this is usually more trouble than it is worth.
.PP
You may use \-help instead of any other options to get a list of available
options.
.SH "Restrictions"
As mentioned before, not all types \fIData\fR.T are valid for stub generation.
The following restrictions apply.  The stub generator will not 
produce stubs for types that violate any of the restrictions. 
.PD 0
.RS 0
.TP 6
   1.
No argument to an update method may be of type PROCEDURE 
	or have a component of type PROCEDURE.
.TP 6
   2.
The name of the update methods listed in the STABLE UPDATE METHODS
	pragma must not conflict with the names of the stable object
	methods as declared in Stable.ig.
.RE
.PD
The marshaling of parameters to update methods is performed as 
for network objects, as specified in the documentation for \fIstubgen\fR. 
.SH "Generating stubs using m3build"
Currently the macros described here only support the defaults
for the filenames of the generated module and the instatiated
generic part of the implementation.
.PP
It is possible to manage stub generation using \fIm3build\fR.  You must
put the following line in your \fIm3makefile\fR, prior to any
occurrences of one of the macros:
.EX
    import("stable")
.EE
To state that an interface \fIData\fR contains a stable object use one
of the macros:
.EX
    stableobj("Data", [])
    Stableobj("Data", [])
.EE
(\fIStableobj\fR sets the visability of the stable object's interface
to visible, \fIstableobj\fR to hidden) which generates stubs for
\fIData\fR.T, storing them in \*(lqStable\fIData\fR.m3\*(rq. It
generate the instatiation of Stable.ig in
\*(lqStable\fIData\fR.i3\*(rq and the instatiation of the generic
part of the implementation (StableRep) in
\*(lqStable\fIData\fRRep.i3\*(rq and
\*(lqStable\fIData\fRRep.i3\*(rq. It also arranges for the
generated stubs to be compiled and linked into the program.
.PP
The second parameter of the macros is a list of interfaces that
\fIData\fR depends on. The first in the list must be the interface
containing the most specific exported revealation of \fIData\fR.T.
The following interface names are only used to trigger \fIstablegen\fR
correctly. If one of those interfaces are changed, \fIstablegen\fR
will be run again on the next call of \fIm3build\fR.
.PP
If the second parameter is the empty list, it is assumed that
\*(lq\fIData\fR.i3\*(rq is the only interface containing definitions
necessary for \fIData\fR.T.
.PP
The rules for importing interfaces during stub generation are 
the same as those for compilation under \fIm3build\fR. See the \fIm3build\fR 
manpage for further detail.
.SH "Copyright"
Copyright (C) 1994, Digital Equipment Corporation.
.br
Distributed only by permission.
.br

Last modified on Thu Jan 19 14:28:03 PST 1995 by kalsow  
     modified on Tue Sep 27 11:52:22 PDT 1994 by weich   
.BR
