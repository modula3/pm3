%
%  Quake functions to instantiate generic lists and sets.
%

readonly proc build_generic_impl_with_exp (nm, generic, args, exp) is
  local file = nm & ".m3"
  local tmp  = ".generic.tmp"
  local sep  = ""
  if defined ("_all")
    > tmp in
      write ("(*generated by m3build*)", CR, CR)
      write ("MODULE ", nm, " EXPORTS ")
      foreach f in exp
        write (sep, f)
        sep = ", "
      end
      write(" = ", generic, " (")
      sep = ""
      foreach f in args
        write (sep, f)
        sep = ", "
      end
      write (") END ", nm , ".", CR)
    end
    cp_if (tmp, file)
    delete_file (tmp)
  end
  derived_implementation (nm)
end

readonly proc CursorSet (nm, element) is
  local str = nm & "Set"
  local intern = "Intern" & str
  build_generic_intf (str, "CursorSet", [element], VISIBLE)
  build_generic_intf (intern, "InternCursorSet", [str], HIDDEN)
  build_generic_impl_with_exp (str, "CursorSet", [element], [str, intern])
end

readonly proc cursorSet (nm, element) is
  local str = nm & "Set"
  local intern = "Intern" & str
  build_generic_intf (str, "CursorSet", [element], HIDDEN)
  build_generic_intf (intern, "InternCursorSet", [str], HIDDEN)
  build_generic_impl_with_exp (str, "CursorSet", [element], [str, intern])
end

readonly proc CursorList (nm, element) is
  local str = nm & "List"
  build_generic_intf (str, "CursorList", [element], VISIBLE)
  build_generic_impl (str, "CursorList", [element])
end

readonly proc cursorList (nm, element) is
  local str = nm & "List"
  build_generic_intf (str, "CursorList", [element], HIDDEN)
  build_generic_impl (str, "CursorList", [element])
end

readonly proc NTree (nm, element) is
  local str = nm & "NTree"
  build_generic_intf (str, "NTree", [element], VISIBLE)
  build_generic_impl (str, "NTree", [element])
end

readonly proc ntree (nm, element) is
  local str = nm & "NTree"
  build_generic_intf (str, "NTree", [element], HIDDEN)
  build_generic_impl (str, "NTree", [element])
end

readonly proc Stack (nm, element) is
  local str = nm & "Stack"
  build_generic_intf (str, "Stack", [element], VISIBLE)
  build_generic_impl (str, "Stack", [element])
end

readonly proc stack (nm, element) is
  local str = nm & "Stack"
  build_generic_intf (str, "Stack", [element], HIDDEN)
  build_generic_impl (str, "Stack", [element])
end

readonly proc PriorityQueue (nm, element) is
  local str = nm & "PQueue"
  build_generic_intf (str, "PriorityQueue", [element], VISIBLE)
  build_generic_impl (str, "PriorityQueue", [element])
end

readonly proc priorityQueue (nm, element) is
  local str = nm & "PQueue"
  build_generic_intf (str, "PriorityQueue", [element], HIDDEN)
  build_generic_impl (str, "PriorityQueue", [element])
end

readonly proc relation(nm, elem1, elem2, elem1set, elem2set) is
  local str = nm & "Relation"
  local relelem = elem1 & elem2 & "RelationElement"
  local relelemset = elem1 & elem2 & "Set"
  local intern = "Intern" & relelemset

  build_generic_intf(relelem, "RelationElement", [elem1, elem2], HIDDEN)
  build_generic_impl(relelem, "RelationElement", [elem1, elem2])
  cursorSet(elem1 & elem2, relelem)
  build_generic_intf (str, "Relation", [elem1, elem2, elem1set, elem2set, 
                                        relelemset], HIDDEN)
  build_generic_impl (str, "Relation", [elem1, elem2, elem1set, elem2set, 
                                        relelem, relelemset, intern])
end

readonly proc Relation(nm, elem1, elem2, elem1set, elem2set) is
  local str = nm & "Relation"
  local relelem = elem1 & elem2 & "RelationElement"
  local relelemset = elem1 & elem2 & "Set"
  local intern = "Intern" & relelemset

  build_generic_intf(relelem, "RelationElement", [elem1, elem2], VISIBLE)
  build_generic_impl(relelem, "RelationElement", [elem1, elem2])
  CursorSet(elem1 & elem2, relelem)
  build_generic_intf (str, "Relation", [elem1, elem2, elem1set, elem2set, 
                                        relelemset], VISIBLE)
  build_generic_impl (str, "Relation", [elem1, elem2, elem1set, elem2set, 
                                        relelem, relelemset, intern])
end

